"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/memoirist@0.3.1";
exports.ids = ["vendor-chunks/memoirist@0.3.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/memoirist@0.3.1/node_modules/memoirist/dist/index.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/memoirist@0.3.1/node_modules/memoirist/dist/index.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Memoirist: () => (/* binding */ Memoirist),\n/* harmony export */   \"default\": () => (/* binding */ src_default)\n/* harmony export */ });\n// src/index.ts\nvar createNode = (part, inert) => {\n  const inertMap = inert?.length ? {} : null;\n  if (inertMap)\n    for (const child of inert)\n      inertMap[child.part.charCodeAt(0)] = child;\n  return {\n    part,\n    store: null,\n    inert: inertMap,\n    params: null,\n    wildcardStore: null\n  };\n};\nvar cloneNode = (node, part) => ({\n  ...node,\n  part\n});\nvar createParamNode = (name) => ({\n  name,\n  store: null,\n  inert: null\n});\nvar Memoirist = class _Memoirist {\n  constructor(config = {}) {\n    this.config = config;\n    if (config.lazy)\n      this.find = this.lazyFind;\n  }\n  root = {};\n  history = [];\n  deferred = [];\n  static regex = {\n    static: /:.+?(?=\\/|$)/,\n    params: /:.+?(?=\\/|$)/g,\n    optionalParams: /(\\/:\\w+\\?)/g\n  };\n  lazyFind = (method, url) => {\n    if (!this.config.lazy)\n      return this.find;\n    this.build();\n    return this.find(method, url);\n  };\n  build() {\n    if (!this.config.lazy)\n      return;\n    for (const [method, path, store] of this.deferred)\n      this.add(method, path, store, { lazy: false, ignoreHistory: true });\n    this.deferred = [];\n    this.find = (method, url) => {\n      const root = this.root[method];\n      if (!root)\n        return null;\n      return matchRoute(url, url.length, root, 0);\n    };\n  }\n  add(method, path, store, {\n    ignoreError = false,\n    ignoreHistory = false,\n    lazy = this.config.lazy\n  } = {}) {\n    if (lazy) {\n      this.find = this.lazyFind;\n      this.deferred.push([method, path, store]);\n      return store;\n    }\n    if (typeof path !== \"string\")\n      throw new TypeError(\"Route path must be a string\");\n    if (path === \"\")\n      path = \"/\";\n    else if (path[0] !== \"/\")\n      path = `/${path}`;\n    const isWildcard = path[path.length - 1] === \"*\";\n    const optionalParams = path.match(_Memoirist.regex.optionalParams);\n    if (optionalParams) {\n      const originalPath = path.replaceAll(\"?\", \"\");\n      this.add(method, originalPath, store, {\n        ignoreError,\n        ignoreHistory,\n        lazy\n      });\n      for (let i = 0; i < optionalParams.length; i++) {\n        let newPath = path.replace(optionalParams[i], \"\");\n        this.add(method, newPath, store, {\n          ignoreError: true,\n          ignoreHistory,\n          lazy\n        });\n      }\n      return store;\n    }\n    if (optionalParams)\n      path = path.replaceAll(\"?\", \"\");\n    if (this.history.find(([m, p, s]) => m === method && p === path))\n      return store;\n    if (isWildcard || optionalParams && path.charCodeAt(path.length - 1) === 63)\n      path = path.slice(0, -1);\n    if (!ignoreHistory)\n      this.history.push([method, path, store]);\n    const inertParts = path.split(_Memoirist.regex.static);\n    const paramParts = path.match(_Memoirist.regex.params) || [];\n    if (inertParts[inertParts.length - 1] === \"\")\n      inertParts.pop();\n    let node;\n    if (!this.root[method])\n      node = this.root[method] = createNode(\"/\");\n    else\n      node = this.root[method];\n    let paramPartsIndex = 0;\n    for (let i = 0; i < inertParts.length; ++i) {\n      let part = inertParts[i];\n      if (i > 0) {\n        const param = paramParts[paramPartsIndex++].slice(1);\n        if (node.params === null)\n          node.params = createParamNode(param);\n        else if (node.params.name !== param) {\n          if (ignoreError)\n            return store;\n          else\n            throw new Error(\n              `Cannot create route \"${path}\" with parameter \"${param}\" because a route already exists with a different parameter name (\"${node.params.name}\") in the same location`\n            );\n        }\n        const params = node.params;\n        if (params.inert === null) {\n          node = params.inert = createNode(part);\n          continue;\n        }\n        node = params.inert;\n      }\n      for (let j = 0; ; ) {\n        if (j === part.length) {\n          if (j < node.part.length) {\n            const childNode = cloneNode(node, node.part.slice(j));\n            Object.assign(node, createNode(part, [childNode]));\n          }\n          break;\n        }\n        if (j === node.part.length) {\n          if (node.inert === null)\n            node.inert = {};\n          const inert = node.inert[part.charCodeAt(j)];\n          if (inert) {\n            node = inert;\n            part = part.slice(j);\n            j = 0;\n            continue;\n          }\n          const childNode = createNode(part.slice(j));\n          node.inert[part.charCodeAt(j)] = childNode;\n          node = childNode;\n          break;\n        }\n        if (part[j] !== node.part[j]) {\n          const existingChild = cloneNode(node, node.part.slice(j));\n          const newChild = createNode(part.slice(j));\n          Object.assign(\n            node,\n            createNode(node.part.slice(0, j), [\n              existingChild,\n              newChild\n            ])\n          );\n          node = newChild;\n          break;\n        }\n        ++j;\n      }\n    }\n    if (paramPartsIndex < paramParts.length) {\n      const param = paramParts[paramPartsIndex];\n      const name = param.slice(1);\n      if (node.params === null)\n        node.params = createParamNode(name);\n      else if (node.params.name !== name) {\n        if (ignoreError)\n          return store;\n        else\n          throw new Error(\n            `Cannot create route \"${path}\" with parameter \"${name}\" because a route already exists with a different parameter name (\"${node.params.name}\") in the same location`\n          );\n      }\n      if (node.params.store === null)\n        node.params.store = store;\n      return node.params.store;\n    }\n    if (isWildcard) {\n      if (node.wildcardStore === null)\n        node.wildcardStore = store;\n      return node.wildcardStore;\n    }\n    if (node.store === null)\n      node.store = store;\n    return node.store;\n  }\n  find(method, url) {\n    const root = this.root[method];\n    if (!root)\n      return null;\n    return matchRoute(url, url.length, root, 0);\n  }\n};\nvar matchRoute = (url, urlLength, node, startIndex) => {\n  const part = node.part;\n  const length = part.length;\n  const endIndex = startIndex + length;\n  if (length > 1) {\n    if (endIndex > urlLength)\n      return null;\n    if (length < 15) {\n      for (let i = 1, j = startIndex + 1; i < length; ++i, ++j)\n        if (part.charCodeAt(i) !== url.charCodeAt(j))\n          return null;\n    } else if (url.slice(startIndex, endIndex) !== part)\n      return null;\n  }\n  if (endIndex === urlLength) {\n    if (node.store !== null)\n      return {\n        store: node.store,\n        params: {}\n      };\n    if (node.wildcardStore !== null)\n      return {\n        store: node.wildcardStore,\n        params: { \"*\": \"\" }\n      };\n    return null;\n  }\n  if (node.inert !== null) {\n    const inert = node.inert[url.charCodeAt(endIndex)];\n    if (inert !== void 0) {\n      const route = matchRoute(url, urlLength, inert, endIndex);\n      if (route !== null)\n        return route;\n    }\n  }\n  if (node.params !== null) {\n    const { store, name, inert } = node.params;\n    const slashIndex = url.indexOf(\"/\", endIndex);\n    if (slashIndex !== endIndex) {\n      if (slashIndex === -1 || slashIndex >= urlLength) {\n        if (store !== null) {\n          const params = {};\n          params[name] = url.substring(endIndex, urlLength);\n          return {\n            store,\n            params\n          };\n        }\n      } else if (inert !== null) {\n        const route = matchRoute(url, urlLength, inert, slashIndex);\n        if (route !== null) {\n          route.params[name] = url.substring(endIndex, slashIndex);\n          return route;\n        }\n      }\n    }\n  }\n  if (node.wildcardStore !== null)\n    return {\n      store: node.wildcardStore,\n      params: {\n        \"*\": url.substring(endIndex, urlLength)\n      }\n    };\n  return null;\n};\nvar src_default = Memoirist;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/memoirist@0.3.1/node_modules/memoirist/dist/index.mjs\n");

/***/ })

};
;