"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3";
exports.ids = ["vendor-chunks/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/bun/handler.mjs":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/bun/handler.mjs ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNativeStaticHandler: () => (/* binding */ createNativeStaticHandler),\n/* harmony export */   createStaticHandler: () => (/* reexport safe */ _web_standard_handler_mjs__WEBPACK_IMPORTED_MODULE_0__.createStaticHandler),\n/* harmony export */   mapCompactResponse: () => (/* reexport safe */ _web_standard_handler_mjs__WEBPACK_IMPORTED_MODULE_0__.mapCompactResponse),\n/* harmony export */   mapEarlyResponse: () => (/* reexport safe */ _web_standard_handler_mjs__WEBPACK_IMPORTED_MODULE_0__.mapEarlyResponse),\n/* harmony export */   mapResponse: () => (/* reexport safe */ _web_standard_handler_mjs__WEBPACK_IMPORTED_MODULE_0__.mapResponse)\n/* harmony export */ });\n/* harmony import */ var _web_standard_handler_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../web-standard/handler.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/web-standard/handler.mjs\");\n\nconst createNativeStaticHandler = (handle, hooks, setHeaders = {}) => {\n  if (typeof handle === \"function\" || handle instanceof Blob) return;\n  if (typeof handle === \"object\" && handle?.toString() === \"[object HTMLBundle]\")\n    return () => handle;\n  const response = (0,_web_standard_handler_mjs__WEBPACK_IMPORTED_MODULE_0__.mapResponse)(handle, {\n    headers: setHeaders\n  });\n  if (!hooks.parse?.length && !hooks.transform?.length && !hooks.beforeHandle?.length && !hooks.afterHandle?.length) {\n    if (!response.headers.has(\"content-type\"))\n      response.headers.append(\"content-type\", \"text/plain;charset=utf-8\");\n    return response.clone.bind(response);\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vZWx5c2lhQDEuMi4yNV9Ac2luY2xhaXIrdHlwZWJveEAwLjM0LjMzX3R5cGVzY3JpcHRANS44LjMvbm9kZV9tb2R1bGVzL2VseXNpYS9kaXN0L2FkYXB0ZXIvYnVuL2hhbmRsZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUttQztBQUNuQyxpRUFBaUU7QUFDakU7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNFQUFXO0FBQzlCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSwwREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBT0UiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbG9saGFcXERlc2t0b3BcXERFVlxcY29kaW5nLmdsb2JhbC13ZWJcXG5vZGVfbW9kdWxlc1xcLnBucG1cXGVseXNpYUAxLjIuMjVfQHNpbmNsYWlyK3R5cGVib3hAMC4zNC4zM190eXBlc2NyaXB0QDUuOC4zXFxub2RlX21vZHVsZXNcXGVseXNpYVxcZGlzdFxcYWRhcHRlclxcYnVuXFxoYW5kbGVyLm1qc3xyc2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e1xuICBtYXBSZXNwb25zZSxcbiAgbWFwRWFybHlSZXNwb25zZSxcbiAgbWFwQ29tcGFjdFJlc3BvbnNlLFxuICBjcmVhdGVTdGF0aWNIYW5kbGVyXG59ZnJvbVwiLi4vd2ViLXN0YW5kYXJkL2hhbmRsZXIubWpzXCI7XG5jb25zdCBjcmVhdGVOYXRpdmVTdGF0aWNIYW5kbGVyID0gKGhhbmRsZSwgaG9va3MsIHNldEhlYWRlcnMgPSB7fSkgPT4ge1xuICBpZiAodHlwZW9mIGhhbmRsZSA9PT0gXCJmdW5jdGlvblwiIHx8IGhhbmRsZSBpbnN0YW5jZW9mIEJsb2IpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBoYW5kbGUgPT09IFwib2JqZWN0XCIgJiYgaGFuZGxlPy50b1N0cmluZygpID09PSBcIltvYmplY3QgSFRNTEJ1bmRsZV1cIilcbiAgICByZXR1cm4gKCkgPT4gaGFuZGxlO1xuICBjb25zdCByZXNwb25zZSA9IG1hcFJlc3BvbnNlKGhhbmRsZSwge1xuICAgIGhlYWRlcnM6IHNldEhlYWRlcnNcbiAgfSk7XG4gIGlmICghaG9va3MucGFyc2U/Lmxlbmd0aCAmJiAhaG9va3MudHJhbnNmb3JtPy5sZW5ndGggJiYgIWhvb2tzLmJlZm9yZUhhbmRsZT8ubGVuZ3RoICYmICFob29rcy5hZnRlckhhbmRsZT8ubGVuZ3RoKSB7XG4gICAgaWYgKCFyZXNwb25zZS5oZWFkZXJzLmhhcyhcImNvbnRlbnQtdHlwZVwiKSlcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMuYXBwZW5kKFwiY29udGVudC10eXBlXCIsIFwidGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04XCIpO1xuICAgIHJldHVybiByZXNwb25zZS5jbG9uZS5iaW5kKHJlc3BvbnNlKTtcbiAgfVxufTtcbmV4cG9ydCB7XG4gIGNyZWF0ZU5hdGl2ZVN0YXRpY0hhbmRsZXIsXG4gIGNyZWF0ZVN0YXRpY0hhbmRsZXIsXG4gIG1hcENvbXBhY3RSZXNwb25zZSxcbiAgbWFwRWFybHlSZXNwb25zZSxcbiAgbWFwUmVzcG9uc2Vcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/bun/handler.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/bun/index.mjs":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/bun/index.mjs ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BunAdapter: () => (/* binding */ BunAdapter)\n/* harmony export */ });\n/* harmony import */ var _web_standard_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../web-standard/index.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/web-standard/index.mjs\");\n/* harmony import */ var _web_standard_handler_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../web-standard/handler.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/web-standard/handler.mjs\");\n/* harmony import */ var _handler_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./handler.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/bun/handler.mjs\");\n/* harmony import */ var _cookies_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../cookies.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/cookies.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/error.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/utils.mjs\");\n/* harmony import */ var _ws_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../ws/index.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/ws/index.mjs\");\n\n\n\n\n\n\n\nconst BunAdapter = {\n  ..._web_standard_index_mjs__WEBPACK_IMPORTED_MODULE_0__.WebStandardAdapter,\n  name: \"bun\",\n  handler: {\n    ..._web_standard_index_mjs__WEBPACK_IMPORTED_MODULE_0__.WebStandardAdapter.handler,\n    createNativeStaticHandler: _handler_mjs__WEBPACK_IMPORTED_MODULE_2__.createNativeStaticHandler\n  },\n  composeHandler: {\n    ..._web_standard_index_mjs__WEBPACK_IMPORTED_MODULE_0__.WebStandardAdapter.composeHandler,\n    headers: _utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hasHeaderShorthand ? \"c.headers = c.request.headers.toJSON()\\n\" : \"c.headers = {}\\nfor (const [key, value] of c.request.headers.entries())c.headers[key] = value\\n\"\n  },\n  listen(app) {\n    return (options, callback) => {\n      if (typeof Bun === \"undefined\")\n        throw new Error(\n          \".listen() is designed to run on Bun only. If you are running Elysia in other environment please use a dedicated plugin or export the handler via Elysia.fetch\"\n        );\n      app.compile();\n      if (typeof options === \"string\") {\n        if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.isNumericString)(options))\n          throw new Error(\"Port must be a numeric value\");\n        options = parseInt(options);\n      }\n      const fetch = app.fetch;\n      const serve = typeof options === \"object\" ? {\n        development: !_error_mjs__WEBPACK_IMPORTED_MODULE_4__.isProduction,\n        reusePort: true,\n        ...app.config.serve || {},\n        ...options || {},\n        // @ts-ignore\n        static: {\n          ...app.router.static.http.static,\n          ...app.config.serve?.static\n        },\n        websocket: {\n          ...app.config.websocket || {},\n          ..._ws_index_mjs__WEBPACK_IMPORTED_MODULE_6__.websocket || {}\n        },\n        fetch,\n        // @ts-expect-error private property\n        error: app.outerErrorHandler\n      } : {\n        development: !_error_mjs__WEBPACK_IMPORTED_MODULE_4__.isProduction,\n        reusePort: true,\n        ...app.config.serve || {},\n        // @ts-ignore\n        static: app.router.static.http.static,\n        websocket: {\n          ...app.config.websocket || {},\n          ..._ws_index_mjs__WEBPACK_IMPORTED_MODULE_6__.websocket || {}\n        },\n        port: options,\n        fetch,\n        // @ts-expect-error private property\n        error: app.outerErrorHandler\n      };\n      app.server = Bun?.serve(serve);\n      if (app.event.start)\n        for (let i = 0; i < app.event.start.length; i++)\n          app.event.start[i].fn(app);\n      if (callback) callback(app.server);\n      process.on(\"beforeExit\", () => {\n        if (app.server) {\n          app.server.stop?.();\n          app.server = null;\n          if (app.event.stop)\n            for (let i = 0; i < app.event.stop.length; i++)\n              app.event.stop[i].fn(app);\n        }\n      });\n      app.promisedModules.then(() => {\n        Bun?.gc(false);\n      });\n    };\n  },\n  ws(app, path, options) {\n    const { parse, body, response, ...rest } = options;\n    const validateMessage = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.getSchemaValidator)(body, {\n      // @ts-expect-error private property\n      modules: app.definitions.typebox,\n      // @ts-expect-error private property\n      models: app.definitions.type,\n      normalize: app.config.normalize\n    });\n    const validateResponse = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.getSchemaValidator)(response, {\n      // @ts-expect-error private property\n      modules: app.definitions.typebox,\n      // @ts-expect-error private property\n      models: app.definitions.type,\n      normalize: app.config.normalize\n    });\n    app.route(\n      \"$INTERNALWS\",\n      path,\n      async (context) => {\n        const server = app.getServer();\n        const { set, path: path2, qi, headers, query, params } = context;\n        context.validator = validateResponse;\n        if (options.upgrade) {\n          if (typeof options.upgrade === \"function\") {\n            const temp = options.upgrade(context);\n            if (temp instanceof Promise) await temp;\n          } else if (options.upgrade)\n            Object.assign(\n              set.headers,\n              options.upgrade\n            );\n        }\n        if (set.cookie && (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.isNotEmpty)(set.cookie)) {\n          const cookie = (0,_cookies_mjs__WEBPACK_IMPORTED_MODULE_3__.serializeCookie)(set.cookie);\n          if (cookie) set.headers[\"set-cookie\"] = cookie;\n        }\n        if (set.headers[\"set-cookie\"] && Array.isArray(set.headers[\"set-cookie\"]))\n          set.headers = (0,_web_standard_handler_mjs__WEBPACK_IMPORTED_MODULE_1__.parseSetCookies)(\n            new Headers(set.headers),\n            set.headers[\"set-cookie\"]\n          );\n        const handleResponse = (0,_ws_index_mjs__WEBPACK_IMPORTED_MODULE_6__.createHandleWSResponse)(validateResponse);\n        const parseMessage = (0,_ws_index_mjs__WEBPACK_IMPORTED_MODULE_6__.createWSMessageParser)(parse);\n        let _id;\n        const errorHandlers = [\n          ...Array.isArray(options.error) ? options.error : [options.error],\n          ...(app.event.error ?? []).map(\n            (x) => typeof x === \"function\" ? x : x.fn\n          )\n        ];\n        const handleErrors = !errorHandlers.length ? () => {\n        } : async (ws, error) => {\n          for (const handleError of errorHandlers) {\n            let response2 = handleError(\n              Object.assign(context, { error })\n            );\n            if (response2 instanceof Promise)\n              response2 = await response2;\n            await handleResponse(ws, response2);\n            if (response2) break;\n          }\n        };\n        if (server?.upgrade(context.request, {\n          headers: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.isNotEmpty)(set.headers) ? set.headers : void 0,\n          data: {\n            ...context,\n            get id() {\n              if (_id) return _id;\n              return _id = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.randomId)();\n            },\n            validator: validateResponse,\n            ping(data) {\n              options.ping?.(data);\n            },\n            pong(data) {\n              options.pong?.(data);\n            },\n            open(ws) {\n              try {\n                handleResponse(\n                  ws,\n                  options.open?.(\n                    new _ws_index_mjs__WEBPACK_IMPORTED_MODULE_6__.ElysiaWS(ws, context)\n                  )\n                );\n              } catch (error) {\n                handleErrors(ws, error);\n              }\n            },\n            message: async (ws, _message) => {\n              const message = await parseMessage(ws, _message);\n              if (validateMessage?.Check(message) === false)\n                return void ws.send(\n                  new _error_mjs__WEBPACK_IMPORTED_MODULE_4__.ValidationError(\n                    \"message\",\n                    validateMessage,\n                    message\n                  ).message\n                );\n              try {\n                handleResponse(\n                  ws,\n                  options.message?.(\n                    new _ws_index_mjs__WEBPACK_IMPORTED_MODULE_6__.ElysiaWS(\n                      ws,\n                      context,\n                      message\n                    ),\n                    message\n                  )\n                );\n              } catch (error) {\n                handleErrors(ws, error);\n              }\n            },\n            drain(ws) {\n              try {\n                handleResponse(\n                  ws,\n                  options.drain?.(\n                    new _ws_index_mjs__WEBPACK_IMPORTED_MODULE_6__.ElysiaWS(ws, context)\n                  )\n                );\n              } catch (error) {\n                handleErrors(ws, error);\n              }\n            },\n            close(ws, code, reason) {\n              try {\n                handleResponse(\n                  ws,\n                  options.close?.(\n                    new _ws_index_mjs__WEBPACK_IMPORTED_MODULE_6__.ElysiaWS(ws, context),\n                    code,\n                    reason\n                  )\n                );\n              } catch (error) {\n                handleErrors(ws, error);\n              }\n            }\n          }\n        }))\n          return;\n        set.status = 400;\n        return \"Expected a websocket connection\";\n      },\n      {\n        ...rest,\n        websocket: options\n      }\n    );\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/bun/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/web-standard/handler.mjs":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/web-standard/handler.mjs ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStaticHandler: () => (/* binding */ createStaticHandler),\n/* harmony export */   errorToResponse: () => (/* binding */ errorToResponse),\n/* harmony export */   handleSet: () => (/* binding */ handleSet),\n/* harmony export */   mapCompactResponse: () => (/* binding */ mapCompactResponse),\n/* harmony export */   mapEarlyResponse: () => (/* binding */ mapEarlyResponse),\n/* harmony export */   mapResponse: () => (/* binding */ mapResponse),\n/* harmony export */   mergeResponseWithSetHeaders: () => (/* binding */ mergeResponseWithSetHeaders),\n/* harmony export */   parseSetCookies: () => (/* binding */ parseSetCookies),\n/* harmony export */   streamResponse: () => (/* binding */ streamResponse)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/utils.mjs\");\n/* harmony import */ var _cookies_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../cookies.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/cookies.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/error.mjs\");\n\n\n\nconst handleFile = (response, set2) => {\n  const size = response.size;\n  if (!set2 && size || size && set2 && set2.status !== 206 && set2.status !== 304 && set2.status !== 412 && set2.status !== 416) {\n    if (set2) {\n      if (set2.headers instanceof Headers) {\n        let setHeaders = {\n          \"accept-ranges\": \"bytes\",\n          \"content-range\": `bytes 0-${size - 1}/${size}`,\n          \"transfer-encoding\": \"chunked\"\n        };\n        if (_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.hasHeaderShorthand)\n          setHeaders = set2.headers.toJSON();\n        else {\n          setHeaders = {};\n          for (const [key, value] of set2.headers.entries())\n            if (key in set2.headers) setHeaders[key] = value;\n        }\n        return new Response(response, {\n          status: set2.status,\n          headers: setHeaders\n        });\n      }\n      if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isNotEmpty)(set2.headers))\n        return new Response(response, {\n          status: set2.status,\n          headers: Object.assign(\n            {\n              \"accept-ranges\": \"bytes\",\n              \"content-range\": `bytes 0-${size - 1}/${size}`,\n              \"transfer-encoding\": \"chunked\"\n            },\n            set2.headers\n          )\n        });\n    }\n    return new Response(response, {\n      headers: {\n        \"accept-ranges\": \"bytes\",\n        \"content-range\": `bytes 0-${size - 1}/${size}`,\n        \"transfer-encoding\": \"chunked\"\n      }\n    });\n  }\n  return new Response(response);\n};\nconst parseSetCookies = (headers, setCookie) => {\n  if (!headers) return headers;\n  headers.delete(\"set-cookie\");\n  for (let i = 0; i < setCookie.length; i++) {\n    const index = setCookie[i].indexOf(\"=\");\n    headers.append(\n      \"set-cookie\",\n      `${setCookie[i].slice(0, index)}=${setCookie[i].slice(index + 1) || \"\"}`\n    );\n  }\n  return headers;\n};\nconst responseToSetHeaders = (response, set2) => {\n  if (set2?.headers) {\n    if (response) {\n      if (_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.hasHeaderShorthand)\n        Object.assign(set2.headers, response.headers.toJSON());\n      else\n        for (const [key, value] of response.headers.entries())\n          if (key in set2.headers) set2.headers[key] = value;\n    }\n    if (set2.status === 200) set2.status = response.status;\n    if (set2.headers[\"content-encoding\"])\n      delete set2.headers[\"content-encoding\"];\n    return set2;\n  }\n  if (!response)\n    return {\n      headers: {},\n      status: set2?.status ?? 200\n    };\n  if (_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.hasHeaderShorthand) {\n    set2 = {\n      // @ts-expect-error\n      headers: response.headers.toJSON(),\n      status: set2?.status ?? 200\n    };\n    if (set2.headers[\"content-encoding\"])\n      delete set2.headers[\"content-encoding\"];\n    return set2;\n  }\n  set2 = {\n    headers: {},\n    status: set2?.status ?? 200\n  };\n  for (const [key, value] of response.headers.entries()) {\n    if (key === \"content-encoding\") continue;\n    if (key in set2.headers) set2.headers[key] = value;\n  }\n  return set2;\n};\nconst handleStream = async (generator, set2, request) => {\n  let init = generator.next();\n  if (init instanceof Promise) init = await init;\n  if (init.done) {\n    if (set2) return mapResponse(init.value, set2, request);\n    return mapCompactResponse(init.value, request);\n  }\n  if (set2?.headers) {\n    if (!set2.headers[\"transfer-encoding\"])\n      set2.headers[\"transfer-encoding\"] = \"chunked\";\n    if (!set2.headers[\"content-type\"])\n      set2.headers[\"content-type\"] = \"text/event-stream; charset=utf-8\";\n  } else {\n    set2 = {\n      status: 200,\n      headers: {\n        \"content-type\": \"text/event-stream; charset=utf-8\",\n        \"transfer-encoding\": \"chunked\"\n      }\n    };\n  }\n  return new Response(\n    new ReadableStream({\n      async start(controller) {\n        let end = false;\n        request?.signal?.addEventListener(\"abort\", () => {\n          end = true;\n          try {\n            controller.close();\n          } catch {\n          }\n        });\n        if (init.value !== void 0 && init.value !== null) {\n          if (typeof init.value === \"object\")\n            try {\n              controller.enqueue(\n                // @ts-expect-error this is a valid operation\n                Buffer.from(JSON.stringify(init.value))\n              );\n            } catch {\n              controller.enqueue(\n                // @ts-expect-error this is a valid operation\n                Buffer.from(init.value.toString())\n              );\n            }\n          else\n            controller.enqueue(\n              // @ts-expect-error this is a valid operation\n              Buffer.from(init.value.toString())\n            );\n        }\n        for await (const chunk of generator) {\n          if (end) break;\n          if (chunk === void 0 || chunk === null) continue;\n          if (typeof chunk === \"object\")\n            try {\n              controller.enqueue(\n                // @ts-expect-error this is a valid operation\n                Buffer.from(JSON.stringify(chunk))\n              );\n            } catch {\n              controller.enqueue(\n                // @ts-expect-error this is a valid operation\n                Buffer.from(chunk.toString())\n              );\n            }\n          else\n            controller.enqueue(\n              // @ts-expect-error this is a valid operation\n              Buffer.from(chunk.toString())\n            );\n          await new Promise(\n            (resolve) => setTimeout(() => resolve(), 0)\n          );\n        }\n        try {\n          controller.close();\n        } catch {\n        }\n      }\n    }),\n    set2\n  );\n};\nasync function* streamResponse(response) {\n  const body = response.body;\n  if (!body) return;\n  const reader = body.getReader();\n  const decoder = new TextDecoder();\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) break;\n      yield decoder.decode(value);\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\nconst handleSet = (set2) => {\n  if (typeof set2.status === \"string\") set2.status = _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.StatusMap[set2.status];\n  if (set2.cookie && (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isNotEmpty)(set2.cookie)) {\n    const cookie = (0,_cookies_mjs__WEBPACK_IMPORTED_MODULE_1__.serializeCookie)(set2.cookie);\n    if (cookie) set2.headers[\"set-cookie\"] = cookie;\n  }\n  if (set2.headers[\"set-cookie\"] && Array.isArray(set2.headers[\"set-cookie\"])) {\n    set2.headers = parseSetCookies(\n      new Headers(set2.headers),\n      set2.headers[\"set-cookie\"]\n    );\n  }\n};\nconst mergeResponseWithSetHeaders = (response, set2) => {\n  if (response.status !== set2.status && set2.status !== 200 && (response.status <= 300 || response.status > 400))\n    response = new Response(response.body, {\n      headers: response.headers,\n      status: set2.status\n    });\n  let isCookieSet = false;\n  if (set2.headers instanceof Headers)\n    for (const key of set2.headers.keys()) {\n      if (key === \"set-cookie\") {\n        if (isCookieSet) continue;\n        isCookieSet = true;\n        for (const cookie of set2.headers.getSetCookie())\n          response.headers.append(\"set-cookie\", cookie);\n      } else response.headers.append(key, set2.headers?.get(key) ?? \"\");\n    }\n  else\n    for (const key in set2.headers)\n      response.headers.append(key, set2.headers[key]);\n  return response;\n};\nconst mapResponse = (response, set2, request) => {\n  if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isNotEmpty)(set2.headers) || set2.status !== 200 || set2.cookie) {\n    handleSet(set2);\n    switch (response?.constructor?.name) {\n      case \"String\":\n        return new Response(response, set2);\n      case \"Array\":\n      case \"Object\":\n        return Response.json(response, set2);\n      case \"ElysiaFile\":\n        return handleFile(response.value);\n      case \"Blob\":\n        return handleFile(response, set2);\n      case \"ElysiaCustomStatusResponse\":\n        set2.status = response.code;\n        return mapResponse(\n          response.response,\n          set2,\n          request\n        );\n      case \"ReadableStream\":\n        if (!set2.headers[\"content-type\"]?.startsWith(\n          \"text/event-stream\"\n        ))\n          set2.headers[\"content-type\"] = \"text/event-stream; charset=utf-8\";\n        request?.signal?.addEventListener(\n          \"abort\",\n          {\n            handleEvent() {\n              if (request?.signal && !request?.signal?.aborted)\n                response.cancel();\n            }\n          },\n          {\n            once: true\n          }\n        );\n        return new Response(response, set2);\n      case void 0:\n        if (!response) return new Response(\"\", set2);\n        return Response.json(response, set2);\n      case \"Response\":\n        response = mergeResponseWithSetHeaders(\n          response,\n          set2\n        );\n        if (!response.headers.has(\"content-length\") && response.headers.get(\"transfer-encoding\") === \"chunked\")\n          return handleStream(\n            streamResponse(response),\n            responseToSetHeaders(response, set2),\n            request\n          );\n        return response;\n      case \"Error\":\n        return errorToResponse(response, set2);\n      case \"Promise\":\n        return response.then(\n          (x) => mapResponse(x, set2, request)\n        );\n      case \"Function\":\n        return mapResponse(response(), set2, request);\n      case \"Number\":\n      case \"Boolean\":\n        return new Response(\n          response.toString(),\n          set2\n        );\n      case \"Cookie\":\n        if (response instanceof _cookies_mjs__WEBPACK_IMPORTED_MODULE_1__.Cookie)\n          return new Response(response.value, set2);\n        return new Response(response?.toString(), set2);\n      case \"FormData\":\n        return new Response(response, set2);\n      default:\n        if (response instanceof Response) {\n          response = mergeResponseWithSetHeaders(\n            response,\n            set2\n          );\n          if (response.headers.get(\n            \"transfer-encoding\"\n          ) === \"chunked\")\n            return handleStream(\n              streamResponse(response),\n              responseToSetHeaders(response, set2),\n              request\n            );\n          return response;\n        }\n        if (response instanceof Promise)\n          return response.then((x) => mapResponse(x, set2));\n        if (response instanceof Error)\n          return errorToResponse(response, set2);\n        if (response instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_2__.ElysiaCustomStatusResponse) {\n          set2.status = response.code;\n          return mapResponse(\n            response.response,\n            set2,\n            request\n          );\n        }\n        if (typeof response?.next === \"function\")\n          return handleStream(response, set2, request);\n        if (typeof response?.then === \"function\")\n          return response.then((x) => mapResponse(x, set2));\n        if (typeof response?.toResponse === \"function\")\n          return mapResponse(response.toResponse(), set2);\n        if (\"charCodeAt\" in response) {\n          const code = response.charCodeAt(0);\n          if (code === 123 || code === 91) {\n            if (!set2.headers[\"Content-Type\"])\n              set2.headers[\"Content-Type\"] = \"application/json\";\n            return new Response(\n              JSON.stringify(response),\n              set2\n            );\n          }\n        }\n        return new Response(response, set2);\n    }\n  }\n  if (response instanceof Response && !response.headers.has(\"content-length\") && response.headers.get(\"transfer-encoding\") === \"chunked\")\n    return handleStream(\n      streamResponse(response),\n      responseToSetHeaders(response, set2),\n      request\n    );\n  if (\n    // @ts-expect-error\n    typeof response?.next === \"function\" || response instanceof ReadableStream\n  )\n    return handleStream(response, set2, request);\n  return mapCompactResponse(response, request);\n};\nconst mapEarlyResponse = (response, set2, request) => {\n  if (response === void 0 || response === null) return;\n  if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isNotEmpty)(set2.headers) || set2.status !== 200 || set2.cookie) {\n    handleSet(set2);\n    switch (response?.constructor?.name) {\n      case \"String\":\n        return new Response(response, set2);\n      case \"Array\":\n      case \"Object\":\n        return Response.json(response, set2);\n      case \"ElysiaFile\":\n        return handleFile(response.value);\n      case \"Blob\":\n        return handleFile(response, set2);\n      case \"ElysiaCustomStatusResponse\":\n        set2.status = response.code;\n        return mapEarlyResponse(\n          response.response,\n          set2,\n          request\n        );\n      case \"ReadableStream\":\n        if (!set2.headers[\"content-type\"]?.startsWith(\n          \"text/event-stream\"\n        ))\n          set2.headers[\"content-type\"] = \"text/event-stream; charset=utf-8\";\n        request?.signal?.addEventListener(\n          \"abort\",\n          {\n            handleEvent() {\n              if (request?.signal && !request?.signal?.aborted)\n                response.cancel();\n            }\n          },\n          {\n            once: true\n          }\n        );\n        return new Response(response, set2);\n      case void 0:\n        if (!response) return;\n        return Response.json(response, set2);\n      case \"Response\":\n        response = mergeResponseWithSetHeaders(\n          response,\n          set2\n        );\n        if (!response.headers.has(\"content-length\") && response.headers.get(\"transfer-encoding\") === \"chunked\")\n          return handleStream(\n            streamResponse(response),\n            responseToSetHeaders(response, set2),\n            request\n          );\n        return response;\n      case \"Promise\":\n        return response.then(\n          (x) => mapEarlyResponse(x, set2)\n        );\n      case \"Error\":\n        return errorToResponse(response, set2);\n      case \"Function\":\n        return mapEarlyResponse(response(), set2);\n      case \"Number\":\n      case \"Boolean\":\n        return new Response(\n          response.toString(),\n          set2\n        );\n      case \"FormData\":\n        return new Response(response);\n      case \"Cookie\":\n        if (response instanceof _cookies_mjs__WEBPACK_IMPORTED_MODULE_1__.Cookie)\n          return new Response(response.value, set2);\n        return new Response(response?.toString(), set2);\n      default:\n        if (response instanceof Response) {\n          response = mergeResponseWithSetHeaders(\n            response,\n            set2\n          );\n          if (response.headers.get(\n            \"transfer-encoding\"\n          ) === \"chunked\")\n            return handleStream(\n              streamResponse(response),\n              responseToSetHeaders(response, set2),\n              request\n            );\n          return response;\n        }\n        if (response instanceof Promise)\n          return response.then((x) => mapEarlyResponse(x, set2));\n        if (response instanceof Error)\n          return errorToResponse(response, set2);\n        if (response instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_2__.ElysiaCustomStatusResponse) {\n          set2.status = response.code;\n          return mapEarlyResponse(\n            response.response,\n            set2,\n            request\n          );\n        }\n        if (typeof response?.next === \"function\")\n          return handleStream(response, set2, request);\n        if (typeof response?.then === \"function\")\n          return response.then((x) => mapEarlyResponse(x, set2));\n        if (typeof response?.toResponse === \"function\")\n          return mapEarlyResponse(response.toResponse(), set2);\n        if (\"charCodeAt\" in response) {\n          const code = response.charCodeAt(0);\n          if (code === 123 || code === 91) {\n            if (!set2.headers[\"Content-Type\"])\n              set2.headers[\"Content-Type\"] = \"application/json\";\n            return new Response(\n              JSON.stringify(response),\n              set2\n            );\n          }\n        }\n        return new Response(response, set2);\n    }\n  } else\n    switch (response?.constructor?.name) {\n      case \"String\":\n        return new Response(response);\n      case \"Array\":\n      case \"Object\":\n        return Response.json(response, set2);\n      case \"ElysiaFile\":\n        return handleFile(response.value);\n      case \"Blob\":\n        return handleFile(response, set2);\n      case \"ElysiaCustomStatusResponse\":\n        set2.status = response.code;\n        return mapEarlyResponse(\n          response.response,\n          set2,\n          request\n        );\n      case \"ReadableStream\":\n        request?.signal?.addEventListener(\n          \"abort\",\n          {\n            handleEvent() {\n              if (request?.signal && !request?.signal?.aborted)\n                response.cancel();\n            }\n          },\n          {\n            once: true\n          }\n        );\n        return new Response(response, {\n          headers: {\n            \"Content-Type\": \"text/event-stream; charset=utf-8\"\n          }\n        });\n      case void 0:\n        if (!response) return new Response(\"\");\n        return new Response(JSON.stringify(response), {\n          headers: {\n            \"content-type\": \"application/json\"\n          }\n        });\n      case \"Response\":\n        if (!response.headers.has(\"content-length\") && response.headers.get(\"transfer-encoding\") === \"chunked\")\n          return handleStream(\n            streamResponse(response),\n            responseToSetHeaders(response),\n            request\n          );\n        return response;\n      case \"Promise\":\n        return response.then((x) => {\n          const r = mapEarlyResponse(x, set2);\n          if (r !== void 0) return r;\n        });\n      case \"Error\":\n        return errorToResponse(response, set2);\n      case \"Function\":\n        return mapCompactResponse(response(), request);\n      case \"Number\":\n      case \"Boolean\":\n        return new Response(response.toString());\n      case \"Cookie\":\n        if (response instanceof _cookies_mjs__WEBPACK_IMPORTED_MODULE_1__.Cookie)\n          return new Response(response.value, set2);\n        return new Response(response?.toString(), set2);\n      case \"FormData\":\n        return new Response(response);\n      default:\n        if (response instanceof Response) return response;\n        if (response instanceof Promise)\n          return response.then((x) => mapEarlyResponse(x, set2));\n        if (response instanceof Error)\n          return errorToResponse(response, set2);\n        if (response instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_2__.ElysiaCustomStatusResponse) {\n          set2.status = response.code;\n          return mapEarlyResponse(\n            response.response,\n            set2,\n            request\n          );\n        }\n        if (typeof response?.next === \"function\")\n          return handleStream(response, set2, request);\n        if (typeof response?.then === \"function\")\n          return response.then((x) => mapEarlyResponse(x, set2));\n        if (typeof response?.toResponse === \"function\")\n          return mapEarlyResponse(response.toResponse(), set2);\n        if (\"charCodeAt\" in response) {\n          const code = response.charCodeAt(0);\n          if (code === 123 || code === 91) {\n            if (!set2.headers[\"Content-Type\"])\n              set2.headers[\"Content-Type\"] = \"application/json\";\n            return new Response(\n              JSON.stringify(response),\n              set2\n            );\n          }\n        }\n        return new Response(response);\n    }\n};\nconst mapCompactResponse = (response, request) => {\n  switch (response?.constructor?.name) {\n    case \"String\":\n      return new Response(response);\n    case \"Object\":\n    case \"Array\":\n      return Response.json(response);\n    case \"ElysiaFile\":\n      return handleFile(response.value);\n    case \"Blob\":\n      return handleFile(response);\n    case \"ElysiaCustomStatusResponse\":\n      return mapResponse(\n        response.response,\n        {\n          status: response.code,\n          headers: {}\n        }\n      );\n    case \"ReadableStream\":\n      request?.signal?.addEventListener(\n        \"abort\",\n        {\n          handleEvent() {\n            if (request?.signal && !request?.signal?.aborted)\n              response.cancel();\n          }\n        },\n        {\n          once: true\n        }\n      );\n      return new Response(response, {\n        headers: {\n          \"Content-Type\": \"text/event-stream; charset=utf-8\"\n        }\n      });\n    case void 0:\n      if (!response) return new Response(\"\");\n      return new Response(JSON.stringify(response), {\n        headers: {\n          \"content-type\": \"application/json\"\n        }\n      });\n    case \"Response\":\n      if (response.headers.get(\"transfer-encoding\") === \"chunked\")\n        return handleStream(\n          streamResponse(response),\n          responseToSetHeaders(response),\n          request\n        );\n      return response;\n    case \"Error\":\n      return errorToResponse(response);\n    case \"Promise\":\n      return response.then(\n        (x) => mapCompactResponse(x, request)\n      );\n    // ? Maybe response or Blob\n    case \"Function\":\n      return mapCompactResponse(response(), request);\n    case \"Number\":\n    case \"Boolean\":\n      return new Response(response.toString());\n    case \"FormData\":\n      return new Response(response);\n    default:\n      if (response instanceof Response) return response;\n      if (response instanceof Promise)\n        return response.then(\n          (x) => mapCompactResponse(x, request)\n        );\n      if (response instanceof Error)\n        return errorToResponse(response);\n      if (response instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_2__.ElysiaCustomStatusResponse)\n        return mapResponse(\n          response.response,\n          {\n            status: response.code,\n            headers: {}\n          }\n        );\n      if (typeof response?.next === \"function\")\n        return handleStream(response, void 0, request);\n      if (typeof response?.then === \"function\")\n        return response.then((x) => mapResponse(x, set));\n      if (typeof response?.toResponse === \"function\")\n        return mapCompactResponse(response.toResponse());\n      if (\"charCodeAt\" in response) {\n        const code = response.charCodeAt(0);\n        if (code === 123 || code === 91) {\n          return new Response(JSON.stringify(response), {\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n        }\n      }\n      return new Response(response);\n  }\n};\nconst errorToResponse = (error, set2) => new Response(\n  JSON.stringify({\n    name: error?.name,\n    message: error?.message,\n    cause: error?.cause\n  }),\n  {\n    status: set2?.status !== 200 ? set2?.status ?? 500 : 500,\n    headers: set2?.headers\n  }\n);\nconst createStaticHandler = (handle, hooks, setHeaders = {}) => {\n  if (typeof handle === \"function\") return;\n  const response = mapResponse(handle, {\n    headers: setHeaders\n  });\n  if (!hooks.parse?.length && !hooks.transform?.length && !hooks.beforeHandle?.length && !hooks.afterHandle?.length)\n    return response.clone.bind(response);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/web-standard/handler.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/web-standard/index.mjs":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/web-standard/index.mjs ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebStandardAdapter: () => (/* binding */ WebStandardAdapter)\n/* harmony export */ });\n/* harmony import */ var _handler_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handler.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/web-standard/handler.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/utils.mjs\");\n\n\nconst WebStandardAdapter = {\n  name: \"web-standard\",\n  isWebStandard: true,\n  handler: {\n    mapResponse: _handler_mjs__WEBPACK_IMPORTED_MODULE_0__.mapResponse,\n    mapEarlyResponse: _handler_mjs__WEBPACK_IMPORTED_MODULE_0__.mapEarlyResponse,\n    mapCompactResponse: _handler_mjs__WEBPACK_IMPORTED_MODULE_0__.mapCompactResponse,\n    createStaticHandler: _handler_mjs__WEBPACK_IMPORTED_MODULE_0__.createStaticHandler\n  },\n  composeHandler: {\n    mapResponseContext: \"c.request\",\n    preferWebstandardHeaders: true,\n    // @ts-ignore Bun specific\n    headers: \"c.headers = {}\\nfor (const [key, value] of c.request.headers.entries())c.headers[key] = value\\n\",\n    parser: {\n      json(isOptional) {\n        if (isOptional)\n          return `try{c.body=await c.request.json()}catch{}\n`;\n        return `c.body=await c.request.json()\n`;\n      },\n      text() {\n        return `c.body=await c.request.text()\n`;\n      },\n      urlencoded() {\n        return `c.body=parseQuery(await c.request.text())\n`;\n      },\n      arrayBuffer() {\n        return `c.body=await c.request.arrayBuffer()\n`;\n      },\n      formData(isOptional) {\n        let fnLiteral = \"\\nc.body={}\\n\";\n        if (isOptional)\n          fnLiteral += `let form;try{form=await c.request.formData()}catch{}`;\n        else fnLiteral += `const form=await c.request.formData()\n`;\n        return fnLiteral + `for(const key of form.keys()){if(c.body[key]) continue\nconst value=form.getAll(key)\nif(value.length===1)c.body[key]=value[0]\nelse c.body[key]=value}`;\n      }\n    }\n  },\n  composeGeneralHandler: {\n    parameters: \"r\",\n    createContext(app) {\n      let decoratorsLiteral = \"\";\n      let fnLiteral = \"\";\n      const defaultHeaders = app.setHeaders;\n      for (const key of Object.keys(app.singleton.decorator))\n        decoratorsLiteral += `,${key}: decorator['${key}']`;\n      const standardHostname = app.config.handler?.standardHostname ?? true;\n      const hasTrace = !!app.event.trace?.length;\n      fnLiteral += `const u=r.url,s=u.indexOf('/',${standardHostname ? 11 : 7}),qi=u.indexOf('?', s + 1)\nlet p\nif(qi===-1)p=u.substring(s)\nelse p=u.substring(s, qi)\n`;\n      if (hasTrace) fnLiteral += `const id=randomId()\n`;\n      fnLiteral += `const c={request:r,store,qi,path:p,url:u,redirect,error,set:{headers:`;\n      fnLiteral += Object.keys(defaultHeaders ?? {}).length ? \"Object.assign({}, app.setHeaders)\" : \"{}\";\n      fnLiteral += `,status:200}`;\n      if (app.inference.server)\n        fnLiteral += `,get server(){return app.getServer()}`;\n      if (hasTrace) fnLiteral += \",[ELYSIA_REQUEST_ID]:id\";\n      fnLiteral += decoratorsLiteral;\n      fnLiteral += `}\n`;\n      return fnLiteral;\n    },\n    websocket(app) {\n      let fnLiteral = \"\";\n      const wsPaths = app.router.static.ws;\n      const router = app.router.http;\n      router.build();\n      if (Object.keys(wsPaths).length || router.root.ws || router.history.find((x) => x[\"0\"] === \"ws\")) {\n        fnLiteral += `if(r.method==='GET'){switch(p){`;\n        for (const [path, index] of Object.entries(wsPaths)) {\n          fnLiteral += `case'${path}':` + (app.config.strictPath !== true ? `case'${(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.getLoosePath)(path)}':` : \"\") + `if(r.headers.get('upgrade')==='websocket')return ht[${index}].composed(c)\n`;\n        }\n        fnLiteral += `default:if(r.headers.get('upgrade')==='websocket'){const route=router.find('ws',p)\nif(route){c.params=route.params\nif(route.store.handler)return route.store.handler(c)\nreturn (route.store.handler=route.store.compile())(c)}}break}}`;\n      }\n      return fnLiteral;\n    },\n    error404(hasEventHook, hasErrorHook) {\n      let findDynamicRoute = `if(route===null)return `;\n      if (hasErrorHook)\n        findDynamicRoute += `app.handleError(c,notFound,false,${this.parameters})`;\n      else\n        findDynamicRoute += hasEventHook ? `new Response(error404Message,{status:c.set.status===200?404:c.set.status,headers:c.set.headers})` : `error404.clone()`;\n      return {\n        declare: hasErrorHook ? \"\" : `const error404Message=notFound.message.toString()\nconst error404=new Response(error404Message,{status:404})\n`,\n        code: findDynamicRoute\n      };\n    }\n  },\n  composeError: {\n    mapResponseContext: \"\",\n    validationError: `return new Response(error.message,{headers:Object.assign({'content-type':'application/json'},set.headers),status:set.status})`,\n    unknownError: `return new Response(error.message,{headers:set.headers,status:error.status??set.status??500})`\n  },\n  listen() {\n    return () => {\n      throw new Error(\n        \"WebStandard does not support listen, you might want to export default Elysia.fetch instead\"\n      );\n    };\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/web-standard/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/compose.mjs":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/compose.mjs ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   composeErrorHandler: () => (/* binding */ composeErrorHandler),\n/* harmony export */   composeGeneralHandler: () => (/* binding */ composeGeneralHandler),\n/* harmony export */   composeHandler: () => (/* binding */ composeHandler),\n/* harmony export */   hasAdditionalProperties: () => (/* binding */ hasAdditionalProperties),\n/* harmony export */   hasProperty: () => (/* binding */ hasProperty),\n/* harmony export */   hasRef: () => (/* binding */ hasRef),\n/* harmony export */   hasTransform: () => (/* binding */ hasTransform),\n/* harmony export */   hasType: () => (/* binding */ hasType),\n/* harmony export */   isAsync: () => (/* binding */ isAsync),\n/* harmony export */   isAsyncName: () => (/* binding */ isAsyncName),\n/* harmony export */   isGenerator: () => (/* binding */ isGenerator)\n/* harmony export */ });\n/* harmony import */ var _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sinclair/typebox/value */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/value/default/default.mjs\");\n/* harmony import */ var _sinclair_typebox__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sinclair/typebox */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/type/symbols/symbols.mjs\");\n/* harmony import */ var _sinclair_typebox__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sinclair/typebox */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/type/error/error.mjs\");\n/* harmony import */ var _fast_querystring_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fast-querystring.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/fast-querystring.mjs\");\n/* harmony import */ var _deuri_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deuri.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/deuri.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/utils.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/error.mjs\");\n/* harmony import */ var _trace_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./trace.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/trace.mjs\");\n/* harmony import */ var _sucrose_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sucrose.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/sucrose.mjs\");\n/* harmony import */ var _cookies_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cookies.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/cookies.mjs\");\n\n\n\n\n\n\n\n\n\n\nconst TypeBoxSymbol = {\n  optional: Symbol.for(\"TypeBox.Optional\"),\n  kind: Symbol.for(\"TypeBox.Kind\")\n};\nconst isOptional = (validator) => {\n  if (!validator) return false;\n  const schema = validator?.schema;\n  if (schema?.[TypeBoxSymbol.kind] === \"Import\")\n    return validator.References().some(isOptional);\n  return !!schema && TypeBoxSymbol.optional in schema;\n};\nconst allocateIf = (value, condition) => condition ? value : \"\";\nconst defaultParsers = [\n  \"json\",\n  \"text\",\n  \"urlencoded\",\n  \"arrayBuffer\",\n  \"formdata\",\n  \"application/json\",\n  // eslint-disable-next-line sonarjs/no-duplicate-string\n  \"text/plain\",\n  // eslint-disable-next-line sonarjs/no-duplicate-string\n  \"application/x-www-form-urlencoded\",\n  // eslint-disable-next-line sonarjs/no-duplicate-string\n  \"application/octet-stream\",\n  // eslint-disable-next-line sonarjs/no-duplicate-string\n  \"multipart/form-data\"\n];\nconst hasAdditionalProperties = (_schema) => {\n  if (!_schema) return false;\n  const schema = _schema?.schema ?? _schema;\n  if (schema[TypeBoxSymbol.kind] === \"Import\" && _schema.References()) {\n    return _schema.References().some(hasAdditionalProperties);\n  }\n  if (schema.anyOf) return schema.anyOf.some(hasAdditionalProperties);\n  if (schema.someOf) return schema.someOf.some(hasAdditionalProperties);\n  if (schema.allOf) return schema.allOf.some(hasAdditionalProperties);\n  if (schema.not) return schema.not.some(hasAdditionalProperties);\n  if (schema.type === \"object\") {\n    const properties = schema.properties;\n    if (\"additionalProperties\" in schema) return schema.additionalProperties;\n    if (\"patternProperties\" in schema) return false;\n    for (const key of Object.keys(properties)) {\n      const property = properties[key];\n      if (property.type === \"object\") {\n        if (hasAdditionalProperties(property)) return true;\n      } else if (property.anyOf) {\n        for (let i = 0; i < property.anyOf.length; i++)\n          if (hasAdditionalProperties(property.anyOf[i])) return true;\n      }\n      return property.additionalProperties;\n    }\n    return false;\n  }\n  return false;\n};\nconst createReport = ({\n  context = \"c\",\n  trace = [],\n  addFn\n}) => {\n  if (!trace.length)\n    return () => {\n      return {\n        resolveChild() {\n          return () => {\n          };\n        },\n        resolve() {\n        }\n      };\n    };\n  for (let i = 0; i < trace.length; i++)\n    addFn(\n      `let report${i}, reportChild${i}, reportErr${i}, reportErrChild${i};let trace${i} = ${context}[ELYSIA_TRACE]?.[${i}] ?? trace[${i}](${context});\n`\n    );\n  return (event, {\n    name,\n    total = 0\n  } = {}) => {\n    if (!name) name = \"anonymous\";\n    const reporter = event === \"error\" ? \"reportErr\" : \"report\";\n    for (let i = 0; i < trace.length; i++)\n      addFn(\n        `${reporter}${i} = trace${i}.${event}({id,event:'${event}',name:'${name}',begin:performance.now(),total:${total}})\n`\n      );\n    return {\n      resolve() {\n        for (let i = 0; i < trace.length; i++)\n          addFn(`${reporter}${i}.resolve()\n`);\n      },\n      resolveChild(name2) {\n        for (let i = 0; i < trace.length; i++)\n          addFn(\n            `${reporter}Child${i}=${reporter}${i}.resolveChild?.shift()?.({id,event:'${event}',name:'${name2}',begin:performance.now()})\n`\n          );\n        return (binding) => {\n          for (let i = 0; i < trace.length; i++) {\n            if (binding)\n              addFn(\n                `if(${binding} instanceof Error){${reporter}Child${i}?.(${binding}) }else{${reporter}Child${i}?.()}`\n              );\n            else addFn(`${reporter}Child${i}?.()\n`);\n          }\n        };\n      }\n    };\n  };\n};\nconst composeValidationFactory = ({\n  injectResponse = \"\",\n  normalize = false,\n  validator,\n  encodeSchema = false\n}) => ({\n  composeValidation: (type, value = `c.${type}`) => `c.set.status=422;throw new ValidationError('${type}',validator.${type},${value})`,\n  composeResponseValidation: (name = \"r\") => {\n    let code = injectResponse + \"\\n\";\n    code += `if(${name} instanceof ElysiaCustomStatusResponse){c.set.status=${name}.code\n${name}=${name}.response}const isResponse=${name} instanceof Response\nswitch(c.set.status){`;\n    for (const [status, value] of Object.entries(\n      validator.response\n    )) {\n      code += `\ncase ${status}:if(!isResponse){`;\n      if (normalize && \"Clean\" in value && !hasAdditionalProperties(value))\n        code += `${name}=validator.response['${status}'].Clean(${name})\n`;\n      if (encodeSchema && // @ts-expect-error hasTransform is appended by getResponseSchemaValidator\n      (value.hasTransform || typeof value.Decode === \"function\"))\n        code += `${name}=validator.response['${status}'].Encode(${name})\n`;\n      code += `if(validator.response['${status}'].Check(${name})===false){c.set.status=422\nthrow new ValidationError('response',validator.response['${status}'],${name})}c.set.status = ${status}}\n`;\n      code += \"break\\n\";\n    }\n    return code + \"}\";\n  }\n});\nconst KindSymbol = Symbol.for(\"TypeBox.Kind\");\nconst hasType = (type, schema) => {\n  if (!schema) return;\n  if (KindSymbol in schema && schema[KindSymbol] === type) return true;\n  if (schema.type === \"object\") {\n    const properties = schema.properties;\n    for (const key of Object.keys(properties)) {\n      const property = properties[key];\n      if (property.type === \"object\") {\n        if (hasType(type, property)) return true;\n      } else if (property.anyOf) {\n        for (let i = 0; i < property.anyOf.length; i++)\n          if (hasType(type, property.anyOf[i])) return true;\n      }\n      if (KindSymbol in property && property[KindSymbol] === type)\n        return true;\n    }\n    return false;\n  }\n  return schema.properties && KindSymbol in schema.properties && schema.properties[KindSymbol] === type;\n};\nconst hasProperty = (expectedProperty, _schema) => {\n  if (!_schema) return;\n  const schema = _schema.schema ?? _schema;\n  if (schema[TypeBoxSymbol.kind] === \"Import\")\n    return _schema.References().some((schema2) => hasProperty(expectedProperty, schema2));\n  if (schema.type === \"object\") {\n    const properties = schema.properties;\n    if (!properties) return false;\n    for (const key of Object.keys(properties)) {\n      const property = properties[key];\n      if (expectedProperty in property) return true;\n      if (property.type === \"object\") {\n        if (hasProperty(expectedProperty, property)) return true;\n      } else if (property.anyOf) {\n        for (let i = 0; i < property.anyOf.length; i++) {\n          if (hasProperty(expectedProperty, property.anyOf[i]))\n            return true;\n        }\n      }\n    }\n    return false;\n  }\n  return expectedProperty in schema;\n};\nconst TransformSymbol = Symbol.for(\"TypeBox.Transform\");\nconst hasRef = (schema) => {\n  if (!schema) return false;\n  if (schema.oneOf) {\n    for (let i = 0; i < schema.oneOf.length; i++)\n      if (hasRef(schema.oneOf[i])) return true;\n  }\n  if (schema.anyOf) {\n    for (let i = 0; i < schema.anyOf.length; i++)\n      if (hasRef(schema.anyOf[i])) return true;\n  }\n  if (schema.oneOf) {\n    for (let i = 0; i < schema.oneOf.length; i++)\n      if (hasRef(schema.oneOf[i])) return true;\n  }\n  if (schema.allOf) {\n    for (let i = 0; i < schema.allOf.length; i++)\n      if (hasRef(schema.allOf[i])) return true;\n  }\n  if (schema.not && hasRef(schema.not)) return true;\n  if (schema.type === \"object\" && schema.properties) {\n    const properties = schema.properties;\n    for (const key of Object.keys(properties)) {\n      const property = properties[key];\n      if (hasRef(property)) return true;\n      if (property.type === \"array\" && property.items && hasRef(property.items))\n        return true;\n    }\n  }\n  if (schema.type === \"array\" && schema.items && hasRef(schema.items))\n    return true;\n  return schema[_sinclair_typebox__WEBPACK_IMPORTED_MODULE_7__.Kind] === \"Ref\" && \"$ref\" in schema;\n};\nconst hasTransform = (schema) => {\n  if (!schema) return false;\n  if (schema.$ref && schema.$defs && schema.$ref in schema.$defs && hasTransform(schema.$defs[schema.$ref]))\n    return true;\n  if (schema.oneOf) {\n    for (let i = 0; i < schema.oneOf.length; i++)\n      if (hasTransform(schema.oneOf[i])) return true;\n  }\n  if (schema.anyOf) {\n    for (let i = 0; i < schema.anyOf.length; i++)\n      if (hasTransform(schema.anyOf[i])) return true;\n  }\n  if (schema.allOf) {\n    for (let i = 0; i < schema.allOf.length; i++)\n      if (hasTransform(schema.allOf[i])) return true;\n  }\n  if (schema.not && hasTransform(schema.not)) return true;\n  if (schema.type === \"object\" && schema.properties) {\n    const properties = schema.properties;\n    for (const key of Object.keys(properties)) {\n      const property = properties[key];\n      if (hasTransform(property)) return true;\n      if (property.type === \"array\" && property.items && hasTransform(property.items))\n        return true;\n    }\n  }\n  if (schema.type === \"array\" && schema.items && hasTransform(schema.items))\n    return true;\n  return TransformSymbol in schema;\n};\nconst matchFnReturn = /(?:return|=>) \\S+\\(/g;\nconst isAsyncName = (v) => {\n  const fn = v?.fn ?? v;\n  return fn.constructor.name === \"AsyncFunction\";\n};\nconst isAsync = (v) => {\n  const fn = v?.fn ?? v;\n  if (fn.constructor.name === \"AsyncFunction\") return true;\n  const literal = fn.toString();\n  if (literal.includes(\"=> response.clone(\")) return false;\n  if (literal.includes(\"await\")) return true;\n  if (literal.includes(\"async\")) return true;\n  if (literal.includes(\"=>response.clone(\")) return false;\n  return !!literal.match(matchFnReturn);\n};\nconst isGenerator = (v) => {\n  const fn = v?.fn ?? v;\n  return fn.constructor.name === \"AsyncGeneratorFunction\" || fn.constructor.name === \"GeneratorFunction\";\n};\nconst composeHandler = ({\n  app,\n  path,\n  method,\n  hooks,\n  validator,\n  handler,\n  allowMeta = false,\n  inference,\n  asManifest = false\n}) => {\n  const adapter = app[\"~adapter\"].composeHandler;\n  const adapterHandler = app[\"~adapter\"].handler;\n  const isHandleFn = typeof handler === \"function\";\n  if (!isHandleFn) {\n    handler = adapterHandler.mapResponse(handler, {\n      // @ts-expect-error private property\n      headers: app.setHeaders ?? {}\n    });\n    if (hooks.parse?.length && hooks.transform?.length && hooks.beforeHandle?.length && hooks.afterHandle?.length) {\n      if (handler instanceof Response)\n        return Function(\n          \"a\",\n          `return function(){return a.clone()}`\n        )(handler);\n      return Function(\"a\", \"return function(){return a}\")(handler);\n    }\n  }\n  const handle = isHandleFn ? `handler(c)` : `handler`;\n  const hasAfterResponse = !!hooks.afterResponse?.length;\n  const hasTrace = !!hooks.trace?.length;\n  let fnLiteral = \"\";\n  inference = (0,_sucrose_mjs__WEBPACK_IMPORTED_MODULE_5__.sucrose)(\n    Object.assign({}, hooks, {\n      handler\n    }),\n    inference\n  );\n  if (adapter.declare) {\n    const literal = adapter.declare(inference);\n    if (literal) fnLiteral += literal;\n  }\n  if (inference.server)\n    fnLiteral += \"Object.defineProperty(c,'server',{get:function(){return getServer()}})\\n\";\n  validator.createBody?.();\n  validator.createQuery?.();\n  validator.createHeaders?.();\n  validator.createParams?.();\n  validator.createCookie?.();\n  validator.createResponse?.();\n  const hasValidation = validator.body || validator.headers || validator.params || validator.query || validator.cookie || validator.response;\n  const hasQuery = inference.query || !!validator.query;\n  const requestNoBody = hooks.parse?.length === 1 && // @ts-expect-error\n  hooks.parse[0].fn === \"none\";\n  const hasBody = method !== \"$INTERNALWS\" && method !== \"GET\" && method !== \"HEAD\" && (inference.body || !!validator.body || !!hooks.parse?.length) && !requestNoBody;\n  if (hasBody) fnLiteral += `let isParsing=false\n`;\n  const defaultHeaders = app.setHeaders;\n  const hasDefaultHeaders = defaultHeaders && !!Object.keys(defaultHeaders).length;\n  const hasHeaders = inference.headers || validator.headers || adapter.preferWebstandardHeaders !== true && inference.body;\n  const hasCookie = inference.cookie || !!validator.cookie;\n  const cookieValidator = hasCookie ? (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.getCookieValidator)({\n    // @ts-expect-error private property\n    modules: app.definitions.typebox,\n    validator: validator.cookie,\n    defaultConfig: app.config.cookie,\n    dynamic: !!app.config.aot,\n    // @ts-expect-error\n    config: validator.cookie?.config ?? {},\n    // @ts-expect-error\n    models: app.definitions.type\n  }) : void 0;\n  const cookieMeta = cookieValidator?.config;\n  let encodeCookie = \"\";\n  if (cookieMeta?.sign) {\n    if (!cookieMeta.secrets)\n      throw new Error(\n        `t.Cookie required secret which is not set in (${method}) ${path}.`\n      );\n    const secret = !cookieMeta.secrets ? void 0 : typeof cookieMeta.secrets === \"string\" ? cookieMeta.secrets : cookieMeta.secrets[0];\n    encodeCookie += \"const _setCookie = c.set.cookie\\nif(_setCookie){\";\n    if (cookieMeta.sign === true) {\n      encodeCookie += `for(const [key, cookie] of Object.entries(_setCookie)){c.set.cookie[key].value=await signCookie(cookie.value,'${secret}')}`;\n    } else\n      for (const name of cookieMeta.sign)\n        encodeCookie += `if(_setCookie['${name}']?.value){c.set.cookie['${name}'].value=await signCookie(_setCookie['${name}'].value,'${secret}')}`;\n    encodeCookie += \"}\\n\";\n  }\n  const normalize = app.config.normalize;\n  const encodeSchema = app.config.experimental?.encodeSchema;\n  const { composeValidation, composeResponseValidation } = composeValidationFactory({\n    normalize,\n    validator,\n    encodeSchema\n  });\n  if (hasHeaders) fnLiteral += adapter.headers;\n  if (hasTrace) fnLiteral += \"const id=c[ELYSIA_REQUEST_ID]\\n\";\n  const report = createReport({\n    trace: hooks.trace,\n    addFn: (word) => {\n      fnLiteral += word;\n    }\n  });\n  fnLiteral += \"try{\";\n  if (hasCookie) {\n    const get = (name, defaultValue) => {\n      const value = cookieMeta?.[name] ?? defaultValue;\n      if (!value)\n        return typeof defaultValue === \"string\" ? `${name}:\"${defaultValue}\",` : `${name}:${defaultValue},`;\n      if (typeof value === \"string\") return `${name}:'${value}',`;\n      if (value instanceof Date)\n        return `${name}: new Date(${value.getTime()}),`;\n      return `${name}:${value},`;\n    };\n    const options = cookieMeta ? `{secrets:${cookieMeta.secrets !== void 0 ? typeof cookieMeta.secrets === \"string\" ? `'${cookieMeta.secrets}'` : \"[\" + cookieMeta.secrets.reduce(\n      (a, b) => a + `'${b}',`,\n      \"\"\n    ) + \"]\" : \"undefined\"},sign:${cookieMeta.sign === true ? true : cookieMeta.sign !== void 0 ? \"[\" + cookieMeta.sign.reduce(\n      (a, b) => a + `'${b}',`,\n      \"\"\n    ) + \"]\" : \"undefined\"},` + get(\"domain\") + get(\"expires\") + get(\"httpOnly\") + get(\"maxAge\") + get(\"path\", \"/\") + get(\"priority\") + get(\"sameSite\") + get(\"secure\") + \"}\" : \"undefined\";\n    if (hasHeaders)\n      fnLiteral += `\nc.cookie=await parseCookie(c.set,c.headers.cookie,${options})\n`;\n    else\n      fnLiteral += `\nc.cookie=await parseCookie(c.set,c.request.headers.get('cookie'),${options})\n`;\n  }\n  if (hasQuery) {\n    const destructured = [];\n    if (validator.query && validator.query.schema.type === \"object\") {\n      const properties = validator.query.schema.properties;\n      if (!hasAdditionalProperties(validator.query))\n        for (let [key, _value] of Object.entries(properties)) {\n          let value = _value;\n          const isArray = value.type === \"array\" || !!value.anyOf?.some(\n            (v) => v.type === \"string\" && v.format === \"ArrayString\"\n          );\n          if (value && TypeBoxSymbol.optional in value && value.type === \"array\" && value.items)\n            value = value.items;\n          const { type, anyOf } = value;\n          destructured.push({\n            key,\n            isArray,\n            isNestedObjectArray: isArray && value.items?.type === \"object\" || !!value.items?.anyOf?.some(\n              // @ts-expect-error\n              (x) => x.type === \"object\" || x.type === \"array\"\n            ),\n            isObject: type === \"object\" || anyOf?.some(\n              (v) => v.type === \"string\" && v.format === \"ArrayString\"\n            ),\n            anyOf: !!anyOf\n          });\n        }\n    }\n    if (!destructured.length) {\n      fnLiteral += \"if(c.qi===-1){c.query={}}else{c.query=parseQueryFromURL(c.url.slice(c.qi + 1))}\";\n    } else {\n      fnLiteral += `if(c.qi!==-1){let url='&'+c.url.slice(c.qi + 1)\n`;\n      let index = 0;\n      for (const {\n        key,\n        isArray,\n        isObject,\n        isNestedObjectArray,\n        anyOf\n      } of destructured) {\n        const init2 = (index === 0 ? \"let \" : \"\") + `memory=url.indexOf('&${key}=')\nlet a${index}\n`;\n        if (isArray) {\n          fnLiteral += init2;\n          if (isNestedObjectArray)\n            fnLiteral += `while(memory!==-1){const start=memory+${key.length + 2}\nmemory=url.indexOf('&',start)\nif(a${index}===undefined)\na${index}=''\nelse\na${index}+=','\nlet temp\nif(memory===-1)temp=decodeURIComponent(url.slice(start).replace(/\\\\+/g,' '))\nelse temp=decodeURIComponent(url.slice(start, memory).replace(/\\\\+/g,' '))\nconst charCode=temp.charCodeAt(0)\nif(charCode!==91&&charCode !== 123)\ntemp='\"'+temp+'\"'\na${index}+=temp\nif(memory===-1)break\nmemory=url.indexOf('&${key}=',memory)\nif(memory===-1)break}try{if(a${index}.charCodeAt(0)===91)a${index} = JSON.parse(a${index})\nelse\na${index}=JSON.parse('['+a${index}+']')}catch{}\n`;\n          else\n            fnLiteral += `while(memory!==-1){const start=memory+${key.length + 2}\nmemory=url.indexOf('&',start)\nif(a${index}===undefined)a${index}=[]\nif(memory===-1){const temp=decodeURIComponent(url.slice(start)).replace(/\\\\+/g,' ')\nif(temp.includes(',')){a${index}=a${index}.concat(temp.split(','))}else{a${index}.push(decodeURIComponent(url.slice(start)).replace(/\\\\+/g,' '))}\nbreak}else{const temp=decodeURIComponent(url.slice(start, memory)).replace(/\\\\+/g,' ')\nif(temp.includes(',')){a${index}=a${index}.concat(temp.split(','))}else{a${index}.push(temp)}\n}memory=url.indexOf('&${key}=',memory)\nif(memory===-1) break\n}`;\n        } else if (isObject)\n          fnLiteral += init2 + `if(memory!==-1){const start=memory+${key.length + 2}\nmemory=url.indexOf('&',start)\nif(memory===-1)a${index}=decodeURIComponent(url.slice(start).replace(/\\\\+/g,' '))else a${index}=decodeURIComponent(url.slice(start,memory).replace(/\\\\+/g,' '))if(a${index}!==undefined)try{a${index}=JSON.parse(a${index})}catch{}}`;\n        else {\n          fnLiteral += init2 + `if(memory!==-1){const start=memory+${key.length + 2}\nmemory=url.indexOf('&',start)\nif(memory===-1)a${index}=decodeURIComponent(url.slice(start).replace(/\\\\+/g,' '))\nelse{a${index}=decodeURIComponent(url.slice(start,memory).replace(/\\\\+/g,' '))`;\n          if (anyOf)\n            fnLiteral += `\nlet deepMemory=url.indexOf('&${key}=',memory)\nif(deepMemory!==-1){a${index}=[a${index}]\nlet first=true\nwhile(true){const start=deepMemory+${key.length + 2}\nif(first)first=false\nelse deepMemory = url.indexOf('&', start)\nlet value\nif(deepMemory===-1)value=url.slice(start).replace(/\\\\+/g,' ')\nelse value=url.slice(start, deepMemory).replace(/\\\\+/g,' ')\nvalue=decodeURIComponent(value)\nif(value===null){if(deepMemory===-1){break}else{continue}}\nconst vStart=value.charCodeAt(0)\nconst vEnd=value.charCodeAt(value.length - 1)\nif((vStart===91&&vEnd===93)||(vStart===123&&vEnd===125))\ntry{a${index}.push(JSON.parse(value))}catch{a${index}.push(value)}if(deepMemory===-1)break}}`;\n          fnLiteral += \"}}\";\n        }\n        index++;\n        fnLiteral += \"\\n\";\n      }\n      fnLiteral += `c.query={` + destructured.map(({ key }, index2) => `'${key}':a${index2}`).join(\",\") + `}`;\n      fnLiteral += `} else c.query = {}\n`;\n    }\n  }\n  const isAsyncHandler = typeof handler === \"function\" && isAsync(handler);\n  const saveResponse = hasTrace || hooks.afterResponse?.length ? \"c.response= \" : \"\";\n  const maybeAsync = hasCookie || hasBody || isAsyncHandler || !!hooks.parse?.length || !!hooks.afterHandle?.some(isAsync) || !!hooks.beforeHandle?.some(isAsync) || !!hooks.transform?.some(isAsync) || !!hooks.mapResponse?.some(isAsync);\n  const maybeStream = (typeof handler === \"function\" ? isGenerator(handler) : false) || !!hooks.beforeHandle?.some(isGenerator) || !!hooks.afterHandle?.some(isGenerator) || !!hooks.transform?.some(isGenerator);\n  const hasSet = inference.cookie || inference.set || hasHeaders || hasTrace || validator.response || isHandleFn && hasDefaultHeaders || maybeStream;\n  const mapResponseContext = adapter.mapResponseContext ? `,${adapter.mapResponseContext}` : \"\";\n  if (hasTrace || inference.route) fnLiteral += `c.route=\\`${path}\\`\n`;\n  const parseReporter = report(\"parse\", {\n    total: hooks.parse?.length\n  });\n  if (hasBody) {\n    const isOptionalBody = isOptional(validator.body);\n    const hasBodyInference = !!hooks.parse?.length || inference.body || validator.body;\n    if (adapter.parser.declare) fnLiteral += adapter.parser.declare;\n    fnLiteral += \"\\nisParsing=true\\n\";\n    const parser = typeof hooks.parse === \"string\" ? hooks.parse : Array.isArray(hooks.parse) && hooks.parse.length === 1 ? typeof hooks.parse[0] === \"string\" ? hooks.parse[0] : typeof hooks.parse[0].fn === \"string\" ? hooks.parse[0].fn : void 0 : void 0;\n    if (parser && defaultParsers.includes(parser)) {\n      const reporter = report(\"parse\", {\n        total: hooks.parse?.length\n      });\n      switch (parser) {\n        case \"json\":\n        case \"application/json\":\n          fnLiteral += adapter.parser.json(isOptionalBody);\n          break;\n        case \"text\":\n        case \"text/plain\":\n          fnLiteral += adapter.parser.text(isOptionalBody);\n          break;\n        case \"urlencoded\":\n        case \"application/x-www-form-urlencoded\":\n          fnLiteral += adapter.parser.urlencoded(isOptionalBody);\n          break;\n        case \"arrayBuffer\":\n        case \"application/octet-stream\":\n          fnLiteral += adapter.parser.arrayBuffer(isOptionalBody);\n          break;\n        case \"formdata\":\n        case \"multipart/form-data\":\n          fnLiteral += adapter.parser.formData(isOptionalBody);\n          break;\n        default:\n          if (parser[0] in app[\"~parser\"]) {\n            fnLiteral += hasHeaders ? `let contentType = c.headers['content-type']` : `let contentType = c.request.headers.get('content-type')`;\n            fnLiteral += `\nif(contentType){const index=contentType.indexOf(';')\nif(index!==-1)contentType=contentType.substring(0, index)}\nelse{contentType=''}c.contentType=contentType\n`;\n            fnLiteral += `let result=parser['${parser}'](c, contentType)\nif(result instanceof Promise)result=await result\nif(result instanceof ElysiaCustomStatusResponse)throw result\nif(result!==undefined)c.body=result\ndelete c.contentType\n`;\n          }\n          break;\n      }\n      reporter.resolve();\n    } else if (hasBodyInference) {\n      fnLiteral += \"\\n\";\n      fnLiteral += hasHeaders ? `let contentType = c.headers['content-type']` : `let contentType = c.request.headers.get('content-type')`;\n      fnLiteral += `\nif(contentType){const index=contentType.indexOf(';')\nif(index!==-1)contentType=contentType.substring(0, index)}\nelse{contentType=''}c.contentType=contentType\n`;\n      if (hooks.parse?.length) fnLiteral += `let used=false\n`;\n      const reporter = report(\"parse\", {\n        total: hooks.parse?.length\n      });\n      let hasDefaultParser = false;\n      if (hooks.parse)\n        for (let i = 0; i < hooks.parse.length; i++) {\n          const name = `bo${i}`;\n          if (i !== 0) fnLiteral += `\nif(!used){`;\n          if (typeof hooks.parse[i].fn === \"string\") {\n            const endUnit = reporter.resolveChild(\n              hooks.parse[i].fn\n            );\n            switch (hooks.parse[i].fn) {\n              case \"json\":\n              case \"application/json\":\n                hasDefaultParser = true;\n                fnLiteral += adapter.parser.json(isOptionalBody);\n                break;\n              case \"text\":\n              case \"text/plain\":\n                hasDefaultParser = true;\n                fnLiteral += adapter.parser.text(isOptionalBody);\n                break;\n              case \"urlencoded\":\n              case \"application/x-www-form-urlencoded\":\n                hasDefaultParser = true;\n                fnLiteral += adapter.parser.urlencoded(isOptionalBody);\n                break;\n              case \"arrayBuffer\":\n              case \"application/octet-stream\":\n                hasDefaultParser = true;\n                fnLiteral += adapter.parser.arrayBuffer(isOptionalBody);\n                break;\n              case \"formdata\":\n              case \"multipart/form-data\":\n                hasDefaultParser = true;\n                fnLiteral += adapter.parser.formData(isOptionalBody);\n                break;\n              default:\n                fnLiteral += `${name}=parser['${hooks.parse[i].fn}'](c,contentType)\nif(${name} instanceof Promise)${name}=await ${name}\nif(${name}!==undefined){c.body=${name};used=true}\n`;\n            }\n            endUnit();\n          } else {\n            const endUnit = reporter.resolveChild(\n              hooks.parse[i].fn.name\n            );\n            fnLiteral += `let ${name}=e.parse[${i}]\n${name}=${name}(c,contentType)\nif(${name} instanceof Promise)${name}=await ${name}\nif(${name}!==undefined){c.body=${name};used=true}`;\n            endUnit();\n          }\n          if (i !== 0) fnLiteral += `}`;\n          if (hasDefaultParser) break;\n        }\n      reporter.resolve();\n      if (!hasDefaultParser) {\n        if (hooks.parse?.length)\n          fnLiteral += `\nif(!used){\nif(!contentType) throw new ParseError()\n`;\n        fnLiteral += `switch(contentType){`;\n        fnLiteral += `case 'application/json':\n` + adapter.parser.json(isOptionalBody) + `break\ncase 'text/plain':` + adapter.parser.text(isOptionalBody) + `break\ncase 'application/x-www-form-urlencoded':` + adapter.parser.urlencoded(isOptionalBody) + `break\ncase 'application/octet-stream':` + adapter.parser.arrayBuffer(isOptionalBody) + `break\ncase 'multipart/form-data':` + adapter.parser.formData(isOptionalBody) + `break\n`;\n        for (const key of Object.keys(app[\"~parser\"]))\n          fnLiteral += `case '${key}':let bo${key}=parser['${key}'](c,contentType)\nif(bo${key} instanceof Promise)bo${key}=await bo${key}\nif(bo${key} instanceof ElysiaCustomStatusResponse)throw result\nif(bo${key}!==undefined)c.body=bo${key}\nbreak\n`;\n        if (hooks.parse?.length) fnLiteral += \"}\";\n        fnLiteral += \"}\";\n      }\n    }\n    fnLiteral += \"\\ndelete c.contentType\";\n    fnLiteral += \"\\nisParsing=false\\n\";\n  }\n  parseReporter.resolve();\n  if (hooks?.transform) {\n    const reporter = report(\"transform\", {\n      total: hooks.transform.length\n    });\n    if (hooks.transform.length) fnLiteral += \"let transformed\\n\";\n    for (let i = 0; i < hooks.transform.length; i++) {\n      const transform = hooks.transform[i];\n      const endUnit = reporter.resolveChild(transform.fn.name);\n      fnLiteral += isAsync(transform) ? `transformed=await e.transform[${i}](c)\n` : `transformed=e.transform[${i}](c)\n`;\n      if (transform.subType === \"mapDerive\")\n        fnLiteral += `if(transformed instanceof ElysiaCustomStatusResponse)throw transformed\nelse{transformed.request=c.request\ntransformed.store=c.store\ntransformed.qi=c.qi\ntransformed.path=c.path\ntransformed.url=c.url\ntransformed.redirect=c.redirect\ntransformed.set=c.set\ntransformed.error=c.error\nc=transformed}`;\n      else\n        fnLiteral += `if(transformed instanceof ElysiaCustomStatusResponse)throw transformed\nelse Object.assign(c,transformed)\n`;\n      endUnit();\n    }\n    reporter.resolve();\n  }\n  if (validator) {\n    if (validator.headers) {\n      if (normalize && \"Clean\" in validator.headers && !hasAdditionalProperties(validator.headers))\n        fnLiteral += \"c.headers=validator.headers.Clean(c.headers);\\n\";\n      if (hasProperty(\"default\", validator.headers))\n        for (const [key, value] of Object.entries(\n          _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_8__.Default(\n            // @ts-ignore\n            validator.headers.schema,\n            {}\n          )\n        )) {\n          const parsed = typeof value === \"object\" ? JSON.stringify(value) : typeof value === \"string\" ? `'${value}'` : value;\n          if (parsed !== void 0)\n            fnLiteral += `c.headers['${key}']??=${parsed}\n`;\n        }\n      if (isOptional(validator.headers))\n        fnLiteral += `if(isNotEmpty(c.headers)){`;\n      fnLiteral += `if(validator.headers.Check(c.headers) === false){` + composeValidation(\"headers\") + \"}\";\n      if (hasTransform(validator.headers.schema))\n        fnLiteral += `c.headers=validator.headers.Decode(c.headers)\n`;\n      if (isOptional(validator.headers)) fnLiteral += \"}\";\n    }\n    if (validator.params) {\n      if (hasProperty(\"default\", validator.params))\n        for (const [key, value] of Object.entries(\n          _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_8__.Default(\n            // @ts-ignore\n            validator.params.schema,\n            {}\n          )\n        )) {\n          const parsed = typeof value === \"object\" ? JSON.stringify(value) : typeof value === \"string\" ? `'${value}'` : value;\n          if (parsed !== void 0)\n            fnLiteral += `c.params['${key}']??=${parsed}\n`;\n        }\n      fnLiteral += `if(validator.params.Check(c.params)===false){` + composeValidation(\"params\") + \"}\";\n      if (hasTransform(validator.params.schema))\n        fnLiteral += `c.params=validator.params.Decode(c.params)\n`;\n    }\n    if (validator.query) {\n      if (normalize && \"Clean\" in validator.query && !hasAdditionalProperties(validator.query))\n        fnLiteral += \"c.query=validator.query.Clean(c.query)\\n\";\n      if (hasProperty(\"default\", validator.query))\n        for (const [key, value] of Object.entries(\n          _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_8__.Default(\n            // @ts-ignore\n            validator.query.schema,\n            {}\n          )\n        )) {\n          const parsed = typeof value === \"object\" ? JSON.stringify(value) : typeof value === \"string\" ? `'${value}'` : value;\n          if (parsed !== void 0)\n            fnLiteral += `if(c.query['${key}']===undefined)c.query['${key}']=${parsed}\n`;\n        }\n      if (isOptional(validator.query))\n        fnLiteral += `if(isNotEmpty(c.query)){`;\n      fnLiteral += `if(validator.query.Check(c.query)===false){` + composeValidation(\"query\") + `}`;\n      if (hasTransform(validator.query.schema))\n        fnLiteral += `c.query=validator.query.Decode(Object.assign({},c.query))\n`;\n      if (isOptional(validator.query)) fnLiteral += `}`;\n    }\n    if (validator.body) {\n      if (normalize && \"Clean\" in validator.body && !hasAdditionalProperties(validator.body))\n        fnLiteral += \"c.body=validator.body.Clean(c.body)\\n\";\n      const doesHaveTransform = hasTransform(validator.body.schema);\n      if (doesHaveTransform || isOptional(validator.body))\n        fnLiteral += `const isNotEmptyObject=c.body&&(typeof c.body===\"object\"&&isNotEmpty(c.body))\n`;\n      if (hasProperty(\"default\", validator.body)) {\n        const schema = validator.body.schema;\n        const value = _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_8__.Default(\n          schema,\n          schema.type === \"object\" || schema[TypeBoxSymbol.kind] === \"Import\" && schema.$defs[schema.$ref][TypeBoxSymbol.kind] === \"Object\" ? {} : void 0\n        );\n        const parsed = typeof value === \"object\" ? JSON.stringify(value) : typeof value === \"string\" ? `'${value}'` : value;\n        fnLiteral += `if(validator.body.Check(c.body)===false){`;\n        if (value !== void 0 && value !== null)\n          fnLiteral += `if(typeof c.body==='object')c.body=Object.assign(${parsed},c.body)\nelse c.body=${parsed}\n`;\n        if (isOptional(validator.body))\n          fnLiteral += `if(isNotEmptyObject&&validator.body.Check(c.body)===false){` + composeValidation(\"body\") + \"}\";\n        else\n          fnLiteral += `if(validator.body.Check(c.body)===false){` + composeValidation(\"body\") + `}`;\n        fnLiteral += \"}\";\n      } else {\n        if (isOptional(validator.body))\n          fnLiteral += `if(isNotEmptyObject&&validator.body.Check(c.body)===false){` + composeValidation(\"body\") + \"}\";\n        else\n          fnLiteral += `if(validator.body.Check(c.body)===false){` + composeValidation(\"body\") + \"}\";\n      }\n      if (doesHaveTransform)\n        fnLiteral += `if(isNotEmptyObject)c.body=validator.body.Decode(c.body)\n`;\n    }\n    if (cookieValidator && (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.isNotEmpty)(\n      // @ts-ignore\n      cookieValidator?.schema?.properties ?? // @ts-ignore\n      cookieValidator?.schema?.schema ?? {}\n    )) {\n      fnLiteral += `const cookieValue={}\nfor(const [key,value] of Object.entries(c.cookie))cookieValue[key]=value.value\n`;\n      if (hasProperty(\"default\", cookieValidator))\n        for (const [key, value] of Object.entries(\n          _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_8__.Default(\n            // @ts-ignore\n            cookieValidator.schema,\n            {}\n          )\n        )) {\n          fnLiteral += `cookieValue['${key}'] = ${typeof value === \"object\" ? JSON.stringify(value) : value}\n`;\n        }\n      if (isOptional(validator.cookie))\n        fnLiteral += `if(isNotEmpty(c.cookie)){`;\n      fnLiteral += `if(validator.cookie.Check(cookieValue)===false){` + composeValidation(\"cookie\", \"cookieValue\") + \"}\";\n      if (hasTransform(validator.cookie.schema))\n        fnLiteral += `for(const [key,value] of Object.entries(validator.cookie.Decode(cookieValue)))c.cookie[key].value=value\n`;\n      if (isOptional(validator.cookie)) fnLiteral += `}`;\n    }\n  }\n  if (hooks?.beforeHandle) {\n    const reporter = report(\"beforeHandle\", {\n      total: hooks.beforeHandle.length\n    });\n    let hasResolve = false;\n    for (let i = 0; i < hooks.beforeHandle.length; i++) {\n      const beforeHandle = hooks.beforeHandle[i];\n      const endUnit = reporter.resolveChild(beforeHandle.fn.name);\n      const returning = (0,_sucrose_mjs__WEBPACK_IMPORTED_MODULE_5__.hasReturn)(beforeHandle);\n      const isResolver = beforeHandle.subType === \"resolve\" || beforeHandle.subType === \"mapResolve\";\n      if (isResolver) {\n        if (!hasResolve) {\n          hasResolve = true;\n          fnLiteral += \"\\nlet resolved\\n\";\n        }\n        fnLiteral += isAsync(beforeHandle) ? `resolved=await e.beforeHandle[${i}](c);\n` : `resolved=e.beforeHandle[${i}](c);\n`;\n        if (beforeHandle.subType === \"mapResolve\")\n          fnLiteral += `if(resolved instanceof ElysiaCustomStatusResponse)throw resolved\nelse{resolved.request = c.request\nresolved.store = c.store\nresolved.qi = c.qi\nresolved.path = c.path\nresolved.url = c.url\nresolved.redirect = c.redirect\nresolved.set = c.set\nresolved.error = c.error\nc = resolved}`;\n        else\n          fnLiteral += `if(resolved instanceof ElysiaCustomStatusResponse)throw resolved\nelse Object.assign(c, resolved)\n`;\n      } else if (!returning) {\n        fnLiteral += isAsync(beforeHandle) ? `await e.beforeHandle[${i}](c)\n` : `e.beforeHandle[${i}](c)\n`;\n        endUnit();\n      } else {\n        fnLiteral += isAsync(beforeHandle) ? `be=await e.beforeHandle[${i}](c)\n` : `be=e.beforeHandle[${i}](c)\n`;\n        endUnit(\"be\");\n        fnLiteral += `if(be!==undefined){`;\n        reporter.resolve();\n        if (hooks.afterHandle?.length) {\n          report(\"handle\", {\n            name: isHandleFn ? handler.name : void 0\n          }).resolve();\n          const reporter2 = report(\"afterHandle\", {\n            total: hooks.afterHandle.length\n          });\n          for (let i2 = 0; i2 < hooks.afterHandle.length; i2++) {\n            const hook = hooks.afterHandle[i2];\n            const returning2 = (0,_sucrose_mjs__WEBPACK_IMPORTED_MODULE_5__.hasReturn)(hook);\n            const endUnit2 = reporter2.resolveChild(hook.fn.name);\n            fnLiteral += `c.response = be\n`;\n            if (!returning2) {\n              fnLiteral += isAsync(hook.fn) ? `await e.afterHandle[${i2}](c, be)\n` : `e.afterHandle[${i2}](c, be)\n`;\n            } else {\n              fnLiteral += isAsync(hook.fn) ? `af = await e.afterHandle[${i2}](c)\n` : `af = e.afterHandle[${i2}](c)\n`;\n              fnLiteral += `if(af!==undefined) c.response=be=af\n`;\n            }\n            endUnit2(\"af\");\n          }\n          reporter2.resolve();\n        }\n        if (validator.response)\n          fnLiteral += composeResponseValidation(\"be\");\n        const mapResponseReporter = report(\"mapResponse\", {\n          total: hooks.mapResponse?.length\n        });\n        if (hooks.mapResponse?.length) {\n          fnLiteral += `c.response=be\n`;\n          for (let i2 = 0; i2 < hooks.mapResponse.length; i2++) {\n            const mapResponse = hooks.mapResponse[i2];\n            const endUnit2 = mapResponseReporter.resolveChild(\n              mapResponse.fn.name\n            );\n            fnLiteral += `if(mr===undefined){mr=${isAsyncName(mapResponse) ? \"await \" : \"\"}e.mapResponse[${i2}](c)\nif(mr!==undefined)be=c.response=mr}`;\n            endUnit2();\n          }\n        }\n        mapResponseReporter.resolve();\n        fnLiteral += encodeCookie;\n        fnLiteral += `return mapEarlyResponse(${saveResponse}be,c.set${mapResponseContext})}\n`;\n      }\n    }\n    reporter.resolve();\n  }\n  if (hooks.afterHandle?.length) {\n    const handleReporter = report(\"handle\", {\n      name: isHandleFn ? handler.name : void 0\n    });\n    if (hooks.afterHandle.length)\n      fnLiteral += isAsyncHandler ? `let r=c.response=await ${handle}\n` : `let r=c.response=${handle}\n`;\n    else\n      fnLiteral += isAsyncHandler ? `let r=await ${handle}\n` : `let r=${handle}\n`;\n    handleReporter.resolve();\n    const reporter = report(\"afterHandle\", {\n      total: hooks.afterHandle.length\n    });\n    for (let i = 0; i < hooks.afterHandle.length; i++) {\n      const hook = hooks.afterHandle[i];\n      const returning = (0,_sucrose_mjs__WEBPACK_IMPORTED_MODULE_5__.hasReturn)(hook);\n      const endUnit = reporter.resolveChild(hook.fn.name);\n      if (!returning) {\n        fnLiteral += isAsync(hook.fn) ? `await e.afterHandle[${i}](c)\n` : `e.afterHandle[${i}](c)\n`;\n        endUnit();\n      } else {\n        fnLiteral += isAsync(hook.fn) ? `af=await e.afterHandle[${i}](c)\n` : `af=e.afterHandle[${i}](c)\n`;\n        endUnit(\"af\");\n        if (validator.response) {\n          fnLiteral += `if(af!==undefined){`;\n          reporter.resolve();\n          fnLiteral += composeResponseValidation(\"af\");\n          fnLiteral += `c.response=af}`;\n        } else {\n          fnLiteral += `if(af!==undefined){`;\n          reporter.resolve();\n          fnLiteral += `c.response=af}`;\n        }\n      }\n    }\n    reporter.resolve();\n    fnLiteral += `r=c.response\n`;\n    if (validator.response) fnLiteral += composeResponseValidation();\n    fnLiteral += encodeCookie;\n    const mapResponseReporter = report(\"mapResponse\", {\n      total: hooks.mapResponse?.length\n    });\n    if (hooks.mapResponse?.length) {\n      for (let i = 0; i < hooks.mapResponse.length; i++) {\n        const mapResponse = hooks.mapResponse[i];\n        const endUnit = mapResponseReporter.resolveChild(\n          mapResponse.fn.name\n        );\n        fnLiteral += `mr=${isAsyncName(mapResponse) ? \"await \" : \"\"}e.mapResponse[${i}](c)\nif(mr!==undefined)r=c.response=mr\n`;\n        endUnit();\n      }\n    }\n    mapResponseReporter.resolve();\n    if (hasSet)\n      fnLiteral += `return mapResponse(${saveResponse}r,c.set${mapResponseContext})\n`;\n    else\n      fnLiteral += `return mapCompactResponse(${saveResponse}r${mapResponseContext})\n`;\n  } else {\n    const handleReporter = report(\"handle\", {\n      name: isHandleFn ? handler.name : void 0\n    });\n    if (validator.response || hooks.mapResponse?.length) {\n      fnLiteral += isAsyncHandler ? `let r=await ${handle}\n` : `let r=${handle}\n`;\n      handleReporter.resolve();\n      if (validator.response) fnLiteral += composeResponseValidation();\n      report(\"afterHandle\").resolve();\n      const mapResponseReporter = report(\"mapResponse\", {\n        total: hooks.mapResponse?.length\n      });\n      if (hooks.mapResponse?.length) {\n        fnLiteral += \"\\nc.response=r\\n\";\n        for (let i = 0; i < hooks.mapResponse.length; i++) {\n          const mapResponse = hooks.mapResponse[i];\n          const endUnit = mapResponseReporter.resolveChild(\n            mapResponse.fn.name\n          );\n          fnLiteral += `\nif(mr===undefined){mr=${isAsyncName(mapResponse) ? \"await \" : \"\"}e.mapResponse[${i}](c)\nif(mr!==undefined)r=c.response=mr}\n`;\n          endUnit();\n        }\n      }\n      mapResponseReporter.resolve();\n      fnLiteral += encodeCookie;\n      if (handler instanceof Response) {\n        fnLiteral += inference.set ? `if(isNotEmpty(c.set.headers)||c.set.status!==200||c.set.redirect||c.set.cookie)return mapResponse(${saveResponse}${handle}.clone(),c.set${mapResponseContext})else return ${handle}.clone()` : `return ${handle}.clone()`;\n        fnLiteral += \"\\n\";\n      } else if (hasSet)\n        fnLiteral += `return mapResponse(${saveResponse}r,c.set${mapResponseContext})\n`;\n      else\n        fnLiteral += `return mapCompactResponse(${saveResponse}r${mapResponseContext})\n`;\n    } else if (hasCookie || hasTrace) {\n      fnLiteral += isAsyncHandler ? `let r=await ${handle}\n` : `let r=${handle}\n`;\n      handleReporter.resolve();\n      report(\"afterHandle\").resolve();\n      const mapResponseReporter = report(\"mapResponse\", {\n        total: hooks.mapResponse?.length\n      });\n      if (hooks.mapResponse?.length) {\n        fnLiteral += \"c.response= r\\n\";\n        for (let i = 0; i < hooks.mapResponse.length; i++) {\n          const mapResponse = hooks.mapResponse[i];\n          const endUnit = mapResponseReporter.resolveChild(\n            mapResponse.fn.name\n          );\n          fnLiteral += `if(mr===undefined){mr=${isAsyncName(mapResponse) ? \"await \" : \"\"}e.mapResponse[${i}](c)\nif(mr!==undefined)r=c.response=mr}`;\n          endUnit();\n        }\n      }\n      mapResponseReporter.resolve();\n      fnLiteral += encodeCookie;\n      if (hasSet)\n        fnLiteral += `return mapResponse(${saveResponse}r,c.set${mapResponseContext})\n`;\n      else\n        fnLiteral += `return mapCompactResponse(${saveResponse}r${mapResponseContext})\n`;\n    } else {\n      handleReporter.resolve();\n      const handled = isAsyncHandler ? `await ${handle}` : handle;\n      report(\"afterHandle\").resolve();\n      if (handler instanceof Response) {\n        fnLiteral += inference.set ? `if(isNotEmpty(c.set.headers)||c.set.status!==200||c.set.redirect||c.set.cookie)return mapResponse(${saveResponse}${handle}.clone(),c.set${mapResponseContext})\nelse return ${handle}.clone()\n` : `return ${handle}.clone()\n`;\n      } else if (hasSet)\n        fnLiteral += `return mapResponse(${saveResponse}${handled},c.set${mapResponseContext})\n`;\n      else\n        fnLiteral += `return mapCompactResponse(${saveResponse}${handled}${mapResponseContext})\n`;\n    }\n  }\n  fnLiteral += `\n}catch(error){`;\n  if (hasBody) fnLiteral += `if(isParsing)error=new ParseError()\n`;\n  if (!maybeAsync) fnLiteral += `return(async()=>{`;\n  fnLiteral += `const set=c.set\nif(!set.status||set.status<300)set.status=error?.status||500\n`;\n  if (hasTrace && hooks.trace)\n    for (let i = 0; i < hooks.trace.length; i++)\n      fnLiteral += `report${i}?.resolve(error);reportChild${i}?.(error)\n`;\n  const errorReporter = report(\"error\", {\n    total: hooks.error?.length\n  });\n  if (hooks.error?.length) {\n    fnLiteral += `c.error=error\n`;\n    if (hasValidation)\n      fnLiteral += `if(error instanceof TypeBoxError){c.code=\"VALIDATION\"\nc.set.status=422}else{c.code=error.code??error[ERROR_CODE]??\"UNKNOWN\"}`;\n    else fnLiteral += `c.code=error.code??error[ERROR_CODE]??\"UNKNOWN\"\n`;\n    fnLiteral += `let er\n`;\n    for (let i = 0; i < hooks.error.length; i++) {\n      const endUnit = errorReporter.resolveChild(hooks.error[i].fn.name);\n      if (isAsync(hooks.error[i]))\n        fnLiteral += `er=await e.error[${i}](c)\n`;\n      else\n        fnLiteral += `er=e.error[${i}](c)\nif(er instanceof Promise)er=await er\n`;\n      endUnit();\n      const mapResponseReporter = report(\"mapResponse\", {\n        total: hooks.mapResponse?.length\n      });\n      if (hooks.mapResponse?.length) {\n        for (let i2 = 0; i2 < hooks.mapResponse.length; i2++) {\n          const mapResponse = hooks.mapResponse[i2];\n          const endUnit2 = mapResponseReporter.resolveChild(\n            mapResponse.fn.name\n          );\n          fnLiteral += `c.response=er\ner=e.mapResponse[${i2}](c)\nif(er instanceof Promise)er=await er\n`;\n          endUnit2();\n        }\n      }\n      mapResponseReporter.resolve();\n      fnLiteral += `er=mapEarlyResponse(er,set${mapResponseContext})\n`;\n      fnLiteral += `if(er){`;\n      if (hasTrace && hooks.trace) {\n        for (let i2 = 0; i2 < hooks.trace.length; i2++)\n          fnLiteral += `report${i2}.resolve()\n`;\n        errorReporter.resolve();\n      }\n      fnLiteral += `return er}`;\n    }\n  }\n  errorReporter.resolve();\n  fnLiteral += `return handleError(c,error,true)`;\n  if (!maybeAsync) fnLiteral += \"})()\";\n  fnLiteral += \"}\";\n  if (hasAfterResponse || hasTrace) {\n    fnLiteral += `finally{ `;\n    if (!maybeAsync) fnLiteral += \";(async()=>{\";\n    const reporter = report(\"afterResponse\", {\n      total: hooks.afterResponse?.length\n    });\n    if (hasAfterResponse && hooks.afterResponse) {\n      for (let i = 0; i < hooks.afterResponse.length; i++) {\n        const endUnit = reporter.resolveChild(\n          hooks.afterResponse[i].fn.name\n        );\n        fnLiteral += `\nawait e.afterResponse[${i}](c)\n`;\n        endUnit();\n      }\n    }\n    reporter.resolve();\n    if (!maybeAsync) fnLiteral += \"})()\";\n    fnLiteral += `}`;\n  }\n  const adapterVariables = adapter.inject ? Object.keys(adapter.inject).join(\",\") + \",\" : \"\";\n  let init = `const {handler,handleError,hooks:e, ` + allocateIf(`validator,`, hasValidation) + `mapResponse,mapCompactResponse,mapEarlyResponse,isNotEmpty,utils:{` + allocateIf(`parseQuery,`, hasBody) + allocateIf(`parseQueryFromURL,`, hasQuery) + `},error:{` + allocateIf(`ValidationError,`, hasValidation) + `InternalServerError,` + allocateIf(`ParseError`, hasBody) + `},schema,definitions,ERROR_CODE,` + allocateIf(`parseCookie,`, hasCookie) + allocateIf(`signCookie,`, hasCookie) + allocateIf(`decodeURIComponent,`, hasQuery) + `ElysiaCustomStatusResponse,` + allocateIf(`ELYSIA_TRACE,`, hasTrace) + allocateIf(`ELYSIA_REQUEST_ID,`, hasTrace) + allocateIf(\"parser,\", hooks.parse?.length) + allocateIf(`getServer,`, inference.server) + adapterVariables + allocateIf(\"TypeBoxError\", hasValidation) + `}=hooks\nconst trace=e.trace?.map(x=>typeof x==='function'?x:x.fn)??[]\nreturn ${maybeAsync ? \"async \" : \"\"}function handle(c){`;\n  if (hooks.beforeHandle?.length) init += \"let be\\n\";\n  if (hooks.afterHandle?.length) init += \"let af\\n\";\n  if (hooks.mapResponse?.length) init += \"let mr\\n\";\n  if (allowMeta) init += \"c.schema = schema\\nc.defs = definitions\\n\";\n  init += fnLiteral + \"}\";\n  try {\n    if (asManifest) return Function(\"hooks\", init);\n    return Function(\n      \"hooks\",\n      init\n    )({\n      handler,\n      hooks: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.lifeCycleToFn)(hooks),\n      validator: hasValidation ? validator : void 0,\n      // @ts-expect-error\n      handleError: app.handleError,\n      mapResponse: adapterHandler.mapResponse,\n      mapCompactResponse: adapterHandler.mapCompactResponse,\n      mapEarlyResponse: adapterHandler.mapEarlyResponse,\n      isNotEmpty: _utils_mjs__WEBPACK_IMPORTED_MODULE_2__.isNotEmpty,\n      utils: {\n        parseQuery: hasBody ? _fast_querystring_mjs__WEBPACK_IMPORTED_MODULE_0__.parseQuery : void 0,\n        parseQueryFromURL: hasQuery ? _fast_querystring_mjs__WEBPACK_IMPORTED_MODULE_0__.parseQueryFromURL : void 0\n      },\n      error: {\n        ValidationError: hasValidation ? _error_mjs__WEBPACK_IMPORTED_MODULE_3__.ValidationError : void 0,\n        InternalServerError: _error_mjs__WEBPACK_IMPORTED_MODULE_3__.InternalServerError,\n        ParseError: hasBody ? _error_mjs__WEBPACK_IMPORTED_MODULE_3__.ParseError : void 0\n      },\n      schema: app.router.history,\n      // @ts-expect-error\n      definitions: app.definitions.type,\n      ERROR_CODE: _error_mjs__WEBPACK_IMPORTED_MODULE_3__.ERROR_CODE,\n      parseCookie: hasCookie ? _cookies_mjs__WEBPACK_IMPORTED_MODULE_6__.parseCookie : void 0,\n      signCookie: hasCookie ? _utils_mjs__WEBPACK_IMPORTED_MODULE_2__.signCookie : void 0,\n      decodeURIComponent: hasQuery ? _deuri_mjs__WEBPACK_IMPORTED_MODULE_1__.decode : void 0,\n      ElysiaCustomStatusResponse: _error_mjs__WEBPACK_IMPORTED_MODULE_3__.ElysiaCustomStatusResponse,\n      ELYSIA_TRACE: hasTrace ? _trace_mjs__WEBPACK_IMPORTED_MODULE_4__.ELYSIA_TRACE : void 0,\n      ELYSIA_REQUEST_ID: hasTrace ? _utils_mjs__WEBPACK_IMPORTED_MODULE_2__.ELYSIA_REQUEST_ID : void 0,\n      // @ts-expect-error private property\n      getServer: () => app.getServer(),\n      TypeBoxError: hasValidation ? _sinclair_typebox__WEBPACK_IMPORTED_MODULE_9__.TypeBoxError : void 0,\n      parser: app[\"~parser\"],\n      ...adapter.inject\n    });\n  } catch (error2) {\n    const debugHooks = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.lifeCycleToFn)(hooks);\n    console.log(\"[Composer] failed to generate optimized handler\");\n    console.log(\"---\");\n    console.log({\n      handler: typeof handler === \"function\" ? handler.toString() : handler,\n      instruction: init,\n      hooks: {\n        ...debugHooks,\n        // @ts-expect-error\n        transform: debugHooks?.transform?.map?.((x) => x.toString()),\n        // @ts-expect-error\n        resolve: debugHooks?.resolve?.map?.((x) => x.toString()),\n        // @ts-expect-error\n        beforeHandle: debugHooks?.beforeHandle?.map?.(\n          (x) => x.toString()\n        ),\n        // @ts-expect-error\n        afterHandle: debugHooks?.afterHandle?.map?.(\n          (x) => x.toString()\n        ),\n        // @ts-expect-error\n        mapResponse: debugHooks?.mapResponse?.map?.(\n          (x) => x.toString()\n        ),\n        // @ts-expect-error\n        parse: debugHooks?.parse?.map?.((x) => x.toString()),\n        // @ts-expect-error\n        error: debugHooks?.error?.map?.((x) => x.toString()),\n        // @ts-expect-error\n        afterResponse: debugHooks?.afterResponse?.map?.(\n          (x) => x.toString()\n        ),\n        // @ts-expect-error\n        stop: debugHooks?.stop?.map?.((x) => x.toString())\n      },\n      validator,\n      // @ts-expect-error\n      definitions: app.definitions.type,\n      error: error2,\n      fnLiteral\n    });\n    console.log(\"---\");\n    process.exit(1);\n  }\n};\nconst composeGeneralHandler = (app, { asManifest = false } = {}) => {\n  const adapter = app[\"~adapter\"].composeGeneralHandler;\n  app.router.http.build();\n  const error404 = adapter.error404(\n    !!app.event.request?.length,\n    !!app.event.error?.length\n  );\n  const hasTrace = app.event.trace?.length;\n  let fnLiteral = \"\";\n  const router = app.router;\n  let findDynamicRoute = `const route=router.find(r.method,p)`;\n  findDynamicRoute += router.http.root.ALL ? '??router.find(\"ALL\",p)\\n' : \"\\n\";\n  findDynamicRoute += error404.code;\n  findDynamicRoute += `\nc.params=route.params\nif(route.store.handler)return route.store.handler(c)\nreturn (route.store.handler=route.store.compile())(c)\n`;\n  let switchMap = ``;\n  for (const [path, v] of Object.entries(router.static.http.map)) {\n    switchMap += `case'${path}':`;\n    if (app.config.strictPath !== true)\n      switchMap += `case'${(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.getLoosePath)(path)}':`;\n    const encoded = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.encodePath)(path);\n    if (path !== encoded) switchMap += `case'${encoded}':`;\n    switchMap += `switch(r.method){${v.code}\n` + (v.all ?? `default: break map`) + \"}\";\n  }\n  const maybeAsync = !!app.event.request?.some(isAsync);\n  const adapterVariables = adapter.inject ? Object.keys(adapter.inject).join(\",\") + \",\" : \"\";\n  fnLiteral += `\nconst {app,mapEarlyResponse,NotFoundError,randomId,handleError,error,redirect,` + allocateIf(`ELYSIA_TRACE,`, hasTrace) + allocateIf(`ELYSIA_REQUEST_ID,`, hasTrace) + adapterVariables + `}=data\nconst store=app.singleton.store\nconst decorator=app.singleton.decorator\nconst staticRouter=app.router.static.http\nconst ht=app.router.history\nconst router=app.router.http\nconst trace=app.event.trace?.map(x=>typeof x==='function'?x:x.fn)??[]\nconst notFound=new NotFoundError()\nconst hoc=app.extender.higherOrderFunctions.map(x=>x.fn)\n`;\n  if (app.event.request?.length)\n    fnLiteral += `const onRequest=app.event.request.map(x=>x.fn)\n`;\n  fnLiteral += error404.declare;\n  if (app.event.trace?.length)\n    fnLiteral += `const ` + app.event.trace.map((_, i) => `tr${i}=app.event.trace[${i}].fn`).join(\",\") + \"\\n\";\n  fnLiteral += `${maybeAsync ? \"async \" : \"\"}function map(${adapter.parameters}){`;\n  if (app.event.request?.length) fnLiteral += `let re\n`;\n  fnLiteral += adapter.createContext(app);\n  if (app.event.trace?.length)\n    fnLiteral += `c[ELYSIA_TRACE]=[` + app.event.trace.map((_, i) => `tr${i}(c)`).join(\",\") + `]\n`;\n  const report = createReport({\n    trace: app.event.trace,\n    addFn(word) {\n      fnLiteral += word;\n    }\n  });\n  const reporter = report(\"request\", {\n    total: app.event.request?.length\n  });\n  if (app.event.request?.length) {\n    fnLiteral += `try{`;\n    for (let i = 0; i < app.event.request.length; i++) {\n      const hook = app.event.request[i];\n      const withReturn = (0,_sucrose_mjs__WEBPACK_IMPORTED_MODULE_5__.hasReturn)(hook);\n      const maybeAsync2 = isAsync(hook);\n      const endUnit = reporter.resolveChild(app.event.request[i].fn.name);\n      if (withReturn) {\n        fnLiteral += `re=mapEarlyResponse(${maybeAsync2 ? \"await \" : \"\"}onRequest[${i}](c),c.set)\n`;\n        endUnit(\"re\");\n        fnLiteral += `if(re!==undefined)return re\n`;\n      } else {\n        fnLiteral += `${maybeAsync2 ? \"await \" : \"\"}onRequest[${i}](c)\n`;\n        endUnit();\n      }\n    }\n    fnLiteral += `}catch(error){return app.handleError(c,error,false)}`;\n  }\n  reporter.resolve();\n  fnLiteral += adapter.websocket(app);\n  fnLiteral += `\nmap:switch(p){\n` + switchMap + `default:break}` + findDynamicRoute + `}\n`;\n  if (app.extender.higherOrderFunctions.length) {\n    let handler = \"map\";\n    for (let i = 0; i < app.extender.higherOrderFunctions.length; i++)\n      handler = `hoc[${i}](${handler},${adapter.parameters})`;\n    fnLiteral += `return function hocMap(${adapter.parameters}){return ${handler}(${adapter.parameters})}`;\n  } else fnLiteral += `return map`;\n  const handleError = composeErrorHandler(app);\n  app.handleError = handleError;\n  return Function(\n    \"data\",\n    fnLiteral\n  )({\n    app,\n    mapEarlyResponse: app[\"~adapter\"][\"handler\"].mapEarlyResponse,\n    NotFoundError: _error_mjs__WEBPACK_IMPORTED_MODULE_3__.NotFoundError,\n    randomId: _utils_mjs__WEBPACK_IMPORTED_MODULE_2__.randomId,\n    handleError,\n    error: _error_mjs__WEBPACK_IMPORTED_MODULE_3__.error,\n    redirect: _utils_mjs__WEBPACK_IMPORTED_MODULE_2__.redirect,\n    ELYSIA_TRACE: hasTrace ? _trace_mjs__WEBPACK_IMPORTED_MODULE_4__.ELYSIA_TRACE : void 0,\n    ELYSIA_REQUEST_ID: hasTrace ? _utils_mjs__WEBPACK_IMPORTED_MODULE_2__.ELYSIA_REQUEST_ID : void 0,\n    ...adapter.inject\n  });\n};\nconst composeErrorHandler = (app) => {\n  const hooks = app.event;\n  let fnLiteral = \"\";\n  const adapter = app[\"~adapter\"].composeError;\n  const adapterVariables = adapter.inject ? Object.keys(adapter.inject).join(\",\") + \",\" : \"\";\n  const hasTrace = !!app.event.trace?.length;\n  fnLiteral += `const {app:{event:{error:onErrorContainer,afterResponse:resContainer,mapResponse:_onMapResponse,trace:_trace}},mapResponse,ERROR_CODE,ElysiaCustomStatusResponse,` + allocateIf(`ELYSIA_TRACE,`, hasTrace) + allocateIf(`ELYSIA_REQUEST_ID,`, hasTrace) + adapterVariables + `}=inject\n`;\n  fnLiteral += `const trace=_trace?.map(x=>typeof x==='function'?x:x.fn)??[]\nconst onMapResponse=[]\nif(_onMapResponse)for(let i=0;i<_onMapResponse.length;i++)onMapResponse.push(_onMapResponse[i].fn??_onMapResponse[i])\ndelete _onMapResponse\nconst onError=onErrorContainer?.map(x=>x.fn)??[]\nconst res=resContainer?.map(x=>x.fn)??[]\nreturn ${app.event.error?.find(isAsync) || app.event.mapResponse?.find(isAsync) ? \"async \" : \"\"}function(context,error,skipGlobal){`;\n  fnLiteral += \"\";\n  if (hasTrace) fnLiteral += \"const id=context[ELYSIA_REQUEST_ID]\\n\";\n  const report = createReport({\n    context: \"context\",\n    trace: hooks.trace,\n    addFn: (word) => {\n      fnLiteral += word;\n    }\n  });\n  fnLiteral += `const set=context.set\nlet _r\nif(!context.code)context.code=error.code??error[ERROR_CODE]\nif(!(context.error instanceof Error))context.error=error\nif(error instanceof ElysiaCustomStatusResponse){set.status=error.status=error.code\nerror.message=error.response}`;\n  if (adapter.declare) fnLiteral += adapter.declare;\n  const saveResponse = hasTrace || !!hooks.afterResponse?.length || !!hooks.afterResponse?.length ? \"context.response = \" : \"\";\n  if (app.event.error)\n    for (let i = 0; i < app.event.error.length; i++) {\n      const handler = app.event.error[i];\n      const response = `${isAsync(handler) ? \"await \" : \"\"}onError[${i}](context)\n`;\n      fnLiteral += \"if(skipGlobal!==true){\";\n      if ((0,_sucrose_mjs__WEBPACK_IMPORTED_MODULE_5__.hasReturn)(handler)) {\n        fnLiteral += `_r=${response}\nif(_r!==undefined){if(_r instanceof Response)return mapResponse(_r,set${adapter.mapResponseContext})\nif(_r instanceof ElysiaCustomStatusResponse){error.status=error.code\nerror.message = error.response}if(set.status===200||!set.status)set.status=error.status\n`;\n        const mapResponseReporter2 = report(\"mapResponse\", {\n          total: hooks.mapResponse?.length,\n          name: \"context\"\n        });\n        if (hooks.mapResponse?.length) {\n          for (let i2 = 0; i2 < hooks.mapResponse.length; i2++) {\n            const mapResponse = hooks.mapResponse[i2];\n            const endUnit = mapResponseReporter2.resolveChild(\n              mapResponse.fn.name\n            );\n            fnLiteral += `context.response=_r_r=${isAsyncName(mapResponse) ? \"await \" : \"\"}onMapResponse[${i2}](context)\n`;\n            endUnit();\n          }\n        }\n        mapResponseReporter2.resolve();\n        fnLiteral += `return mapResponse(${saveResponse}_r,set${adapter.mapResponseContext})}`;\n      } else fnLiteral += response;\n      fnLiteral += \"}\";\n    }\n  fnLiteral += `if(error.constructor.name===\"ValidationError\"||error.constructor.name===\"TransformDecodeError\"){if(error.error)error=error.error\nset.status=error.status??422\n` + adapter.validationError + `}`;\n  fnLiteral += `if(error instanceof Error){` + adapter.unknownError + `}`;\n  const mapResponseReporter = report(\"mapResponse\", {\n    total: hooks.mapResponse?.length,\n    name: \"context\"\n  });\n  fnLiteral += \"\\nif(!context.response)context.response=error.message??error\\n\";\n  if (hooks.mapResponse?.length) {\n    fnLiteral += \"let mr\\n\";\n    for (let i = 0; i < hooks.mapResponse.length; i++) {\n      const mapResponse = hooks.mapResponse[i];\n      const endUnit = mapResponseReporter.resolveChild(\n        mapResponse.fn.name\n      );\n      fnLiteral += `if(mr===undefined){mr=${isAsyncName(mapResponse) ? \"await \" : \"\"}onMapResponse[${i}](context)\nif(mr!==undefined)error=context.response=mr}`;\n      endUnit();\n    }\n  }\n  mapResponseReporter.resolve();\n  fnLiteral += `\nreturn mapResponse(${saveResponse}error,set${adapter.mapResponseContext})}`;\n  return Function(\n    \"inject\",\n    fnLiteral\n  )({\n    app,\n    mapResponse: app[\"~adapter\"].handler.mapResponse,\n    ERROR_CODE: _error_mjs__WEBPACK_IMPORTED_MODULE_3__.ERROR_CODE,\n    ElysiaCustomStatusResponse: _error_mjs__WEBPACK_IMPORTED_MODULE_3__.ElysiaCustomStatusResponse,\n    ELYSIA_TRACE: hasTrace ? _trace_mjs__WEBPACK_IMPORTED_MODULE_4__.ELYSIA_TRACE : void 0,\n    ELYSIA_REQUEST_ID: hasTrace ? _utils_mjs__WEBPACK_IMPORTED_MODULE_2__.ELYSIA_REQUEST_ID : void 0,\n    ...adapter.inject\n  });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/compose.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/cookies.mjs":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/cookies.mjs ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Cookie: () => (/* binding */ Cookie),\n/* harmony export */   createCookieJar: () => (/* binding */ createCookieJar),\n/* harmony export */   parseCookie: () => (/* binding */ parseCookie),\n/* harmony export */   serializeCookie: () => (/* binding */ serializeCookie)\n/* harmony export */ });\n/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cookie */ \"(rsc)/./node_modules/.pnpm/cookie@1.0.2/node_modules/cookie/dist/index.js\");\n/* harmony import */ var _deuri_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deuri.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/deuri.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/utils.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/error.mjs\");\n\n\n\n\nclass Cookie {\n  constructor(name, jar, initial = {}) {\n    this.name = name;\n    this.jar = jar;\n    this.initial = initial;\n  }\n  get cookie() {\n    return this.jar[this.name] ?? this.initial;\n  }\n  set cookie(jar) {\n    if (!(this.name in this.jar)) this.jar[this.name] = this.initial;\n    this.jar[this.name] = jar;\n  }\n  get setCookie() {\n    if (!(this.name in this.jar)) this.jar[this.name] = this.initial;\n    return this.jar[this.name];\n  }\n  set setCookie(jar) {\n    this.cookie = jar;\n  }\n  get value() {\n    return this.cookie.value;\n  }\n  set value(value) {\n    this.setCookie.value = value;\n  }\n  get expires() {\n    return this.cookie.expires;\n  }\n  set expires(expires) {\n    this.setCookie.expires = expires;\n  }\n  get maxAge() {\n    return this.cookie.maxAge;\n  }\n  set maxAge(maxAge) {\n    this.setCookie.maxAge = maxAge;\n  }\n  get domain() {\n    return this.cookie.domain;\n  }\n  set domain(domain) {\n    this.setCookie.domain = domain;\n  }\n  get path() {\n    return this.cookie.path;\n  }\n  set path(path) {\n    this.setCookie.path = path;\n  }\n  get secure() {\n    return this.cookie.secure;\n  }\n  set secure(secure) {\n    this.setCookie.secure = secure;\n  }\n  get httpOnly() {\n    return this.cookie.httpOnly;\n  }\n  set httpOnly(httpOnly) {\n    this.setCookie.httpOnly = httpOnly;\n  }\n  get sameSite() {\n    return this.cookie.sameSite;\n  }\n  set sameSite(sameSite) {\n    this.setCookie.sameSite = sameSite;\n  }\n  get priority() {\n    return this.cookie.priority;\n  }\n  set priority(priority) {\n    this.setCookie.priority = priority;\n  }\n  get partitioned() {\n    return this.cookie.partitioned;\n  }\n  set partitioned(partitioned) {\n    this.setCookie.partitioned = partitioned;\n  }\n  get secrets() {\n    return this.cookie.secrets;\n  }\n  set secrets(secrets) {\n    this.setCookie.secrets = secrets;\n  }\n  update(config) {\n    this.setCookie = Object.assign(\n      this.cookie,\n      typeof config === \"function\" ? config(this.cookie) : config\n    );\n    return this;\n  }\n  set(config) {\n    this.setCookie = Object.assign(\n      {\n        ...this.initial,\n        value: this.value\n      },\n      typeof config === \"function\" ? config(this.cookie) : config\n    );\n    return this;\n  }\n  remove() {\n    if (this.value === void 0) return;\n    this.set({\n      expires: /* @__PURE__ */ new Date(0),\n      maxAge: 0,\n      value: \"\"\n    });\n    return this;\n  }\n  toString() {\n    return typeof this.value === \"object\" ? JSON.stringify(this.value) : this.value?.toString() ?? \"\";\n  }\n}\nconst createCookieJar = (set, store, initial) => {\n  if (!set.cookie) set.cookie = {};\n  return new Proxy(store, {\n    get(_, key) {\n      if (key in store)\n        return new Cookie(\n          key,\n          set.cookie,\n          Object.assign({}, initial ?? {}, store[key])\n        );\n      return new Cookie(\n        key,\n        set.cookie,\n        Object.assign({}, initial)\n      );\n    }\n  });\n};\nconst parseCookie = async (set, cookieString, {\n  secrets,\n  sign,\n  ...initial\n} = {}) => {\n  if (!cookieString) return createCookieJar(set, {}, initial);\n  const isStringKey = typeof secrets === \"string\";\n  if (sign && sign !== true && !Array.isArray(sign)) sign = [sign];\n  const jar = {};\n  const cookies = (0,cookie__WEBPACK_IMPORTED_MODULE_0__.parse)(cookieString);\n  for (const [name, v] of Object.entries(cookies)) {\n    if (v === void 0) continue;\n    let value = (0,_deuri_mjs__WEBPACK_IMPORTED_MODULE_1__.decode)(v);\n    if (sign === true || sign?.includes(name)) {\n      if (!secrets)\n        throw new Error(\"No secret is provided to cookie plugin\");\n      if (isStringKey) {\n        const temp = await (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.unsignCookie)(value, secrets);\n        if (temp === false) throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.InvalidCookieSignature(name);\n        value = temp;\n      } else {\n        let decoded = true;\n        for (let i = 0; i < secrets.length; i++) {\n          const temp = await (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.unsignCookie)(value, secrets[i]);\n          if (temp !== false) {\n            decoded = true;\n            value = temp;\n            break;\n          }\n        }\n        if (!decoded) throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.InvalidCookieSignature(name);\n      }\n    }\n    jar[name] = {\n      value\n    };\n  }\n  return createCookieJar(set, jar, initial);\n};\nconst serializeCookie = (cookies) => {\n  if (!cookies || !(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.isNotEmpty)(cookies)) return void 0;\n  const set = [];\n  for (const [key, property] of Object.entries(cookies)) {\n    if (!key || !property) continue;\n    const value = property.value;\n    if (value === void 0 || value === null) continue;\n    set.push(\n      (0,cookie__WEBPACK_IMPORTED_MODULE_0__.serialize)(\n        key,\n        typeof value === \"object\" ? JSON.stringify(value) : value + \"\",\n        property\n      )\n    );\n  }\n  if (set.length === 0) return void 0;\n  if (set.length === 1) return set[0];\n  return set;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vZWx5c2lhQDEuMi4yNV9Ac2luY2xhaXIrdHlwZWJveEAwLjM0LjMzX3R5cGVzY3JpcHRANS44LjMvbm9kZV9tb2R1bGVzL2VseXNpYS9kaXN0L2Nvb2tpZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTBDO0FBQ2M7QUFDSjtBQUNGO0FBQ2xEO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGVBQWU7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxJQUFJO0FBQ04sbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw2Q0FBSztBQUN2QjtBQUNBO0FBQ0EsZ0JBQWdCLGtEQUFrQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix3REFBWTtBQUN2QyxzQ0FBc0MsOERBQXNCO0FBQzVEO0FBQ0EsUUFBUTtBQUNSO0FBQ0Esd0JBQXdCLG9CQUFvQjtBQUM1Qyw2QkFBNkIsd0RBQVk7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDhEQUFzQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0RBQVU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxpREFBUztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUUiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbG9saGFcXERlc2t0b3BcXERFVlxcY29kaW5nLmdsb2JhbC13ZWJcXG5vZGVfbW9kdWxlc1xcLnBucG1cXGVseXNpYUAxLjIuMjVfQHNpbmNsYWlyK3R5cGVib3hAMC4zNC4zM190eXBlc2NyaXB0QDUuOC4zXFxub2RlX21vZHVsZXNcXGVseXNpYVxcZGlzdFxcY29va2llcy5tanN8cnNjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlLCBzZXJpYWxpemUgfSBmcm9tIFwiY29va2llXCI7XG5pbXBvcnR7IGRlY29kZSBhcyBkZWNvZGVVUklDb21wb25lbnQgfWZyb21cIi4vZGV1cmkubWpzXCI7XG5pbXBvcnR7IGlzTm90RW1wdHksIHVuc2lnbkNvb2tpZSB9ZnJvbVwiLi91dGlscy5tanNcIjtcbmltcG9ydHsgSW52YWxpZENvb2tpZVNpZ25hdHVyZSB9ZnJvbVwiLi9lcnJvci5tanNcIjtcbmNsYXNzIENvb2tpZSB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGphciwgaW5pdGlhbCA9IHt9KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmphciA9IGphcjtcbiAgICB0aGlzLmluaXRpYWwgPSBpbml0aWFsO1xuICB9XG4gIGdldCBjb29raWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuamFyW3RoaXMubmFtZV0gPz8gdGhpcy5pbml0aWFsO1xuICB9XG4gIHNldCBjb29raWUoamFyKSB7XG4gICAgaWYgKCEodGhpcy5uYW1lIGluIHRoaXMuamFyKSkgdGhpcy5qYXJbdGhpcy5uYW1lXSA9IHRoaXMuaW5pdGlhbDtcbiAgICB0aGlzLmphclt0aGlzLm5hbWVdID0gamFyO1xuICB9XG4gIGdldCBzZXRDb29raWUoKSB7XG4gICAgaWYgKCEodGhpcy5uYW1lIGluIHRoaXMuamFyKSkgdGhpcy5qYXJbdGhpcy5uYW1lXSA9IHRoaXMuaW5pdGlhbDtcbiAgICByZXR1cm4gdGhpcy5qYXJbdGhpcy5uYW1lXTtcbiAgfVxuICBzZXQgc2V0Q29va2llKGphcikge1xuICAgIHRoaXMuY29va2llID0gamFyO1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb29raWUudmFsdWU7XG4gIH1cbiAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRDb29raWUudmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBnZXQgZXhwaXJlcygpIHtcbiAgICByZXR1cm4gdGhpcy5jb29raWUuZXhwaXJlcztcbiAgfVxuICBzZXQgZXhwaXJlcyhleHBpcmVzKSB7XG4gICAgdGhpcy5zZXRDb29raWUuZXhwaXJlcyA9IGV4cGlyZXM7XG4gIH1cbiAgZ2V0IG1heEFnZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb29raWUubWF4QWdlO1xuICB9XG4gIHNldCBtYXhBZ2UobWF4QWdlKSB7XG4gICAgdGhpcy5zZXRDb29raWUubWF4QWdlID0gbWF4QWdlO1xuICB9XG4gIGdldCBkb21haW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29va2llLmRvbWFpbjtcbiAgfVxuICBzZXQgZG9tYWluKGRvbWFpbikge1xuICAgIHRoaXMuc2V0Q29va2llLmRvbWFpbiA9IGRvbWFpbjtcbiAgfVxuICBnZXQgcGF0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb29raWUucGF0aDtcbiAgfVxuICBzZXQgcGF0aChwYXRoKSB7XG4gICAgdGhpcy5zZXRDb29raWUucGF0aCA9IHBhdGg7XG4gIH1cbiAgZ2V0IHNlY3VyZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb29raWUuc2VjdXJlO1xuICB9XG4gIHNldCBzZWN1cmUoc2VjdXJlKSB7XG4gICAgdGhpcy5zZXRDb29raWUuc2VjdXJlID0gc2VjdXJlO1xuICB9XG4gIGdldCBodHRwT25seSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb29raWUuaHR0cE9ubHk7XG4gIH1cbiAgc2V0IGh0dHBPbmx5KGh0dHBPbmx5KSB7XG4gICAgdGhpcy5zZXRDb29raWUuaHR0cE9ubHkgPSBodHRwT25seTtcbiAgfVxuICBnZXQgc2FtZVNpdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29va2llLnNhbWVTaXRlO1xuICB9XG4gIHNldCBzYW1lU2l0ZShzYW1lU2l0ZSkge1xuICAgIHRoaXMuc2V0Q29va2llLnNhbWVTaXRlID0gc2FtZVNpdGU7XG4gIH1cbiAgZ2V0IHByaW9yaXR5KCkge1xuICAgIHJldHVybiB0aGlzLmNvb2tpZS5wcmlvcml0eTtcbiAgfVxuICBzZXQgcHJpb3JpdHkocHJpb3JpdHkpIHtcbiAgICB0aGlzLnNldENvb2tpZS5wcmlvcml0eSA9IHByaW9yaXR5O1xuICB9XG4gIGdldCBwYXJ0aXRpb25lZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb29raWUucGFydGl0aW9uZWQ7XG4gIH1cbiAgc2V0IHBhcnRpdGlvbmVkKHBhcnRpdGlvbmVkKSB7XG4gICAgdGhpcy5zZXRDb29raWUucGFydGl0aW9uZWQgPSBwYXJ0aXRpb25lZDtcbiAgfVxuICBnZXQgc2VjcmV0cygpIHtcbiAgICByZXR1cm4gdGhpcy5jb29raWUuc2VjcmV0cztcbiAgfVxuICBzZXQgc2VjcmV0cyhzZWNyZXRzKSB7XG4gICAgdGhpcy5zZXRDb29raWUuc2VjcmV0cyA9IHNlY3JldHM7XG4gIH1cbiAgdXBkYXRlKGNvbmZpZykge1xuICAgIHRoaXMuc2V0Q29va2llID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHRoaXMuY29va2llLFxuICAgICAgdHlwZW9mIGNvbmZpZyA9PT0gXCJmdW5jdGlvblwiID8gY29uZmlnKHRoaXMuY29va2llKSA6IGNvbmZpZ1xuICAgICk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgc2V0KGNvbmZpZykge1xuICAgIHRoaXMuc2V0Q29va2llID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHtcbiAgICAgICAgLi4udGhpcy5pbml0aWFsLFxuICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZVxuICAgICAgfSxcbiAgICAgIHR5cGVvZiBjb25maWcgPT09IFwiZnVuY3Rpb25cIiA/IGNvbmZpZyh0aGlzLmNvb2tpZSkgOiBjb25maWdcbiAgICApO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJlbW92ZSgpIHtcbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gdm9pZCAwKSByZXR1cm47XG4gICAgdGhpcy5zZXQoe1xuICAgICAgZXhwaXJlczogLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKDApLFxuICAgICAgbWF4QWdlOiAwLFxuICAgICAgdmFsdWU6IFwiXCJcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMudmFsdWUgPT09IFwib2JqZWN0XCIgPyBKU09OLnN0cmluZ2lmeSh0aGlzLnZhbHVlKSA6IHRoaXMudmFsdWU/LnRvU3RyaW5nKCkgPz8gXCJcIjtcbiAgfVxufVxuY29uc3QgY3JlYXRlQ29va2llSmFyID0gKHNldCwgc3RvcmUsIGluaXRpYWwpID0+IHtcbiAgaWYgKCFzZXQuY29va2llKSBzZXQuY29va2llID0ge307XG4gIHJldHVybiBuZXcgUHJveHkoc3RvcmUsIHtcbiAgICBnZXQoXywga2V5KSB7XG4gICAgICBpZiAoa2V5IGluIHN0b3JlKVxuICAgICAgICByZXR1cm4gbmV3IENvb2tpZShcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgc2V0LmNvb2tpZSxcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsID8/IHt9LCBzdG9yZVtrZXldKVxuICAgICAgICApO1xuICAgICAgcmV0dXJuIG5ldyBDb29raWUoXG4gICAgICAgIGtleSxcbiAgICAgICAgc2V0LmNvb2tpZSxcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgaW5pdGlhbClcbiAgICAgICk7XG4gICAgfVxuICB9KTtcbn07XG5jb25zdCBwYXJzZUNvb2tpZSA9IGFzeW5jIChzZXQsIGNvb2tpZVN0cmluZywge1xuICBzZWNyZXRzLFxuICBzaWduLFxuICAuLi5pbml0aWFsXG59ID0ge30pID0+IHtcbiAgaWYgKCFjb29raWVTdHJpbmcpIHJldHVybiBjcmVhdGVDb29raWVKYXIoc2V0LCB7fSwgaW5pdGlhbCk7XG4gIGNvbnN0IGlzU3RyaW5nS2V5ID0gdHlwZW9mIHNlY3JldHMgPT09IFwic3RyaW5nXCI7XG4gIGlmIChzaWduICYmIHNpZ24gIT09IHRydWUgJiYgIUFycmF5LmlzQXJyYXkoc2lnbikpIHNpZ24gPSBbc2lnbl07XG4gIGNvbnN0IGphciA9IHt9O1xuICBjb25zdCBjb29raWVzID0gcGFyc2UoY29va2llU3RyaW5nKTtcbiAgZm9yIChjb25zdCBbbmFtZSwgdl0gb2YgT2JqZWN0LmVudHJpZXMoY29va2llcykpIHtcbiAgICBpZiAodiA9PT0gdm9pZCAwKSBjb250aW51ZTtcbiAgICBsZXQgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQodik7XG4gICAgaWYgKHNpZ24gPT09IHRydWUgfHwgc2lnbj8uaW5jbHVkZXMobmFtZSkpIHtcbiAgICAgIGlmICghc2VjcmV0cylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc2VjcmV0IGlzIHByb3ZpZGVkIHRvIGNvb2tpZSBwbHVnaW5cIik7XG4gICAgICBpZiAoaXNTdHJpbmdLZXkpIHtcbiAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IHVuc2lnbkNvb2tpZSh2YWx1ZSwgc2VjcmV0cyk7XG4gICAgICAgIGlmICh0ZW1wID09PSBmYWxzZSkgdGhyb3cgbmV3IEludmFsaWRDb29raWVTaWduYXR1cmUobmFtZSk7XG4gICAgICAgIHZhbHVlID0gdGVtcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBkZWNvZGVkID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWNyZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IHVuc2lnbkNvb2tpZSh2YWx1ZSwgc2VjcmV0c1tpXSk7XG4gICAgICAgICAgaWYgKHRlbXAgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWNvZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhbHVlID0gdGVtcDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlY29kZWQpIHRocm93IG5ldyBJbnZhbGlkQ29va2llU2lnbmF0dXJlKG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBqYXJbbmFtZV0gPSB7XG4gICAgICB2YWx1ZVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNvb2tpZUphcihzZXQsIGphciwgaW5pdGlhbCk7XG59O1xuY29uc3Qgc2VyaWFsaXplQ29va2llID0gKGNvb2tpZXMpID0+IHtcbiAgaWYgKCFjb29raWVzIHx8ICFpc05vdEVtcHR5KGNvb2tpZXMpKSByZXR1cm4gdm9pZCAwO1xuICBjb25zdCBzZXQgPSBbXTtcbiAgZm9yIChjb25zdCBba2V5LCBwcm9wZXJ0eV0gb2YgT2JqZWN0LmVudHJpZXMoY29va2llcykpIHtcbiAgICBpZiAoIWtleSB8fCAhcHJvcGVydHkpIGNvbnRpbnVlO1xuICAgIGNvbnN0IHZhbHVlID0gcHJvcGVydHkudmFsdWU7XG4gICAgaWYgKHZhbHVlID09PSB2b2lkIDAgfHwgdmFsdWUgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgIHNldC5wdXNoKFxuICAgICAgc2VyaWFsaXplKFxuICAgICAgICBrZXksXG4gICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKSA6IHZhbHVlICsgXCJcIixcbiAgICAgICAgcHJvcGVydHlcbiAgICAgIClcbiAgICApO1xuICB9XG4gIGlmIChzZXQubGVuZ3RoID09PSAwKSByZXR1cm4gdm9pZCAwO1xuICBpZiAoc2V0Lmxlbmd0aCA9PT0gMSkgcmV0dXJuIHNldFswXTtcbiAgcmV0dXJuIHNldDtcbn07XG5leHBvcnQge1xuICBDb29raWUsXG4gIGNyZWF0ZUNvb2tpZUphcixcbiAgcGFyc2VDb29raWUsXG4gIHNlcmlhbGl6ZUNvb2tpZVxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/cookies.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/deuri.mjs":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/deuri.mjs ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   decodeSegment: () => (/* binding */ decodeSegment),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\nconst hex = [];\nfor (let i = 48; i < 58; i++) hex[i] = i - 48;\nfor (let i = 0; i < 6; i++)\n  hex[i + 65] = hex[i + 97] = i + 10;\nconst calcHex = (a, b) => {\n  if (a in hex && b in hex) return hex[a] << 4 | hex[b];\n  return 255;\n};\nconst type = [\n  ...new Array(128).fill(0),\n  ...new Array(16).fill(1),\n  ...new Array(16).fill(2),\n  ...new Array(32).fill(3),\n  4,\n  4,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  6,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  7,\n  8,\n  7,\n  7,\n  10,\n  9,\n  9,\n  9,\n  11,\n  4,\n  4,\n  4,\n  4,\n  4,\n  4,\n  4,\n  4,\n  4,\n  4,\n  4\n];\nconst next = [\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  12,\n  0,\n  0,\n  0,\n  0,\n  24,\n  36,\n  48,\n  60,\n  72,\n  84,\n  96,\n  0,\n  12,\n  12,\n  12,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  24,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  24,\n  24,\n  24,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  24,\n  24,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  48,\n  48,\n  48,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  48,\n  48,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  48,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n];\nconst mask = type.map(\n  (val) => [\n    127,\n    63,\n    63,\n    63,\n    0,\n    31,\n    15,\n    15,\n    15,\n    7,\n    7,\n    7\n  ][val]\n);\nconst decode = (url) => {\n  let percentPosition = url.indexOf(\"%\");\n  if (percentPosition === -1) return url;\n  let end = url.length - 3;\n  if (percentPosition > end) return null;\n  let decoded = \"\", start = 0, codepoint = 0, startOfOctets = percentPosition, state = 12, byte;\n  for (; ; ) {\n    byte = calcHex(\n      url.charCodeAt(percentPosition + 1),\n      url.charCodeAt(percentPosition + 2)\n    );\n    state = next[state + type[byte]];\n    if (state === 0) return null;\n    if (state === 12) {\n      decoded += url.substring(start, startOfOctets);\n      codepoint = codepoint << 6 | byte & mask[byte];\n      if (codepoint > 65535)\n        decoded += String.fromCharCode(\n          55232 + (codepoint >> 10),\n          56320 + (codepoint & 1023)\n        );\n      else decoded += String.fromCharCode(codepoint);\n      start = percentPosition + 3;\n      percentPosition = url.indexOf(\"%\", start);\n      if (percentPosition === -1) return decoded + url.substring(start);\n      if (percentPosition > end) return null;\n      startOfOctets = percentPosition;\n      codepoint = 0;\n    } else {\n      percentPosition += 3;\n      if (percentPosition > end || url.charCodeAt(percentPosition) !== 37)\n        return null;\n      codepoint = codepoint << 6 | byte & mask[byte];\n    }\n  }\n};\nconst encode = (str) => str.isWellFormed() ? encodeURIComponent(str) : null;\nconst decodeSegment = (url, start, end) => {\n  let percentPosition = url.indexOf(\"%\");\n  if (percentPosition === -1) return url;\n  end -= 3;\n  if (percentPosition > end) return null;\n  let decoded = \"\", codepoint = 0, startOfOctets = percentPosition, state = 12, byte;\n  for (; ; ) {\n    byte = calcHex(\n      url.charCodeAt(percentPosition + 1),\n      url.charCodeAt(percentPosition + 2)\n    );\n    state = next[state + type[byte]];\n    if (state === 0) return null;\n    if (state === 12) {\n      decoded += url.substring(start, startOfOctets);\n      codepoint = codepoint << 6 | byte & mask[byte];\n      if (codepoint > 65535)\n        decoded += String.fromCharCode(\n          55232 + (codepoint >> 10),\n          56320 + (codepoint & 1023)\n        );\n      else decoded += String.fromCharCode(codepoint);\n      start = percentPosition + 3;\n      percentPosition = url.indexOf(\"%\", start);\n      if (percentPosition === -1) return decoded + url.substring(start);\n      if (percentPosition > end) return null;\n      startOfOctets = percentPosition;\n      codepoint = 0;\n    } else {\n      percentPosition += 3;\n      if (percentPosition > end || url.charCodeAt(percentPosition) !== 37)\n        return null;\n      codepoint = codepoint << 6 | byte & mask[byte];\n    }\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/deuri.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/dynamic-handle.mjs":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/dynamic-handle.mjs ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDynamicErrorHandler: () => (/* binding */ createDynamicErrorHandler),\n/* harmony export */   createDynamicHandler: () => (/* binding */ createDynamicHandler)\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/error.mjs\");\n/* harmony import */ var _fast_querystring_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fast-querystring.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/fast-querystring.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/utils.mjs\");\n/* harmony import */ var _cookies_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cookies.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/cookies.mjs\");\n/* harmony import */ var _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sinclair/typebox/value */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/value/transform/decode.mjs\");\n\n\n\n\n\nconst injectDefaultValues = (typeChecker, obj) => {\n  for (const [key, keySchema] of Object.entries(\n    // @ts-expect-error private\n    typeChecker.schema.properties\n  )) {\n    obj[key] ??= keySchema.default;\n  }\n};\nconst createDynamicHandler = (app) => {\n  const { mapResponse, mapEarlyResponse } = app[\"~adapter\"].handler;\n  return async (request) => {\n    const url = request.url, s = url.indexOf(\"/\", 11), qi = url.indexOf(\"?\", s + 1), path = qi === -1 ? url.substring(s) : url.substring(s, qi);\n    const set = {\n      cookie: {},\n      status: 200,\n      headers: {}\n    };\n    const context = Object.assign(\n      {},\n      // @ts-expect-error\n      app.singleton.decorator,\n      {\n        set,\n        // @ts-expect-error\n        store: app.singleton.store,\n        request,\n        path,\n        qi,\n        error: _error_mjs__WEBPACK_IMPORTED_MODULE_0__.error,\n        redirect: _utils_mjs__WEBPACK_IMPORTED_MODULE_2__.redirect\n      }\n    );\n    try {\n      if (app.event.request)\n        for (let i = 0; i < app.event.request.length; i++) {\n          const onRequest = app.event.request[i].fn;\n          let response2 = onRequest(context);\n          if (response2 instanceof Promise) response2 = await response2;\n          response2 = mapEarlyResponse(response2, set);\n          if (response2) return context.response = response2;\n        }\n      const handler = app.router.dynamic.find(request.method, path) ?? app.router.dynamic.find(\"ALL\", path);\n      if (!handler) throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.NotFoundError();\n      const { handle, hooks, validator, content, route } = handler.store;\n      let body;\n      if (request.method !== \"GET\" && request.method !== \"HEAD\") {\n        if (content) {\n          switch (content) {\n            case \"application/json\":\n              body = await request.json();\n              break;\n            case \"text/plain\":\n              body = await request.text();\n              break;\n            case \"application/x-www-form-urlencoded\":\n              body = (0,_fast_querystring_mjs__WEBPACK_IMPORTED_MODULE_1__.parseQuery)(await request.text());\n              break;\n            case \"application/octet-stream\":\n              body = await request.arrayBuffer();\n              break;\n            case \"multipart/form-data\":\n              body = {};\n              const form = await request.formData();\n              for (const key of form.keys()) {\n                if (body[key]) continue;\n                const value = form.getAll(key);\n                if (value.length === 1) body[key] = value[0];\n                else body[key] = value;\n              }\n              break;\n          }\n        } else {\n          let contentType = request.headers.get(\"content-type\");\n          if (contentType) {\n            const index = contentType.indexOf(\";\");\n            if (index !== -1)\n              contentType = contentType.slice(0, index);\n            context.contentType = contentType;\n            if (hooks.parse)\n              for (let i = 0; i < hooks.parse.length; i++) {\n                const hook = hooks.parse[i].fn;\n                let temp = hook(context, contentType);\n                if (temp instanceof Promise) temp = await temp;\n                if (temp) {\n                  body = temp;\n                  break;\n                }\n              }\n            delete context.contentType;\n            if (body === void 0) {\n              switch (contentType) {\n                case \"application/json\":\n                  body = await request.json();\n                  break;\n                case \"text/plain\":\n                  body = await request.text();\n                  break;\n                case \"application/x-www-form-urlencoded\":\n                  body = (0,_fast_querystring_mjs__WEBPACK_IMPORTED_MODULE_1__.parseQuery)(await request.text());\n                  break;\n                case \"application/octet-stream\":\n                  body = await request.arrayBuffer();\n                  break;\n                case \"multipart/form-data\":\n                  body = {};\n                  const form = await request.formData();\n                  for (const key of form.keys()) {\n                    if (body[key]) continue;\n                    const value = form.getAll(key);\n                    if (value.length === 1)\n                      body[key] = value[0];\n                    else body[key] = value;\n                  }\n                  break;\n              }\n            }\n          }\n        }\n      }\n      context.route = route;\n      context.body = body;\n      context.params = handler?.params || void 0;\n      context.query = qi === -1 ? {} : (0,_fast_querystring_mjs__WEBPACK_IMPORTED_MODULE_1__.parseQuery)(url.substring(qi + 1));\n      context.headers = {};\n      for (const [key, value] of request.headers.entries())\n        context.headers[key] = value;\n      const cookieMeta = Object.assign(\n        {},\n        app.config?.cookie,\n        // @ts-expect-error\n        validator?.cookie?.config\n      );\n      const cookieHeaderValue = request.headers.get(\"cookie\");\n      context.cookie = await (0,_cookies_mjs__WEBPACK_IMPORTED_MODULE_3__.parseCookie)(\n        context.set,\n        cookieHeaderValue,\n        cookieMeta ? {\n          secrets: cookieMeta.secrets !== void 0 ? typeof cookieMeta.secrets === \"string\" ? cookieMeta.secrets : cookieMeta.secrets.join(\",\") : void 0,\n          sign: cookieMeta.sign === true ? true : cookieMeta.sign !== void 0 ? typeof cookieMeta.sign === \"string\" ? cookieMeta.sign : cookieMeta.sign.join(\",\") : void 0\n        } : void 0\n      );\n      const headerValidator = validator?.createHeaders?.();\n      if (headerValidator)\n        injectDefaultValues(headerValidator, context.headers);\n      const paramsValidator = validator?.createParams?.();\n      if (paramsValidator)\n        injectDefaultValues(paramsValidator, context.params);\n      const queryValidator = validator?.createQuery?.();\n      if (queryValidator)\n        injectDefaultValues(queryValidator, context.query);\n      if (hooks.transform)\n        for (let i = 0; i < hooks.transform.length; i++) {\n          const hook = hooks.transform[i];\n          const operation = hook.fn(context);\n          if (hook.subType === \"derive\") {\n            if (operation instanceof Promise)\n              Object.assign(context, await operation);\n            else Object.assign(context, operation);\n          } else if (operation instanceof Promise) await operation;\n        }\n      if (validator) {\n        if (headerValidator) {\n          const _header = structuredClone(context.headers);\n          for (const [key, value] of request.headers)\n            _header[key] = value;\n          if (validator.headers.Check(_header) === false)\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\n              \"header\",\n              validator.headers,\n              _header\n            );\n        } else if (validator.headers?.Decode)\n          context.headers = validator.headers.Decode(context.headers);\n        if (paramsValidator?.Check(context.params) === false) {\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\n            \"params\",\n            validator.params,\n            context.params\n          );\n        } else if (validator.params?.Decode)\n          context.params = validator.params.Decode(context.params);\n        if (queryValidator?.Check(context.query) === false)\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\n            \"query\",\n            validator.query,\n            context.query\n          );\n        else if (validator.query?.Decode)\n          context.query = validator.query.Decode(context.query);\n        if (validator.createCookie?.()) {\n          let cookieValue = {};\n          for (const [key, value] of Object.entries(context.cookie))\n            cookieValue[key] = value.value;\n          if (validator.cookie.Check(cookieValue) === false)\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\n              \"cookie\",\n              validator.cookie,\n              cookieValue\n            );\n          else if (validator.cookie?.Decode)\n            cookieValue = validator.cookie.Decode(\n              cookieValue\n            );\n        }\n        if (validator.createBody?.()?.Check(body) === false)\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"body\", validator.body, body);\n        else if (validator.body?.Decode)\n          context.body = validator.body.Decode(body);\n      }\n      if (hooks.beforeHandle)\n        for (let i = 0; i < hooks.beforeHandle.length; i++) {\n          const hook = hooks.beforeHandle[i];\n          let response2 = hook.fn(context);\n          if (hook.subType === \"resolve\") {\n            if (response2 instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_0__.ElysiaCustomStatusResponse) {\n              const result = mapEarlyResponse(\n                response2,\n                context.set\n              );\n              if (result)\n                return context.response = result;\n            }\n            if (response2 instanceof Promise)\n              Object.assign(context, await response2);\n            else Object.assign(context, response2);\n            continue;\n          } else if (response2 instanceof Promise)\n            response2 = await response2;\n          if (response2 !== void 0) {\n            ;\n            context.response = response2;\n            if (hooks.afterHandle)\n              for (let i2 = 0; i2 < hooks.afterHandle.length; i2++) {\n                let newResponse = hooks.afterHandle[i2].fn(\n                  context\n                );\n                if (newResponse instanceof Promise)\n                  newResponse = await newResponse;\n                if (newResponse) response2 = newResponse;\n              }\n            const result = mapEarlyResponse(response2, context.set);\n            if (result) return context.response = result;\n          }\n        }\n      let response = typeof handle === \"function\" ? handle(context) : handle;\n      if (response instanceof Promise) response = await response;\n      if (hooks.afterHandle)\n        if (!hooks.afterHandle.length) {\n          const status = response instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_0__.ElysiaCustomStatusResponse ? response.code : set.status ? typeof set.status === \"string\" ? _utils_mjs__WEBPACK_IMPORTED_MODULE_2__.StatusMap[set.status] : set.status : 200;\n          const responseValidator = validator?.createResponse?.()?.[status];\n          if (responseValidator?.Check(response) === false)\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\n              \"response\",\n              responseValidator,\n              response\n            );\n          else if (responseValidator?.Decode)\n            response = responseValidator.Decode(response);\n        } else {\n          ;\n          context.response = response;\n          for (let i = 0; i < hooks.afterHandle.length; i++) {\n            let newResponse = hooks.afterHandle[i].fn(\n              context\n            );\n            if (newResponse instanceof Promise)\n              newResponse = await newResponse;\n            const result = mapEarlyResponse(\n              newResponse,\n              context.set\n            );\n            if (result !== void 0) {\n              const responseValidator = (\n                // @ts-expect-error\n                validator?.response?.[result.status]\n              );\n              if (responseValidator?.Check(result) === false)\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\n                  \"response\",\n                  responseValidator,\n                  result\n                );\n              else if (responseValidator?.Decode)\n                response = responseValidator.Decode(response);\n              return context.response = result;\n            }\n          }\n        }\n      if (context.set.cookie && cookieMeta?.sign) {\n        const secret = !cookieMeta.secrets ? void 0 : typeof cookieMeta.secrets === \"string\" ? cookieMeta.secrets : cookieMeta.secrets[0];\n        if (cookieMeta.sign === true)\n          for (const [key, cookie] of Object.entries(\n            context.set.cookie\n          ))\n            context.set.cookie[key].value = await (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.signCookie)(\n              cookie.value,\n              \"${secret}\"\n            );\n        else {\n          const properties = validator?.cookie?.schema?.properties;\n          for (const name of cookieMeta.sign) {\n            if (!(name in properties)) continue;\n            if (context.set.cookie[name]?.value) {\n              context.set.cookie[name].value = await (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.signCookie)(\n                context.set.cookie[name].value,\n                secret\n              );\n            }\n          }\n        }\n      }\n      return mapResponse(context.response = response, context.set);\n    } catch (error2) {\n      const reportedError = error2 instanceof _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_4__.TransformDecodeError && error2.error ? error2.error : error2;\n      return app.handleError(context, reportedError);\n    } finally {\n      if (app.event.afterResponse)\n        for (const afterResponse of app.event.afterResponse)\n          await afterResponse.fn(context);\n    }\n  };\n};\nconst createDynamicErrorHandler = (app) => {\n  const { mapResponse } = app[\"~adapter\"].handler;\n  return async (context, error2) => {\n    const errorContext = Object.assign(context, { error: error2, code: error2.code });\n    errorContext.set = context.set;\n    if (app.event.error)\n      for (let i = 0; i < app.event.error.length; i++) {\n        const hook = app.event.error[i];\n        let response = hook.fn(errorContext);\n        if (response instanceof Promise) response = await response;\n        if (response !== void 0 && response !== null)\n          return context.response = mapResponse(\n            response,\n            context.set\n          );\n      }\n    return new Response(\n      typeof error2.cause === \"string\" ? error2.cause : error2.message,\n      {\n        headers: context.set.headers,\n        status: error2.status ?? 500\n      }\n    );\n  };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/dynamic-handle.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/error.mjs":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/error.mjs ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_CODE: () => (/* binding */ ERROR_CODE),\n/* harmony export */   ElysiaCustomStatusResponse: () => (/* binding */ ElysiaCustomStatusResponse),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   InvalidCookieSignature: () => (/* binding */ InvalidCookieSignature),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   ParseError: () => (/* binding */ ParseError),\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   isProduction: () => (/* binding */ isProduction),\n/* harmony export */   mapValueError: () => (/* binding */ mapValueError)\n/* harmony export */ });\n/* harmony import */ var _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sinclair/typebox/value */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/errors/errors.mjs\");\n/* harmony import */ var _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sinclair/typebox/value */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/value/create/create.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/utils.mjs\");\n\n\nconst env = typeof Bun !== \"undefined\" ? Bun.env : typeof process !== \"undefined\" ? process?.env : void 0;\nconst ERROR_CODE = Symbol(\"ElysiaErrorCode\");\nconst isProduction = (env?.NODE_ENV ?? env?.ENV) === \"production\";\nclass ElysiaCustomStatusResponse {\n  constructor(code, response) {\n    const res = response ?? (code in _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.InvertedStatusMap ? (\n      // @ts-expect-error Always correct\n      _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.InvertedStatusMap[code]\n    ) : code);\n    this.code = _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.StatusMap[code] ?? code;\n    this.response = res;\n  }\n}\nconst error = (code, response) => new ElysiaCustomStatusResponse(code, response);\nclass InternalServerError extends Error {\n  constructor(message) {\n    super(message ?? \"INTERNAL_SERVER_ERROR\");\n    this.code = \"INTERNAL_SERVER_ERROR\";\n    this.status = 500;\n  }\n}\nclass NotFoundError extends Error {\n  constructor(message) {\n    super(message ?? \"NOT_FOUND\");\n    this.code = \"NOT_FOUND\";\n    this.status = 404;\n  }\n}\nclass ParseError extends Error {\n  constructor() {\n    super(\"Bad Request\");\n    this.code = \"PARSE\";\n    this.status = 400;\n  }\n}\nclass InvalidCookieSignature extends Error {\n  constructor(key, message) {\n    super(message ?? `\"${key}\" has invalid cookie signature`);\n    this.key = key;\n    this.code = \"INVALID_COOKIE_SIGNATURE\";\n    this.status = 400;\n  }\n}\nconst mapValueError = (error2) => {\n  if (!error2)\n    return {\n      summary: void 0\n    };\n  const { message, path, value, type } = error2;\n  const property = path.slice(1).replaceAll(\"/\", \".\");\n  const isRoot = path === \"\";\n  switch (type) {\n    case 42:\n      return {\n        ...error2,\n        summary: isRoot ? `Value should not be provided` : `Property '${property}' should not be provided`\n      };\n    case 45:\n      return {\n        ...error2,\n        summary: isRoot ? `Value is missing` : `Property '${property}' is missing`\n      };\n    case 50:\n      const quoteIndex = message.indexOf(\"'\");\n      const format = message.slice(\n        quoteIndex + 1,\n        message.indexOf(\"'\", quoteIndex + 1)\n      );\n      return {\n        ...error2,\n        summary: isRoot ? `Value should be an email` : `Property '${property}' should be ${format}`\n      };\n    case 54:\n      return {\n        ...error2,\n        summary: `${message.slice(\n          0,\n          9\n        )} property '${property}' to be ${message.slice(\n          8\n        )} but found: ${value}`\n      };\n    case 62:\n      const union = error2.schema.anyOf.map((x) => `'${x?.format ?? x.type}'`).join(\", \");\n      return {\n        ...error2,\n        summary: isRoot ? `Value should be one of ${union}` : `Property '${property}' should be one of: ${union}`\n      };\n    default:\n      return { summary: message, ...error2 };\n  }\n};\nclass ValidationError extends Error {\n  constructor(type, validator, value) {\n    if (value && typeof value === \"object\" && value instanceof ElysiaCustomStatusResponse)\n      value = value.response;\n    const error2 = isProduction ? void 0 : \"Errors\" in validator ? validator.Errors(value).First() : _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_1__.Errors(validator, value).First();\n    const customError = error2?.schema?.message || error2?.schema?.error !== void 0 ? typeof error2.schema.error === \"function\" ? error2.schema.error({\n      type,\n      validator,\n      value,\n      get errors() {\n        return [...validator.Errors(value)].map(\n          mapValueError\n        );\n      }\n    }) : error2.schema.error : void 0;\n    const accessor = error2?.path || \"root\";\n    let message = \"\";\n    if (customError !== void 0) {\n      message = typeof customError === \"object\" ? JSON.stringify(customError) : customError + \"\";\n    } else if (isProduction) {\n      message = JSON.stringify({\n        type: \"validation\",\n        on: type,\n        summary: mapValueError(error2).summary,\n        message: error2?.message,\n        found: value\n      });\n    } else {\n      const schema = validator?.schema ?? validator;\n      const errors = \"Errors\" in validator ? [...validator.Errors(value)].map(mapValueError) : [..._sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_1__.Errors(validator, value)].map(mapValueError);\n      let expected;\n      try {\n        expected = _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_2__.Create(schema);\n      } catch (error3) {\n        expected = {\n          type: \"Could not create expected value\",\n          // @ts-expect-error\n          message: error3?.message,\n          error: error3\n        };\n      }\n      message = JSON.stringify(\n        {\n          type: \"validation\",\n          on: type,\n          summary: mapValueError(error2).summary,\n          property: accessor,\n          message: error2?.message,\n          expected,\n          found: value,\n          errors\n        },\n        null,\n        2\n      );\n    }\n    super(message);\n    this.type = type;\n    this.validator = validator;\n    this.value = value;\n    this.code = \"VALIDATION\";\n    this.status = 422;\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n  get all() {\n    return \"Errors\" in this.validator ? [...this.validator.Errors(this.value)].map(mapValueError) : (\n      // @ts-ignore\n      [..._sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_1__.Errors(this.validator, this.value)].map(mapValueError)\n    );\n  }\n  static simplifyModel(validator) {\n    const model = \"schema\" in validator ? validator.schema : validator;\n    try {\n      return _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_2__.Create(model);\n    } catch {\n      return model;\n    }\n  }\n  get model() {\n    return ValidationError.simplifyModel(this.validator);\n  }\n  toResponse(headers) {\n    return new Response(this.message, {\n      status: 400,\n      headers: {\n        ...headers,\n        \"content-type\": \"application/json\"\n      }\n    });\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/error.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/fast-querystring.mjs":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/fast-querystring.mjs ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseQuery: () => (/* binding */ parseQuery),\n/* harmony export */   parseQueryFromURL: () => (/* binding */ parseQueryFromURL)\n/* harmony export */ });\n/* harmony import */ var _deuri_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deuri.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/deuri.mjs\");\n\nconst plusRegex = /\\+/g;\nfunction parseQueryFromURL(input) {\n  const result = {};\n  if (typeof input !== \"string\") return result;\n  let key = \"\";\n  let value = \"\";\n  let startingIndex = -1;\n  let equalityIndex = -1;\n  let flags = 0;\n  const l = input.length;\n  for (let i = 0; i < l; i++) {\n    switch (input.charCodeAt(i)) {\n      case 38:\n        const hasBothKeyValuePair = equalityIndex > startingIndex;\n        if (!hasBothKeyValuePair) equalityIndex = i;\n        key = input.slice(startingIndex + 1, equalityIndex);\n        if (hasBothKeyValuePair || key.length > 0) {\n          if (flags & 1) key = key.replace(plusRegex, \" \");\n          if (flags & 2) key = (0,_deuri_mjs__WEBPACK_IMPORTED_MODULE_0__.decode)(key) || key;\n          if (!result[key]) {\n            if (hasBothKeyValuePair) {\n              value = input.slice(equalityIndex + 1, i);\n              if (flags & 4)\n                value = value.replace(plusRegex, \" \");\n              if (flags & 8)\n                value = (0,_deuri_mjs__WEBPACK_IMPORTED_MODULE_0__.decode)(value) || value;\n            }\n            result[key] = value;\n          }\n        }\n        key = \"\";\n        value = \"\";\n        startingIndex = i;\n        equalityIndex = i;\n        flags = 0;\n        break;\n      case 61:\n        if (equalityIndex <= startingIndex) equalityIndex = i;\n        else flags |= 8;\n        break;\n      case 43:\n        if (equalityIndex > startingIndex) flags |= 4;\n        else flags |= 1;\n        break;\n      case 37:\n        if (equalityIndex > startingIndex) flags |= 8;\n        else flags |= 2;\n        break;\n    }\n  }\n  if (startingIndex < l) {\n    const hasBothKeyValuePair = equalityIndex > startingIndex;\n    key = input.slice(\n      startingIndex + 1,\n      hasBothKeyValuePair ? equalityIndex : l\n    );\n    if (hasBothKeyValuePair || key.length > 0) {\n      if (flags & 1) key = key.replace(plusRegex, \" \");\n      if (flags & 2) key = (0,_deuri_mjs__WEBPACK_IMPORTED_MODULE_0__.decode)(key) || key;\n      if (!result[key]) {\n        if (hasBothKeyValuePair) {\n          value = input.slice(equalityIndex + 1, l);\n          if (flags & 4)\n            value = value.replace(plusRegex, \" \");\n          if (flags & 8) value = (0,_deuri_mjs__WEBPACK_IMPORTED_MODULE_0__.decode)(value) || value;\n        }\n        result[key] = value;\n      }\n    }\n  }\n  return result;\n}\nconst parseQuery = (input) => {\n  const result = {};\n  if (typeof input !== \"string\") return result;\n  const inputLength = input.length;\n  let key = \"\";\n  let value = \"\";\n  let startingIndex = -1;\n  let equalityIndex = -1;\n  let shouldDecodeKey = false;\n  let shouldDecodeValue = false;\n  let keyHasPlus = false;\n  let valueHasPlus = false;\n  let hasBothKeyValuePair = false;\n  let c = 0;\n  for (let i = 0; i < inputLength + 1; i++) {\n    if (i !== inputLength) c = input.charCodeAt(i);\n    else c = 38;\n    switch (c) {\n      case 38: {\n        hasBothKeyValuePair = equalityIndex > startingIndex;\n        if (!hasBothKeyValuePair) equalityIndex = i;\n        key = input.slice(startingIndex + 1, equalityIndex);\n        if (hasBothKeyValuePair || key.length > 0) {\n          if (keyHasPlus) key = key.replace(plusRegex, \" \");\n          if (shouldDecodeKey) key = (0,_deuri_mjs__WEBPACK_IMPORTED_MODULE_0__.decode)(key) || key;\n          if (hasBothKeyValuePair) {\n            value = input.slice(equalityIndex + 1, i);\n            if (valueHasPlus) value = value.replace(plusRegex, \" \");\n            if (shouldDecodeValue)\n              value = (0,_deuri_mjs__WEBPACK_IMPORTED_MODULE_0__.decode)(value) || value;\n          }\n          const currentValue = result[key];\n          if (currentValue === void 0)\n            result[key] = value;\n          else {\n            if (currentValue.pop) currentValue.push(value);\n            else result[key] = [currentValue, value];\n          }\n        }\n        value = \"\";\n        startingIndex = i;\n        equalityIndex = i;\n        shouldDecodeKey = false;\n        shouldDecodeValue = false;\n        keyHasPlus = false;\n        valueHasPlus = false;\n        break;\n      }\n      // Check '='\n      case 61:\n        if (equalityIndex <= startingIndex) equalityIndex = i;\n        else shouldDecodeValue = true;\n        break;\n      // Check '+', and remember to replace it with empty space.\n      case 43:\n        if (equalityIndex > startingIndex) valueHasPlus = true;\n        else keyHasPlus = true;\n        break;\n      // Check '%' character for encoding\n      case 37:\n        if (equalityIndex > startingIndex) shouldDecodeValue = true;\n        else shouldDecodeKey = true;\n        break;\n    }\n  }\n  return result;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vZWx5c2lhQDEuMi4yNV9Ac2luY2xhaXIrdHlwZWJveEAwLjM0LjMzX3R5cGVzY3JpcHRANS44LjMvbm9kZV9tb2R1bGVzL2VseXNpYS9kaXN0L2Zhc3QtcXVlcnlzdHJpbmcubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixPQUFPO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGtEQUFVO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrREFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGtEQUFVO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsa0RBQVU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHFCQUFxQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsa0RBQVU7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isa0RBQVU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJRSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxsb2xoYVxcRGVza3RvcFxcREVWXFxjb2RpbmcuZ2xvYmFsLXdlYlxcbm9kZV9tb2R1bGVzXFwucG5wbVxcZWx5c2lhQDEuMi4yNV9Ac2luY2xhaXIrdHlwZWJveEAwLjM0LjMzX3R5cGVzY3JpcHRANS44LjNcXG5vZGVfbW9kdWxlc1xcZWx5c2lhXFxkaXN0XFxmYXN0LXF1ZXJ5c3RyaW5nLm1qc3xyc2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0eyBkZWNvZGUgYXMgZmFzdERlY29kZSB9ZnJvbVwiLi9kZXVyaS5tanNcIjtcbmNvbnN0IHBsdXNSZWdleCA9IC9cXCsvZztcbmZ1bmN0aW9uIHBhcnNlUXVlcnlGcm9tVVJMKGlucHV0KSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBpZiAodHlwZW9mIGlucHV0ICE9PSBcInN0cmluZ1wiKSByZXR1cm4gcmVzdWx0O1xuICBsZXQga2V5ID0gXCJcIjtcbiAgbGV0IHZhbHVlID0gXCJcIjtcbiAgbGV0IHN0YXJ0aW5nSW5kZXggPSAtMTtcbiAgbGV0IGVxdWFsaXR5SW5kZXggPSAtMTtcbiAgbGV0IGZsYWdzID0gMDtcbiAgY29uc3QgbCA9IGlucHV0Lmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICBzd2l0Y2ggKGlucHV0LmNoYXJDb2RlQXQoaSkpIHtcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIGNvbnN0IGhhc0JvdGhLZXlWYWx1ZVBhaXIgPSBlcXVhbGl0eUluZGV4ID4gc3RhcnRpbmdJbmRleDtcbiAgICAgICAgaWYgKCFoYXNCb3RoS2V5VmFsdWVQYWlyKSBlcXVhbGl0eUluZGV4ID0gaTtcbiAgICAgICAga2V5ID0gaW5wdXQuc2xpY2Uoc3RhcnRpbmdJbmRleCArIDEsIGVxdWFsaXR5SW5kZXgpO1xuICAgICAgICBpZiAoaGFzQm90aEtleVZhbHVlUGFpciB8fCBrZXkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChmbGFncyAmIDEpIGtleSA9IGtleS5yZXBsYWNlKHBsdXNSZWdleCwgXCIgXCIpO1xuICAgICAgICAgIGlmIChmbGFncyAmIDIpIGtleSA9IGZhc3REZWNvZGUoa2V5KSB8fCBrZXk7XG4gICAgICAgICAgaWYgKCFyZXN1bHRba2V5XSkge1xuICAgICAgICAgICAgaWYgKGhhc0JvdGhLZXlWYWx1ZVBhaXIpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSBpbnB1dC5zbGljZShlcXVhbGl0eUluZGV4ICsgMSwgaSk7XG4gICAgICAgICAgICAgIGlmIChmbGFncyAmIDQpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHBsdXNSZWdleCwgXCIgXCIpO1xuICAgICAgICAgICAgICBpZiAoZmxhZ3MgJiA4KVxuICAgICAgICAgICAgICAgIHZhbHVlID0gZmFzdERlY29kZSh2YWx1ZSkgfHwgdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXkgPSBcIlwiO1xuICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICAgIHN0YXJ0aW5nSW5kZXggPSBpO1xuICAgICAgICBlcXVhbGl0eUluZGV4ID0gaTtcbiAgICAgICAgZmxhZ3MgPSAwO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNjE6XG4gICAgICAgIGlmIChlcXVhbGl0eUluZGV4IDw9IHN0YXJ0aW5nSW5kZXgpIGVxdWFsaXR5SW5kZXggPSBpO1xuICAgICAgICBlbHNlIGZsYWdzIHw9IDg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0MzpcbiAgICAgICAgaWYgKGVxdWFsaXR5SW5kZXggPiBzdGFydGluZ0luZGV4KSBmbGFncyB8PSA0O1xuICAgICAgICBlbHNlIGZsYWdzIHw9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzNzpcbiAgICAgICAgaWYgKGVxdWFsaXR5SW5kZXggPiBzdGFydGluZ0luZGV4KSBmbGFncyB8PSA4O1xuICAgICAgICBlbHNlIGZsYWdzIHw9IDI7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoc3RhcnRpbmdJbmRleCA8IGwpIHtcbiAgICBjb25zdCBoYXNCb3RoS2V5VmFsdWVQYWlyID0gZXF1YWxpdHlJbmRleCA+IHN0YXJ0aW5nSW5kZXg7XG4gICAga2V5ID0gaW5wdXQuc2xpY2UoXG4gICAgICBzdGFydGluZ0luZGV4ICsgMSxcbiAgICAgIGhhc0JvdGhLZXlWYWx1ZVBhaXIgPyBlcXVhbGl0eUluZGV4IDogbFxuICAgICk7XG4gICAgaWYgKGhhc0JvdGhLZXlWYWx1ZVBhaXIgfHwga2V5Lmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChmbGFncyAmIDEpIGtleSA9IGtleS5yZXBsYWNlKHBsdXNSZWdleCwgXCIgXCIpO1xuICAgICAgaWYgKGZsYWdzICYgMikga2V5ID0gZmFzdERlY29kZShrZXkpIHx8IGtleTtcbiAgICAgIGlmICghcmVzdWx0W2tleV0pIHtcbiAgICAgICAgaWYgKGhhc0JvdGhLZXlWYWx1ZVBhaXIpIHtcbiAgICAgICAgICB2YWx1ZSA9IGlucHV0LnNsaWNlKGVxdWFsaXR5SW5kZXggKyAxLCBsKTtcbiAgICAgICAgICBpZiAoZmxhZ3MgJiA0KVxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHBsdXNSZWdleCwgXCIgXCIpO1xuICAgICAgICAgIGlmIChmbGFncyAmIDgpIHZhbHVlID0gZmFzdERlY29kZSh2YWx1ZSkgfHwgdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IHBhcnNlUXVlcnkgPSAoaW5wdXQpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09IFwic3RyaW5nXCIpIHJldHVybiByZXN1bHQ7XG4gIGNvbnN0IGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICBsZXQga2V5ID0gXCJcIjtcbiAgbGV0IHZhbHVlID0gXCJcIjtcbiAgbGV0IHN0YXJ0aW5nSW5kZXggPSAtMTtcbiAgbGV0IGVxdWFsaXR5SW5kZXggPSAtMTtcbiAgbGV0IHNob3VsZERlY29kZUtleSA9IGZhbHNlO1xuICBsZXQgc2hvdWxkRGVjb2RlVmFsdWUgPSBmYWxzZTtcbiAgbGV0IGtleUhhc1BsdXMgPSBmYWxzZTtcbiAgbGV0IHZhbHVlSGFzUGx1cyA9IGZhbHNlO1xuICBsZXQgaGFzQm90aEtleVZhbHVlUGFpciA9IGZhbHNlO1xuICBsZXQgYyA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRMZW5ndGggKyAxOyBpKyspIHtcbiAgICBpZiAoaSAhPT0gaW5wdXRMZW5ndGgpIGMgPSBpbnB1dC5jaGFyQ29kZUF0KGkpO1xuICAgIGVsc2UgYyA9IDM4O1xuICAgIHN3aXRjaCAoYykge1xuICAgICAgY2FzZSAzODoge1xuICAgICAgICBoYXNCb3RoS2V5VmFsdWVQYWlyID0gZXF1YWxpdHlJbmRleCA+IHN0YXJ0aW5nSW5kZXg7XG4gICAgICAgIGlmICghaGFzQm90aEtleVZhbHVlUGFpcikgZXF1YWxpdHlJbmRleCA9IGk7XG4gICAgICAgIGtleSA9IGlucHV0LnNsaWNlKHN0YXJ0aW5nSW5kZXggKyAxLCBlcXVhbGl0eUluZGV4KTtcbiAgICAgICAgaWYgKGhhc0JvdGhLZXlWYWx1ZVBhaXIgfHwga2V5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAoa2V5SGFzUGx1cykga2V5ID0ga2V5LnJlcGxhY2UocGx1c1JlZ2V4LCBcIiBcIik7XG4gICAgICAgICAgaWYgKHNob3VsZERlY29kZUtleSkga2V5ID0gZmFzdERlY29kZShrZXkpIHx8IGtleTtcbiAgICAgICAgICBpZiAoaGFzQm90aEtleVZhbHVlUGFpcikge1xuICAgICAgICAgICAgdmFsdWUgPSBpbnB1dC5zbGljZShlcXVhbGl0eUluZGV4ICsgMSwgaSk7XG4gICAgICAgICAgICBpZiAodmFsdWVIYXNQbHVzKSB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocGx1c1JlZ2V4LCBcIiBcIik7XG4gICAgICAgICAgICBpZiAoc2hvdWxkRGVjb2RlVmFsdWUpXG4gICAgICAgICAgICAgIHZhbHVlID0gZmFzdERlY29kZSh2YWx1ZSkgfHwgdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHJlc3VsdFtrZXldO1xuICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgPT09IHZvaWQgMClcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlLnBvcCkgY3VycmVudFZhbHVlLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgZWxzZSByZXN1bHRba2V5XSA9IFtjdXJyZW50VmFsdWUsIHZhbHVlXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgICBzdGFydGluZ0luZGV4ID0gaTtcbiAgICAgICAgZXF1YWxpdHlJbmRleCA9IGk7XG4gICAgICAgIHNob3VsZERlY29kZUtleSA9IGZhbHNlO1xuICAgICAgICBzaG91bGREZWNvZGVWYWx1ZSA9IGZhbHNlO1xuICAgICAgICBrZXlIYXNQbHVzID0gZmFsc2U7XG4gICAgICAgIHZhbHVlSGFzUGx1cyA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIENoZWNrICc9J1xuICAgICAgY2FzZSA2MTpcbiAgICAgICAgaWYgKGVxdWFsaXR5SW5kZXggPD0gc3RhcnRpbmdJbmRleCkgZXF1YWxpdHlJbmRleCA9IGk7XG4gICAgICAgIGVsc2Ugc2hvdWxkRGVjb2RlVmFsdWUgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIENoZWNrICcrJywgYW5kIHJlbWVtYmVyIHRvIHJlcGxhY2UgaXQgd2l0aCBlbXB0eSBzcGFjZS5cbiAgICAgIGNhc2UgNDM6XG4gICAgICAgIGlmIChlcXVhbGl0eUluZGV4ID4gc3RhcnRpbmdJbmRleCkgdmFsdWVIYXNQbHVzID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBrZXlIYXNQbHVzID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBDaGVjayAnJScgY2hhcmFjdGVyIGZvciBlbmNvZGluZ1xuICAgICAgY2FzZSAzNzpcbiAgICAgICAgaWYgKGVxdWFsaXR5SW5kZXggPiBzdGFydGluZ0luZGV4KSBzaG91bGREZWNvZGVWYWx1ZSA9IHRydWU7XG4gICAgICAgIGVsc2Ugc2hvdWxkRGVjb2RlS2V5ID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0IHtcbiAgcGFyc2VRdWVyeSxcbiAgcGFyc2VRdWVyeUZyb21VUkxcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/fast-querystring.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/formats.mjs":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/formats.mjs ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fullFormats: () => (/* binding */ fullFormats)\n/* harmony export */ });\nconst fullFormats = {\n  // date: http://tools.ietf.org/html/rfc3339#section-5.6\n  date,\n  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6\n  time: getTime(true),\n  \"date-time\": getDateTime(true),\n  \"iso-time\": getTime(false),\n  \"iso-date-time\": getDateTime(false),\n  // duration: https://tools.ietf.org/html/rfc3339#appendix-A\n  duration: /^P(?!$)((\\d+Y)?(\\d+M)?(\\d+D)?(T(?=\\d)(\\d+H)?(\\d+M)?(\\d+S)?)?|(\\d+W)?)$/,\n  uri,\n  \"uri-reference\": /^(?:[a-z][a-z0-9+\\-.]*:)?(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'\"()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\\?(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,\n  // uri-template: https://tools.ietf.org/html/rfc6570\n  \"uri-template\": /^(?:(?:[^\\x00-\\x20\"'<>%\\\\^`{|}]|%[0-9a-f]{2})|\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?)*\\})*$/i,\n  // For the source: https://gist.github.com/dperini/729294\n  // For test cases: https://mathiasbynens.be/demo/url-regex\n  url: /^(?:https?|ftp):\\/\\/(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)(?:\\.(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu,\n  email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,\n  hostname: /^(?=.{1,253}\\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\\.?$/i,\n  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html\n  ipv4: /^(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)$/,\n  ipv6: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))$/i,\n  regex,\n  // uuid: http://tools.ietf.org/html/rfc4122\n  uuid: /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,\n  // JSON-pointer: https://tools.ietf.org/html/rfc6901\n  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A\n  \"json-pointer\": /^(?:\\/(?:[^~/]|~0|~1)*)*$/,\n  \"json-pointer-uri-fragment\": /^#(?:\\/(?:[a-z0-9_\\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,\n  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00\n  \"relative-json-pointer\": /^(?:0|[1-9][0-9]*)(?:#|(?:\\/(?:[^~/]|~0|~1)*)*)$/,\n  // the following formats are used by the openapi specification: https://spec.openapis.org/oas/v3.0.0#data-types\n  // byte: https://github.com/miguelmota/is-base64\n  byte,\n  // signed 32 bit integer\n  int32: { type: \"number\", validate: validateInt32 },\n  // signed 64 bit integer\n  int64: { type: \"number\", validate: validateInt64 },\n  // C-type float\n  float: { type: \"number\", validate: validateNumber },\n  // C-type double\n  double: { type: \"number\", validate: validateNumber },\n  // hint to the UI to hide input strings\n  password: true,\n  // unchecked string payload\n  binary: true\n};\nfunction isLeapYear(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\nconst DATE = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/;\nconst DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nfunction date(str) {\n  const matches = DATE.exec(str);\n  if (!matches) return false;\n  const year = +matches[1];\n  const month = +matches[2];\n  const day = +matches[3];\n  return month >= 1 && month <= 12 && day >= 1 && day <= (month === 2 && isLeapYear(year) ? 29 : DAYS[month]);\n}\nconst TIME = /^(\\d\\d):(\\d\\d):(\\d\\d(?:\\.\\d+)?)(z|([+-])(\\d\\d)(?::?(\\d\\d))?)?$/i;\nfunction getTime(strictTimeZone) {\n  return function time(str) {\n    const matches = TIME.exec(str);\n    if (!matches) return false;\n    const hr = +matches[1];\n    const min = +matches[2];\n    const sec = +matches[3];\n    const tz = matches[4];\n    const tzSign = matches[5] === \"-\" ? -1 : 1;\n    const tzH = +(matches[6] || 0);\n    const tzM = +(matches[7] || 0);\n    if (tzH > 23 || tzM > 59 || strictTimeZone && !tz) return false;\n    if (hr <= 23 && min <= 59 && sec < 60) return true;\n    const utcMin = min - tzM * tzSign;\n    const utcHr = hr - tzH * tzSign - (utcMin < 0 ? 1 : 0);\n    return (utcHr === 23 || utcHr === -1) && (utcMin === 59 || utcMin === -1) && sec < 61;\n  };\n}\nconst DATE_TIME_SEPARATOR = /t|\\s/i;\nfunction getDateTime(strictTimeZone) {\n  const time = getTime(strictTimeZone);\n  return function date_time(str) {\n    const dateTime = str.split(DATE_TIME_SEPARATOR);\n    return dateTime.length === 2 && date(dateTime[0]) && time(dateTime[1]);\n  };\n}\nconst NOT_URI_FRAGMENT = /\\/|:/;\nconst URI = /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\\?(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\nfunction uri(str) {\n  return NOT_URI_FRAGMENT.test(str) && URI.test(str);\n}\nconst BYTE = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm;\nfunction byte(str) {\n  BYTE.lastIndex = 0;\n  return BYTE.test(str);\n}\nconst MIN_INT32 = -(2 ** 31);\nconst MAX_INT32 = 2 ** 31 - 1;\nfunction validateInt32(value) {\n  return Number.isInteger(value) && value <= MAX_INT32 && value >= MIN_INT32;\n}\nfunction validateInt64(value) {\n  return Number.isInteger(value);\n}\nfunction validateNumber() {\n  return true;\n}\nconst Z_ANCHOR = /[^\\\\]\\\\Z/;\nfunction regex(str) {\n  if (Z_ANCHOR.test(str)) return false;\n  try {\n    new RegExp(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @license\n * \n * MIT License\n * \n * Copyright (c) 2020 Evgeny Poberezkin\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vZWx5c2lhQDEuMi4yNV9Ac2luY2xhaXIrdHlwZWJveEAwLjM0LjMzX3R5cGVzY3JpcHRANS44LjMvbm9kZV9tb2R1bGVzL2VseXNpYS9kaXN0L2Zvcm1hdHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLGNBQWMsRUFBRSwrQkFBK0IsSUFBSSxHQUFHLEVBQUUsZUFBZSxJQUFJLEdBQUcsRUFBRSxhQUFhLElBQUksZ0JBQWdCLElBQUksR0FBRyxFQUFFLGdCQUFnQixJQUFJLEdBQUcsSUFBSSxTQUFTLElBQUksZ0JBQWdCLElBQUksR0FBRyxFQUFFLGdCQUFnQixJQUFJLEdBQUcsSUFBSSxTQUFTLElBQUksZ0JBQWdCLElBQUksR0FBRyxFQUFFLGdCQUFnQixJQUFJLEdBQUcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLGlCQUFpQixJQUFJLEdBQUcsSUFBSSxTQUFTLElBQUksaUJBQWlCLElBQUksVUFBVSxJQUFJLHVDQUF1QyxFQUFFLGdEQUFnRCxJQUFJLEdBQUcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLGdCQUFnQixJQUFJLEdBQUcsSUFBSSxTQUFTLElBQUksMkNBQTJDLDhDQUE4QyxFQUFFLDBEQUEwRCxhQUFhLEVBQUUsMkNBQTJDLGVBQWUsRUFBRSxvQ0FBb0MsZUFBZSxFQUFFLGlDQUFpQyxlQUFlLEVBQUUsaUNBQWlDLGVBQWUsRUFBRSxpQ0FBaUMsZUFBZSxFQUFFLHFDQUFxQyxpQkFBaUIsRUFBRSxrQ0FBa0MsaUJBQWlCLEVBQUU7QUFDcHBDO0FBQ0EsK0NBQStDLEVBQUUsWUFBWSxFQUFFLElBQUksTUFBTSxnQ0FBZ0MsRUFBRSxpQkFBaUIsSUFBSSxnQ0FBZ0MsRUFBRSxpQkFBaUIsSUFBSSxTQUFTO0FBQ2hNO0FBQ0E7QUFDQSxzRUFBc0UsSUFBSSxFQUFFLEVBQUUsaUNBQWlDLElBQUksRUFBRSxFQUFFLHNDQUFzQyxJQUFJLEVBQUUsRUFBRSxnREFBZ0QsSUFBSSxvQkFBb0IsRUFBRSwwREFBMEQsS0FBSyxJQUFJLEtBQUssZUFBZSxLQUFLLElBQUksS0FBSyxxQkFBcUIsS0FBSyxJQUFJLEtBQUssZUFBZSxLQUFLLElBQUksS0FBSyxtQkFBbUIsS0FBSyxJQUFJLEtBQUssRUFBRSxHQUFHLFVBQVUsSUFBSTtBQUN4YyxpQ0FBaUMsRUFBRSwrQkFBK0IsRUFBRTtBQUNwRSxtQkFBbUIsTUFBTSwwQkFBMEIsS0FBSyxvQ0FBb0MsS0FBSztBQUNqRztBQUNBLG9EQUFvRCxFQUFFO0FBQ3RELHNCQUFzQixJQUFJLEdBQUcsRUFBRSxVQUFVLElBQUksZ0JBQWdCLElBQUksR0FBRyxFQUFFLFdBQVcsSUFBSSx5RUFBeUUsRUFBRSxpQkFBaUIsSUFBSSxHQUFHLEVBQUUsYUFBYSxJQUFJLEVBQUUsSUFBSSwyRUFBMkUsRUFBRSxpQkFBaUIsSUFBSSxHQUFHLEVBQUUsYUFBYSxJQUFJLEVBQUUsSUFBSSxjQUFjLElBQUksMkVBQTJFLEVBQUUsa0JBQWtCLElBQUksR0FBRyxFQUFFLGFBQWEsSUFBSSxFQUFFLElBQUksY0FBYyxJQUFJLEVBQUUsSUFBSSx5RUFBeUUsRUFBRSxrQkFBa0IsSUFBSSxHQUFHLEVBQUUsYUFBYSxJQUFJLEVBQUUsSUFBSSxjQUFjLElBQUksRUFBRSxJQUFJLHlFQUF5RSxFQUFFLGtCQUFrQixJQUFJLEdBQUcsRUFBRSxhQUFhLElBQUksRUFBRSxJQUFJLGNBQWMsSUFBSSxFQUFFLElBQUkseUVBQXlFLEVBQUUsc0JBQXNCLElBQUksRUFBRSxJQUFJLGNBQWMsSUFBSSxFQUFFLElBQUkseUVBQXlFLEVBQUU7QUFDaC9CO0FBQ0E7QUFDQSxpQ0FBaUMsRUFBRSxhQUFhLEVBQUUsR0FBRyxFQUFFLFNBQVMsR0FBRztBQUNuRTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsZUFBZSxFQUFFO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUNBQXlDO0FBQ3BEO0FBQ0EsV0FBVyx5Q0FBeUM7QUFDcEQ7QUFDQSxXQUFXLDBDQUEwQztBQUNyRDtBQUNBLFlBQVksMENBQTBDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLGNBQWMsRUFBRSwrQkFBK0IsSUFBSSxHQUFHLEVBQUUsZUFBZSxJQUFJLEdBQUcsRUFBRSxhQUFhLElBQUksZ0JBQWdCLElBQUksR0FBRyxFQUFFLGdCQUFnQixJQUFJLEdBQUcsSUFBSSxTQUFTLElBQUksZ0JBQWdCLElBQUksR0FBRyxFQUFFLGdCQUFnQixJQUFJLEdBQUcsSUFBSSxTQUFTLElBQUksZ0JBQWdCLElBQUksR0FBRyxFQUFFLGdCQUFnQixJQUFJLEdBQUcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLGlCQUFpQixJQUFJLEdBQUcsSUFBSSxTQUFTLElBQUksaUJBQWlCLElBQUksVUFBVSxJQUFJLHVDQUF1QyxFQUFFLGdEQUFnRCxJQUFJLEdBQUcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLGdCQUFnQixJQUFJLEdBQUcsSUFBSSxTQUFTLElBQUksMkNBQTJDLDhDQUE4QyxFQUFFLHlEQUF5RCxhQUFhLEVBQUUsMENBQTBDLGVBQWUsRUFBRSxtQ0FBbUMsZUFBZSxFQUFFLGdDQUFnQyxlQUFlLEVBQUUsZ0NBQWdDLGVBQWUsRUFBRSxnQ0FBZ0MsZUFBZSxFQUFFLG1DQUFtQyxpQkFBaUIsRUFBRSxpQ0FBaUMsaUJBQWlCLEVBQUU7QUFDbm9DO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxFQUFFLG1CQUFtQixFQUFFLGlCQUFpQixFQUFFO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGxvbGhhXFxEZXNrdG9wXFxERVZcXGNvZGluZy5nbG9iYWwtd2ViXFxub2RlX21vZHVsZXNcXC5wbnBtXFxlbHlzaWFAMS4yLjI1X0BzaW5jbGFpcit0eXBlYm94QDAuMzQuMzNfdHlwZXNjcmlwdEA1LjguM1xcbm9kZV9tb2R1bGVzXFxlbHlzaWFcXGRpc3RcXGZvcm1hdHMubWpzfHJzYyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmdWxsRm9ybWF0cyA9IHtcbiAgLy8gZGF0ZTogaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzMzOSNzZWN0aW9uLTUuNlxuICBkYXRlLFxuICAvLyBkYXRlLXRpbWU6IGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzMzMzkjc2VjdGlvbi01LjZcbiAgdGltZTogZ2V0VGltZSh0cnVlKSxcbiAgXCJkYXRlLXRpbWVcIjogZ2V0RGF0ZVRpbWUodHJ1ZSksXG4gIFwiaXNvLXRpbWVcIjogZ2V0VGltZShmYWxzZSksXG4gIFwiaXNvLWRhdGUtdGltZVwiOiBnZXREYXRlVGltZShmYWxzZSksXG4gIC8vIGR1cmF0aW9uOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzMzOSNhcHBlbmRpeC1BXG4gIGR1cmF0aW9uOiAvXlAoPyEkKSgoXFxkK1kpPyhcXGQrTSk/KFxcZCtEKT8oVCg/PVxcZCkoXFxkK0gpPyhcXGQrTSk/KFxcZCtTKT8pP3woXFxkK1cpPykkLyxcbiAgdXJpLFxuICBcInVyaS1yZWZlcmVuY2VcIjogL14oPzpbYS16XVthLXowLTkrXFwtLl0qOik/KD86XFwvP1xcLyg/Oig/OlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpdfCVbMC05YS1mXXsyfSkqQCk/KD86XFxbKD86KD86KD86KD86WzAtOWEtZl17MSw0fTopezZ9fDo6KD86WzAtOWEtZl17MSw0fTopezV9fCg/OlswLTlhLWZdezEsNH0pPzo6KD86WzAtOWEtZl17MSw0fTopezR9fCg/Oig/OlswLTlhLWZdezEsNH06KXswLDF9WzAtOWEtZl17MSw0fSk/OjooPzpbMC05YS1mXXsxLDR9Oil7M318KD86KD86WzAtOWEtZl17MSw0fTopezAsMn1bMC05YS1mXXsxLDR9KT86Oig/OlswLTlhLWZdezEsNH06KXsyfXwoPzooPzpbMC05YS1mXXsxLDR9Oil7MCwzfVswLTlhLWZdezEsNH0pPzo6WzAtOWEtZl17MSw0fTp8KD86KD86WzAtOWEtZl17MSw0fTopezAsNH1bMC05YS1mXXsxLDR9KT86OikoPzpbMC05YS1mXXsxLDR9OlswLTlhLWZdezEsNH18KD86KD86MjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KVxcLil7M30oPzoyNVswLTVdfDJbMC00XVxcZHxbMDFdP1xcZFxcZD8pKXwoPzooPzpbMC05YS1mXXsxLDR9Oil7MCw1fVswLTlhLWZdezEsNH0pPzo6WzAtOWEtZl17MSw0fXwoPzooPzpbMC05YS1mXXsxLDR9Oil7MCw2fVswLTlhLWZdezEsNH0pPzo6KXxbVnZdWzAtOWEtZl0rXFwuW2EtejAtOVxcLS5ffiEkJicoKSorLDs9Ol0rKVxcXXwoPzooPzoyNVswLTVdfDJbMC00XVxcZHxbMDFdP1xcZFxcZD8pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdXFxkfFswMV0/XFxkXFxkPyl8KD86W2EtejAtOVxcLS5ffiEkJidcIigpKissOz1dfCVbMC05YS1mXXsyfSkqKSg/OjpcXGQqKT8oPzpcXC8oPzpbYS16MC05XFwtLl9+ISQmJ1wiKCkqKyw7PTpAXXwlWzAtOWEtZl17Mn0pKikqfFxcLyg/Oig/OlthLXowLTlcXC0uX34hJCYnXCIoKSorLDs9OkBdfCVbMC05YS1mXXsyfSkrKD86XFwvKD86W2EtejAtOVxcLS5ffiEkJidcIigpKissOz06QF18JVswLTlhLWZdezJ9KSopKik/fCg/OlthLXowLTlcXC0uX34hJCYnXCIoKSorLDs9OkBdfCVbMC05YS1mXXsyfSkrKD86XFwvKD86W2EtejAtOVxcLS5ffiEkJidcIigpKissOz06QF18JVswLTlhLWZdezJ9KSopKik/KD86XFw/KD86W2EtejAtOVxcLS5ffiEkJidcIigpKissOz06QC8/XXwlWzAtOWEtZl17Mn0pKik/KD86Iyg/OlthLXowLTlcXC0uX34hJCYnXCIoKSorLDs9OkAvP118JVswLTlhLWZdezJ9KSopPyQvaSxcbiAgLy8gdXJpLXRlbXBsYXRlOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjU3MFxuICBcInVyaS10ZW1wbGF0ZVwiOiAvXig/Oig/OlteXFx4MDAtXFx4MjBcIic8PiVcXFxcXmB7fH1dfCVbMC05YS1mXXsyfSl8XFx7WysjLi87PyY9LCFAfF0/KD86W2EtejAtOV9dfCVbMC05YS1mXXsyfSkrKD86OlsxLTldWzAtOV17MCwzfXxcXCopPyg/OiwoPzpbYS16MC05X118JVswLTlhLWZdezJ9KSsoPzo6WzEtOV1bMC05XXswLDN9fFxcKik/KSpcXH0pKiQvaSxcbiAgLy8gRm9yIHRoZSBzb3VyY2U6IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2RwZXJpbmkvNzI5Mjk0XG4gIC8vIEZvciB0ZXN0IGNhc2VzOiBodHRwczovL21hdGhpYXNieW5lbnMuYmUvZGVtby91cmwtcmVnZXhcbiAgdXJsOiAvXig/Omh0dHBzP3xmdHApOlxcL1xcLyg/OlxcUysoPzo6XFxTKik/QCk/KD86KD8hKD86MTB8MTI3KSg/OlxcLlxcZHsxLDN9KXszfSkoPyEoPzoxNjlcXC4yNTR8MTkyXFwuMTY4KSg/OlxcLlxcZHsxLDN9KXsyfSkoPyExNzJcXC4oPzoxWzYtOV18MlxcZHwzWzAtMV0pKD86XFwuXFxkezEsM30pezJ9KSg/OlsxLTldXFxkP3wxXFxkXFxkfDJbMDFdXFxkfDIyWzAtM10pKD86XFwuKD86MT9cXGR7MSwyfXwyWzAtNF1cXGR8MjVbMC01XSkpezJ9KD86XFwuKD86WzEtOV1cXGQ/fDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNF0pKXwoPzooPzpbYS16MC05XFx1ezAwYTF9LVxcdXtmZmZmfV0rLSkqW2EtejAtOVxcdXswMGExfS1cXHV7ZmZmZn1dKykoPzpcXC4oPzpbYS16MC05XFx1ezAwYTF9LVxcdXtmZmZmfV0rLSkqW2EtejAtOVxcdXswMGExfS1cXHV7ZmZmZn1dKykqKD86XFwuKD86W2EtelxcdXswMGExfS1cXHV7ZmZmZn1dezIsfSkpKSg/OjpcXGR7Miw1fSk/KD86XFwvW15cXHNdKik/JC9pdSxcbiAgZW1haWw6IC9eW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKyg/OlxcLlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSspKkAoPzpbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XFwuKStbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/JC9pLFxuICBob3N0bmFtZTogL14oPz0uezEsMjUzfVxcLj8kKVthLXowLTldKD86W2EtejAtOS1dezAsNjF9W2EtejAtOV0pPyg/OlxcLlthLXowLTldKD86Wy0wLTlhLXpdezAsNjF9WzAtOWEtel0pPykqXFwuPyQvaSxcbiAgLy8gb3B0aW1pemVkIGh0dHBzOi8vd3d3LnNhZmFyaWJvb2tzb25saW5lLmNvbS9saWJyYXJ5L3ZpZXcvcmVndWxhci1leHByZXNzaW9ucy1jb29rYm9vay85NzgwNTk2ODAyODM3L2NoMDdzMTYuaHRtbFxuICBpcHY0OiAvXig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKVxcLil7M30oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkkLyxcbiAgaXB2NjogL14oKChbMC05YS1mXXsxLDR9Oil7N30oWzAtOWEtZl17MSw0fXw6KSl8KChbMC05YS1mXXsxLDR9Oil7Nn0oOlswLTlhLWZdezEsNH18KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pfDopKXwoKFswLTlhLWZdezEsNH06KXs1fSgoKDpbMC05YS1mXXsxLDR9KXsxLDJ9KXw6KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pfDopKXwoKFswLTlhLWZdezEsNH06KXs0fSgoKDpbMC05YS1mXXsxLDR9KXsxLDN9KXwoKDpbMC05YS1mXXsxLDR9KT86KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KChbMC05YS1mXXsxLDR9Oil7M30oKCg6WzAtOWEtZl17MSw0fSl7MSw0fSl8KCg6WzAtOWEtZl17MSw0fSl7MCwyfTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoKFswLTlhLWZdezEsNH06KXsyfSgoKDpbMC05YS1mXXsxLDR9KXsxLDV9KXwoKDpbMC05YS1mXXsxLDR9KXswLDN9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCgoWzAtOWEtZl17MSw0fTopezF9KCgoOlswLTlhLWZdezEsNH0pezEsNn0pfCgoOlswLTlhLWZdezEsNH0pezAsNH06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KDooKCg6WzAtOWEtZl17MSw0fSl7MSw3fSl8KCg6WzAtOWEtZl17MSw0fSl7MCw1fTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKSkkL2ksXG4gIHJlZ2V4LFxuICAvLyB1dWlkOiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM0MTIyXG4gIHV1aWQ6IC9eKD86dXJuOnV1aWQ6KT9bMC05YS1mXXs4fS0oPzpbMC05YS1mXXs0fS0pezN9WzAtOWEtZl17MTJ9JC9pLFxuICAvLyBKU09OLXBvaW50ZXI6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2OTAxXG4gIC8vIHVyaSBmcmFnbWVudDogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjYXBwZW5kaXgtQVxuICBcImpzb24tcG9pbnRlclwiOiAvXig/OlxcLyg/Oltefi9dfH4wfH4xKSopKiQvLFxuICBcImpzb24tcG9pbnRlci11cmktZnJhZ21lbnRcIjogL14jKD86XFwvKD86W2EtejAtOV9cXC0uISQmJygpKissOzo9QF18JVswLTlhLWZdezJ9fH4wfH4xKSopKiQvaSxcbiAgLy8gcmVsYXRpdmUgSlNPTi1wb2ludGVyOiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1sdWZmLXJlbGF0aXZlLWpzb24tcG9pbnRlci0wMFxuICBcInJlbGF0aXZlLWpzb24tcG9pbnRlclwiOiAvXig/OjB8WzEtOV1bMC05XSopKD86I3woPzpcXC8oPzpbXn4vXXx+MHx+MSkqKSopJC8sXG4gIC8vIHRoZSBmb2xsb3dpbmcgZm9ybWF0cyBhcmUgdXNlZCBieSB0aGUgb3BlbmFwaSBzcGVjaWZpY2F0aW9uOiBodHRwczovL3NwZWMub3BlbmFwaXMub3JnL29hcy92My4wLjAjZGF0YS10eXBlc1xuICAvLyBieXRlOiBodHRwczovL2dpdGh1Yi5jb20vbWlndWVsbW90YS9pcy1iYXNlNjRcbiAgYnl0ZSxcbiAgLy8gc2lnbmVkIDMyIGJpdCBpbnRlZ2VyXG4gIGludDMyOiB7IHR5cGU6IFwibnVtYmVyXCIsIHZhbGlkYXRlOiB2YWxpZGF0ZUludDMyIH0sXG4gIC8vIHNpZ25lZCA2NCBiaXQgaW50ZWdlclxuICBpbnQ2NDogeyB0eXBlOiBcIm51bWJlclwiLCB2YWxpZGF0ZTogdmFsaWRhdGVJbnQ2NCB9LFxuICAvLyBDLXR5cGUgZmxvYXRcbiAgZmxvYXQ6IHsgdHlwZTogXCJudW1iZXJcIiwgdmFsaWRhdGU6IHZhbGlkYXRlTnVtYmVyIH0sXG4gIC8vIEMtdHlwZSBkb3VibGVcbiAgZG91YmxlOiB7IHR5cGU6IFwibnVtYmVyXCIsIHZhbGlkYXRlOiB2YWxpZGF0ZU51bWJlciB9LFxuICAvLyBoaW50IHRvIHRoZSBVSSB0byBoaWRlIGlucHV0IHN0cmluZ3NcbiAgcGFzc3dvcmQ6IHRydWUsXG4gIC8vIHVuY2hlY2tlZCBzdHJpbmcgcGF5bG9hZFxuICBiaW5hcnk6IHRydWVcbn07XG5mdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgcmV0dXJuIHllYXIgJSA0ID09PSAwICYmICh5ZWFyICUgMTAwICE9PSAwIHx8IHllYXIgJSA0MDAgPT09IDApO1xufVxuY29uc3QgREFURSA9IC9eKFxcZFxcZFxcZFxcZCktKFxcZFxcZCktKFxcZFxcZCkkLztcbmNvbnN0IERBWVMgPSBbMCwgMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG5mdW5jdGlvbiBkYXRlKHN0cikge1xuICBjb25zdCBtYXRjaGVzID0gREFURS5leGVjKHN0cik7XG4gIGlmICghbWF0Y2hlcykgcmV0dXJuIGZhbHNlO1xuICBjb25zdCB5ZWFyID0gK21hdGNoZXNbMV07XG4gIGNvbnN0IG1vbnRoID0gK21hdGNoZXNbMl07XG4gIGNvbnN0IGRheSA9ICttYXRjaGVzWzNdO1xuICByZXR1cm4gbW9udGggPj0gMSAmJiBtb250aCA8PSAxMiAmJiBkYXkgPj0gMSAmJiBkYXkgPD0gKG1vbnRoID09PSAyICYmIGlzTGVhcFllYXIoeWVhcikgPyAyOSA6IERBWVNbbW9udGhdKTtcbn1cbmNvbnN0IFRJTUUgPSAvXihcXGRcXGQpOihcXGRcXGQpOihcXGRcXGQoPzpcXC5cXGQrKT8pKHp8KFsrLV0pKFxcZFxcZCkoPzo6PyhcXGRcXGQpKT8pPyQvaTtcbmZ1bmN0aW9uIGdldFRpbWUoc3RyaWN0VGltZVpvbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRpbWUoc3RyKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IFRJTUUuZXhlYyhzdHIpO1xuICAgIGlmICghbWF0Y2hlcykgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGhyID0gK21hdGNoZXNbMV07XG4gICAgY29uc3QgbWluID0gK21hdGNoZXNbMl07XG4gICAgY29uc3Qgc2VjID0gK21hdGNoZXNbM107XG4gICAgY29uc3QgdHogPSBtYXRjaGVzWzRdO1xuICAgIGNvbnN0IHR6U2lnbiA9IG1hdGNoZXNbNV0gPT09IFwiLVwiID8gLTEgOiAxO1xuICAgIGNvbnN0IHR6SCA9ICsobWF0Y2hlc1s2XSB8fCAwKTtcbiAgICBjb25zdCB0ek0gPSArKG1hdGNoZXNbN10gfHwgMCk7XG4gICAgaWYgKHR6SCA+IDIzIHx8IHR6TSA+IDU5IHx8IHN0cmljdFRpbWVab25lICYmICF0eikgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChociA8PSAyMyAmJiBtaW4gPD0gNTkgJiYgc2VjIDwgNjApIHJldHVybiB0cnVlO1xuICAgIGNvbnN0IHV0Y01pbiA9IG1pbiAtIHR6TSAqIHR6U2lnbjtcbiAgICBjb25zdCB1dGNIciA9IGhyIC0gdHpIICogdHpTaWduIC0gKHV0Y01pbiA8IDAgPyAxIDogMCk7XG4gICAgcmV0dXJuICh1dGNIciA9PT0gMjMgfHwgdXRjSHIgPT09IC0xKSAmJiAodXRjTWluID09PSA1OSB8fCB1dGNNaW4gPT09IC0xKSAmJiBzZWMgPCA2MTtcbiAgfTtcbn1cbmNvbnN0IERBVEVfVElNRV9TRVBBUkFUT1IgPSAvdHxcXHMvaTtcbmZ1bmN0aW9uIGdldERhdGVUaW1lKHN0cmljdFRpbWVab25lKSB7XG4gIGNvbnN0IHRpbWUgPSBnZXRUaW1lKHN0cmljdFRpbWVab25lKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRhdGVfdGltZShzdHIpIHtcbiAgICBjb25zdCBkYXRlVGltZSA9IHN0ci5zcGxpdChEQVRFX1RJTUVfU0VQQVJBVE9SKTtcbiAgICByZXR1cm4gZGF0ZVRpbWUubGVuZ3RoID09PSAyICYmIGRhdGUoZGF0ZVRpbWVbMF0pICYmIHRpbWUoZGF0ZVRpbWVbMV0pO1xuICB9O1xufVxuY29uc3QgTk9UX1VSSV9GUkFHTUVOVCA9IC9cXC98Oi87XG5jb25zdCBVUkkgPSAvXig/OlthLXpdW2EtejAtOStcXC0uXSo6KSg/OlxcLz9cXC8oPzooPzpbYS16MC05XFwtLl9+ISQmJygpKissOz06XXwlWzAtOWEtZl17Mn0pKkApPyg/OlxcWyg/Oig/Oig/Oig/OlswLTlhLWZdezEsNH06KXs2fXw6Oig/OlswLTlhLWZdezEsNH06KXs1fXwoPzpbMC05YS1mXXsxLDR9KT86Oig/OlswLTlhLWZdezEsNH06KXs0fXwoPzooPzpbMC05YS1mXXsxLDR9Oil7MCwxfVswLTlhLWZdezEsNH0pPzo6KD86WzAtOWEtZl17MSw0fTopezN9fCg/Oig/OlswLTlhLWZdezEsNH06KXswLDJ9WzAtOWEtZl17MSw0fSk/OjooPzpbMC05YS1mXXsxLDR9Oil7Mn18KD86KD86WzAtOWEtZl17MSw0fTopezAsM31bMC05YS1mXXsxLDR9KT86OlswLTlhLWZdezEsNH06fCg/Oig/OlswLTlhLWZdezEsNH06KXswLDR9WzAtOWEtZl17MSw0fSk/OjopKD86WzAtOWEtZl17MSw0fTpbMC05YS1mXXsxLDR9fCg/Oig/OjI1WzAtNV18MlswLTRdXFxkfFswMV0/XFxkXFxkPylcXC4pezN9KD86MjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KSl8KD86KD86WzAtOWEtZl17MSw0fTopezAsNX1bMC05YS1mXXsxLDR9KT86OlswLTlhLWZdezEsNH18KD86KD86WzAtOWEtZl17MSw0fTopezAsNn1bMC05YS1mXXsxLDR9KT86Oil8W1Z2XVswLTlhLWZdK1xcLlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpdKylcXF18KD86KD86MjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KVxcLil7M30oPzoyNVswLTVdfDJbMC00XVxcZHxbMDFdP1xcZFxcZD8pfCg/OlthLXowLTlcXC0uX34hJCYnKCkqKyw7PV18JVswLTlhLWZdezJ9KSopKD86OlxcZCopPyg/OlxcLyg/OlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpAXXwlWzAtOWEtZl17Mn0pKikqfFxcLyg/Oig/OlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpAXXwlWzAtOWEtZl17Mn0pKyg/OlxcLyg/OlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpAXXwlWzAtOWEtZl17Mn0pKikqKT98KD86W2EtejAtOVxcLS5ffiEkJicoKSorLDs9OkBdfCVbMC05YS1mXXsyfSkrKD86XFwvKD86W2EtejAtOVxcLS5ffiEkJicoKSorLDs9OkBdfCVbMC05YS1mXXsyfSkqKSopKD86XFw/KD86W2EtejAtOVxcLS5ffiEkJicoKSorLDs9OkAvP118JVswLTlhLWZdezJ9KSopPyg/OiMoPzpbYS16MC05XFwtLl9+ISQmJygpKissOz06QC8/XXwlWzAtOWEtZl17Mn0pKik/JC9pO1xuZnVuY3Rpb24gdXJpKHN0cikge1xuICByZXR1cm4gTk9UX1VSSV9GUkFHTUVOVC50ZXN0KHN0cikgJiYgVVJJLnRlc3Qoc3RyKTtcbn1cbmNvbnN0IEJZVEUgPSAvXig/OltBLVphLXowLTkrL117NH0pKig/OltBLVphLXowLTkrL117Mn09PXxbQS1aYS16MC05Ky9dezN9PSk/JC9nbTtcbmZ1bmN0aW9uIGJ5dGUoc3RyKSB7XG4gIEJZVEUubGFzdEluZGV4ID0gMDtcbiAgcmV0dXJuIEJZVEUudGVzdChzdHIpO1xufVxuY29uc3QgTUlOX0lOVDMyID0gLSgyICoqIDMxKTtcbmNvbnN0IE1BWF9JTlQzMiA9IDIgKiogMzEgLSAxO1xuZnVuY3Rpb24gdmFsaWRhdGVJbnQzMih2YWx1ZSkge1xuICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPD0gTUFYX0lOVDMyICYmIHZhbHVlID49IE1JTl9JTlQzMjtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlSW50NjQodmFsdWUpIHtcbiAgcmV0dXJuIE51bWJlci5pc0ludGVnZXIodmFsdWUpO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXIoKSB7XG4gIHJldHVybiB0cnVlO1xufVxuY29uc3QgWl9BTkNIT1IgPSAvW15cXFxcXVxcXFxaLztcbmZ1bmN0aW9uIHJlZ2V4KHN0cikge1xuICBpZiAoWl9BTkNIT1IudGVzdChzdHIpKSByZXR1cm4gZmFsc2U7XG4gIHRyeSB7XG4gICAgbmV3IFJlZ0V4cChzdHIpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBcbiAqIE1JVCBMaWNlbnNlXG4gKiBcbiAqIENvcHlyaWdodCAoYykgMjAyMCBFdmdlbnkgUG9iZXJlemtpblxuICogXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKiBcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqIFxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKi9cbmV4cG9ydCB7XG4gIGZ1bGxGb3JtYXRzXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/formats.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/index.mjs":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/index.mjs ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Cookie: () => (/* reexport safe */ _cookies_mjs__WEBPACK_IMPORTED_MODULE_11__.Cookie),\n/* harmony export */   ELYSIA_FORM_DATA: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.ELYSIA_FORM_DATA),\n/* harmony export */   ELYSIA_REQUEST_ID: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.ELYSIA_REQUEST_ID),\n/* harmony export */   ELYSIA_TRACE: () => (/* reexport safe */ _trace_mjs__WEBPACK_IMPORTED_MODULE_8__.ELYSIA_TRACE),\n/* harmony export */   ERROR_CODE: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_10__.ERROR_CODE),\n/* harmony export */   Elysia: () => (/* binding */ Elysia),\n/* harmony export */   ElysiaFile: () => (/* reexport safe */ _universal_file_mjs__WEBPACK_IMPORTED_MODULE_12__.ElysiaFile),\n/* harmony export */   InternalServerError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_10__.InternalServerError),\n/* harmony export */   InvalidCookieSignature: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_10__.InvalidCookieSignature),\n/* harmony export */   InvertedStatusMap: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.InvertedStatusMap),\n/* harmony export */   NotFoundError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_10__.NotFoundError),\n/* harmony export */   ParseError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_10__.ParseError),\n/* harmony export */   StatusMap: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.StatusMap),\n/* harmony export */   TypeSystemPolicy: () => (/* reexport safe */ _sinclair_typebox_system__WEBPACK_IMPORTED_MODULE_13__.TypeSystemPolicy),\n/* harmony export */   ValidationError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_10__.ValidationError),\n/* harmony export */   checksum: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.checksum),\n/* harmony export */   cloneInference: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.cloneInference),\n/* harmony export */   deduplicateChecksum: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.deduplicateChecksum),\n/* harmony export */   \"default\": () => (/* binding */ Elysia),\n/* harmony export */   env: () => (/* reexport safe */ _universal_env_mjs__WEBPACK_IMPORTED_MODULE_5__.env),\n/* harmony export */   error: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_10__.error),\n/* harmony export */   file: () => (/* reexport safe */ _universal_file_mjs__WEBPACK_IMPORTED_MODULE_12__.file),\n/* harmony export */   form: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.form),\n/* harmony export */   getResponseSchemaValidator: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getResponseSchemaValidator),\n/* harmony export */   getSchemaValidator: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getSchemaValidator),\n/* harmony export */   mapValueError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_10__.mapValueError),\n/* harmony export */   mergeHook: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeHook),\n/* harmony export */   mergeObjectArray: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeObjectArray),\n/* harmony export */   redirect: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.redirect),\n/* harmony export */   replaceSchemaType: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.replaceSchemaType),\n/* harmony export */   replaceUrlPath: () => (/* reexport safe */ _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.replaceUrlPath),\n/* harmony export */   serializeCookie: () => (/* reexport safe */ _cookies_mjs__WEBPACK_IMPORTED_MODULE_11__.serializeCookie),\n/* harmony export */   t: () => (/* reexport safe */ _type_system_mjs__WEBPACK_IMPORTED_MODULE_1__.t)\n/* harmony export */ });\n/* harmony import */ var memoirist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! memoirist */ \"(rsc)/./node_modules/.pnpm/memoirist@0.3.1/node_modules/memoirist/dist/index.mjs\");\n/* harmony import */ var _type_system_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./type-system.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/type-system.mjs\");\n/* harmony import */ var _sucrose_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sucrose.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/sucrose.mjs\");\n/* harmony import */ var _adapter_bun_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./adapter/bun/index.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/bun/index.mjs\");\n/* harmony import */ var _adapter_web_standard_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./adapter/web-standard/index.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/adapter/web-standard/index.mjs\");\n/* harmony import */ var _universal_env_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./universal/env.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/universal/env.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/utils.mjs\");\n/* harmony import */ var _compose_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./compose.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/compose.mjs\");\n/* harmony import */ var _trace_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./trace.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/trace.mjs\");\n/* harmony import */ var _dynamic_handle_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dynamic-handle.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/dynamic-handle.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/error.mjs\");\n/* harmony import */ var _cookies_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./cookies.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/cookies.mjs\");\n/* harmony import */ var _universal_file_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./universal/file.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/universal/file.mjs\");\n/* harmony import */ var _sinclair_typebox_system__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @sinclair/typebox/system */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/system/policy.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\nclass Elysia {\n  constructor(config = {}) {\n    this.server = null;\n    this.dependencies = {};\n    this._routes = {};\n    this._types = {\n      Prefix: \"\",\n      Singleton: {},\n      Definitions: {},\n      Metadata: {}\n    };\n    this._ephemeral = {};\n    this._volatile = {};\n    this.singleton = {\n      decorator: {},\n      store: {},\n      derive: {},\n      resolve: {}\n    };\n    this.definitions = {\n      typebox: _type_system_mjs__WEBPACK_IMPORTED_MODULE_1__.t.Module({}),\n      type: {},\n      error: {}\n    };\n    this.extender = {\n      macros: [],\n      higherOrderFunctions: []\n    };\n    this.validator = {\n      global: null,\n      scoped: null,\n      local: null,\n      getCandidate() {\n        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeSchemaValidator)(\n          (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeSchemaValidator)(this.global, this.scoped),\n          this.local\n        );\n      }\n    };\n    this.event = {};\n    this.telemetry = {\n      stack: void 0\n    };\n    this.router = {\n      \"~http\": void 0,\n      get http() {\n        if (!this[\"~http\"]) this[\"~http\"] = new memoirist__WEBPACK_IMPORTED_MODULE_0__.Memoirist({ lazy: true });\n        return this[\"~http\"];\n      },\n      \"~dynamic\": void 0,\n      // Use in non-AOT mode\n      get dynamic() {\n        if (!this[\"~dynamic\"]) this[\"~dynamic\"] = new memoirist__WEBPACK_IMPORTED_MODULE_0__.Memoirist();\n        return this[\"~dynamic\"];\n      },\n      static: {\n        http: {\n          static: {},\n          // handlers: [] as ComposedHandler[],\n          map: {},\n          all: \"\"\n        },\n        // Static WS Router is consists of pathname and websocket handler index to compose\n        ws: {}\n      },\n      history: []\n    };\n    this.routeTree = /* @__PURE__ */ new Map();\n    this.inference = {\n      body: false,\n      cookie: false,\n      headers: false,\n      query: false,\n      set: false,\n      server: false,\n      request: false,\n      route: false\n    };\n    this[\"~parser\"] = {};\n    this.handle = async (request) => this.fetch(request);\n    /**\n     * Use handle can be either sync or async to save performance.\n     *\n     * Beside benchmark purpose, please use 'handle' instead.\n     */\n    this.fetch = (request) => {\n      return (this.fetch = this.config.aot ? (0,_compose_mjs__WEBPACK_IMPORTED_MODULE_7__.composeGeneralHandler)(this) : (0,_dynamic_handle_mjs__WEBPACK_IMPORTED_MODULE_9__.createDynamicHandler)(this))(request);\n    };\n    this.handleError = async (context, error2) => {\n      return (this.handleError = this.config.aot ? (0,_compose_mjs__WEBPACK_IMPORTED_MODULE_7__.composeErrorHandler)(this) : (0,_dynamic_handle_mjs__WEBPACK_IMPORTED_MODULE_9__.createDynamicErrorHandler)(this))(context, error2);\n    };\n    this.outerErrorHandler = (error2) => new Response(error2.message || error2.name || \"Error\", {\n      // @ts-ignore\n      status: error2?.status ?? 500\n    });\n    /**\n     * ### listen\n     * Assign current instance to port and start serving\n     *\n     * ---\n     * @example\n     * ```typescript\n     * new Elysia()\n     *     .get(\"/\", () => 'hi')\n     *     .listen(3000)\n     * ```\n     */\n    this.listen = (options, callback) => {\n      this[\"~adapter\"].listen(this)(options, callback);\n      return this;\n    };\n    /**\n     * ### stop\n     * Stop server from serving\n     *\n     * ---\n     * @example\n     * ```typescript\n     * const app = new Elysia()\n     *     .get(\"/\", () => 'hi')\n     *     .listen(3000)\n     *\n     * // Sometime later\n     * app.stop()\n     * ```\n     *\n     * @example\n     * ```typescript\n     * const app = new Elysia()\n     *     .get(\"/\", () => 'hi')\n     *     .listen(3000)\n     *\n     * app.stop(true) // Abruptly any requests inflight\n     * ```\n     */\n    this.stop = async (closeActiveConnections) => {\n      if (!this.server)\n        throw new Error(\n          \"Elysia isn't running. Call `app.listen` to start the server.\"\n        );\n      if (this.server) {\n        this.server.stop(closeActiveConnections);\n        this.server = null;\n        if (this.event.stop?.length)\n          for (let i = 0; i < this.event.stop.length; i++)\n            this.event.stop[i].fn(this);\n      }\n    };\n    if (config.tags) {\n      if (!config.detail)\n        config.detail = {\n          tags: config.tags\n        };\n      else config.detail.tags = config.tags;\n    }\n    if (config.nativeStaticResponse === void 0)\n      config.nativeStaticResponse = true;\n    this.config = {};\n    this.applyConfig(config ?? {});\n    this[\"~adapter\"] = config.adapter ?? (typeof Bun !== \"undefined\" ? _adapter_bun_index_mjs__WEBPACK_IMPORTED_MODULE_3__.BunAdapter : _adapter_web_standard_index_mjs__WEBPACK_IMPORTED_MODULE_4__.WebStandardAdapter);\n    if (config?.analytic && (config?.name || config?.seed !== void 0))\n      this.telemetry.stack = new Error().stack;\n  }\n  get store() {\n    return this.singleton.store;\n  }\n  get decorator() {\n    return this.singleton.decorator;\n  }\n  get routes() {\n    return this.router.history;\n  }\n  getGlobalRoutes() {\n    return this.router.history;\n  }\n  getServer() {\n    return this.server;\n  }\n  getParent() {\n    return null;\n  }\n  get promisedModules() {\n    if (!this._promisedModules) this._promisedModules = new _utils_mjs__WEBPACK_IMPORTED_MODULE_6__.PromiseGroup();\n    return this._promisedModules;\n  }\n  env(model, _env = _universal_env_mjs__WEBPACK_IMPORTED_MODULE_5__.env) {\n    const validator = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getSchemaValidator)(model, {\n      modules: this.definitions.typebox,\n      dynamic: true,\n      additionalProperties: true,\n      coerce: true\n    });\n    if (validator.Check(_env) === false) {\n      const error2 = new _error_mjs__WEBPACK_IMPORTED_MODULE_10__.ValidationError(\"env\", model, _env);\n      throw new Error(error2.all.map((x) => x.summary).join(\"\\n\"));\n    }\n    return this;\n  }\n  /**\n   * @private DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n   * @version 1.1.0\n   *\n   * ! Do not use unless you know exactly what you are doing\n   * ? Add Higher order function to Elysia.fetch\n   */\n  wrap(fn) {\n    this.extender.higherOrderFunctions.push({\n      checksum: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.checksum)(\n        JSON.stringify({\n          name: this.config.name,\n          seed: this.config.seed,\n          content: fn.toString()\n        })\n      ),\n      fn\n    });\n    return this;\n  }\n  applyMacro(localHook) {\n    if (this.extender.macros.length) {\n      const manage = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.createMacroManager)({\n        globalHook: this.event,\n        localHook\n      });\n      const manager = {\n        events: {\n          global: this.event,\n          local: localHook\n        },\n        get onParse() {\n          return manage(\"parse\");\n        },\n        get onTransform() {\n          return manage(\"transform\");\n        },\n        get onBeforeHandle() {\n          return manage(\"beforeHandle\");\n        },\n        get onAfterHandle() {\n          return manage(\"afterHandle\");\n        },\n        get mapResponse() {\n          return manage(\"mapResponse\");\n        },\n        get onAfterResponse() {\n          return manage(\"afterResponse\");\n        },\n        get onError() {\n          return manage(\"error\");\n        }\n      };\n      for (const macro of this.extender.macros)\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.traceBackMacro)(macro.fn(manager), localHook, manage);\n    }\n  }\n  applyConfig(config) {\n    this.config = {\n      prefix: \"\",\n      aot: _universal_env_mjs__WEBPACK_IMPORTED_MODULE_5__.env.ELYSIA_AOT !== \"false\",\n      normalize: true,\n      ...config,\n      cookie: {\n        path: \"/\",\n        ...config?.cookie\n      },\n      experimental: config?.experimental ?? {},\n      seed: config?.seed === void 0 ? \"\" : config?.seed\n    };\n    return this;\n  }\n  get models() {\n    const models = {};\n    for (const name of Object.keys(this.definitions.type))\n      models[name] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getSchemaValidator)(\n        // @ts-expect-error\n        this.definitions.typebox.Import(name)\n      );\n    models.modules = this.definitions.typebox;\n    return models;\n  }\n  add(method, path, handle, localHook, { allowMeta = false, skipPrefix = false } = {\n    allowMeta: false,\n    skipPrefix: false\n  }) {\n    localHook = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.compressHistoryHook)((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.localHookToLifeCycleStore)(localHook));\n    if (path !== \"\" && path.charCodeAt(0) !== 47) path = \"/\" + path;\n    if (this.config.prefix && !skipPrefix) path = this.config.prefix + path;\n    if (localHook?.type)\n      switch (localHook.type) {\n        case \"text\":\n          localHook.type = \"text/plain\";\n          break;\n        case \"json\":\n          localHook.type = \"application/json\";\n          break;\n        case \"formdata\":\n          localHook.type = \"multipart/form-data\";\n          break;\n        case \"urlencoded\":\n          localHook.type = \"application/x-www-form-urlencoded\";\n          break;\n        case \"arrayBuffer\":\n          localHook.type = \"application/octet-stream\";\n          break;\n        default:\n          break;\n      }\n    const models = this.definitions.type;\n    const dynamic = !this.config.aot;\n    const instanceValidator = { ...this.validator.getCandidate() };\n    const cloned = {\n      body: localHook?.body ?? instanceValidator?.body,\n      headers: localHook?.headers ?? instanceValidator?.headers,\n      params: localHook?.params ?? instanceValidator?.params,\n      query: localHook?.query ?? instanceValidator?.query,\n      cookie: localHook?.cookie ?? instanceValidator?.cookie,\n      response: localHook?.response ?? instanceValidator?.response\n    };\n    const cookieValidator = () => cloned.cookie ? (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getCookieValidator)({\n      modules,\n      validator: cloned.cookie,\n      defaultConfig: this.config.cookie,\n      config: cloned.cookie?.config ?? {},\n      dynamic,\n      models\n    }) : void 0;\n    const normalize = this.config.normalize;\n    const modules = this.definitions.typebox;\n    const validator = this.config.precompile === true || typeof this.config.precompile === \"object\" && this.config.precompile.schema === true ? {\n      body: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getSchemaValidator)(cloned.body, {\n        modules,\n        dynamic,\n        models,\n        normalize,\n        additionalCoerce: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.coercePrimitiveRoot)()\n      }),\n      headers: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getSchemaValidator)(cloned.headers, {\n        modules,\n        dynamic,\n        models,\n        additionalProperties: !this.config.normalize,\n        coerce: true,\n        additionalCoerce: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.stringToStructureCoercions)()\n      }),\n      params: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getSchemaValidator)(cloned.params, {\n        modules,\n        dynamic,\n        models,\n        coerce: true,\n        additionalCoerce: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.stringToStructureCoercions)()\n      }),\n      query: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getSchemaValidator)(cloned.query, {\n        modules,\n        dynamic,\n        models,\n        normalize,\n        coerce: true,\n        additionalCoerce: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.stringToStructureCoercions)()\n      }),\n      cookie: cookieValidator(),\n      response: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getResponseSchemaValidator)(cloned.response, {\n        modules,\n        dynamic,\n        models,\n        normalize\n      })\n    } : {\n      createBody() {\n        if (this.body) return this.body;\n        return this.body = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getSchemaValidator)(\n          cloned.body,\n          {\n            modules,\n            dynamic,\n            models,\n            normalize,\n            additionalCoerce: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.coercePrimitiveRoot)()\n          }\n        );\n      },\n      createHeaders() {\n        if (this.headers) return this.headers;\n        return this.headers = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getSchemaValidator)(\n          cloned.headers,\n          {\n            modules,\n            dynamic,\n            models,\n            additionalProperties: !normalize,\n            coerce: true,\n            additionalCoerce: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.stringToStructureCoercions)()\n          }\n        );\n      },\n      createParams() {\n        if (this.params) return this.params;\n        return this.params = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getSchemaValidator)(\n          cloned.params,\n          {\n            modules,\n            dynamic,\n            models,\n            coerce: true,\n            additionalCoerce: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.stringToStructureCoercions)()\n          }\n        );\n      },\n      createQuery() {\n        if (this.query) return this.query;\n        return this.query = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getSchemaValidator)(\n          cloned.query,\n          {\n            modules,\n            dynamic,\n            models,\n            coerce: true,\n            additionalCoerce: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.stringToStructureCoercions)()\n          }\n        );\n      },\n      createCookie() {\n        if (this.cookie) return this.cookie;\n        return this.cookie = cookieValidator();\n      },\n      createResponse() {\n        if (this.response) return this.response;\n        return this.response = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getResponseSchemaValidator)(\n          cloned.response,\n          {\n            modules,\n            dynamic,\n            models,\n            normalize\n          }\n        );\n      }\n    };\n    localHook = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeHook)(\n      localHook,\n      (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.compressHistoryHook)(instanceValidator)\n    );\n    if (localHook.tags) {\n      if (!localHook.detail)\n        localHook.detail = {\n          tags: localHook.tags\n        };\n      else localHook.detail.tags = localHook.tags;\n    }\n    if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.isNotEmpty)(this.config.detail))\n      localHook.detail = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeDeep)(\n        Object.assign({}, this.config.detail),\n        localHook.detail\n      );\n    this.applyMacro(localHook);\n    const hooks = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.compressHistoryHook)((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeHook)(this.event, localHook));\n    if (this.config.aot === false) {\n      this.router.dynamic.add(method, path, {\n        validator,\n        hooks,\n        content: localHook?.type,\n        handle,\n        route: path\n      });\n      const encoded = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.encodePath)(path, { dynamic: true });\n      if (path !== encoded) {\n        this.router.dynamic.add(method, encoded, {\n          validator,\n          hooks,\n          content: localHook?.type,\n          handle,\n          route: path\n        });\n      }\n      if (this.config.strictPath === false) {\n        const loosePath = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getLoosePath)(path);\n        this.router.dynamic.add(method, loosePath, {\n          validator,\n          hooks,\n          content: localHook?.type,\n          handle,\n          route: path\n        });\n        const encoded2 = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.encodePath)(loosePath);\n        if (loosePath !== encoded2)\n          this.router.dynamic.add(method, loosePath, {\n            validator,\n            hooks,\n            content: localHook?.type,\n            handle,\n            route: path\n          });\n      }\n      this.router.history.push({\n        method,\n        path,\n        composed: null,\n        handler: handle,\n        hooks\n      });\n      return;\n    }\n    const shouldPrecompile = this.config.precompile === true || typeof this.config.precompile === \"object\" && this.config.precompile.compose === true;\n    const inference = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.cloneInference)(this.inference);\n    const adapter = this[\"~adapter\"].handler;\n    const staticHandler = typeof handle !== \"function\" && typeof adapter.createStaticHandler === \"function\" ? adapter.createStaticHandler(handle, hooks, this.setHeaders) : void 0;\n    const nativeStaticHandler = typeof handle !== \"function\" ? adapter.createNativeStaticHandler?.(\n      handle,\n      hooks,\n      this.setHeaders\n    ) : void 0;\n    if (this.config.nativeStaticResponse === true && nativeStaticHandler && (method === \"GET\" || method === \"ALL\"))\n      this.router.static.http.static[path] = nativeStaticHandler();\n    let compile = (asManifest = false) => (0,_compose_mjs__WEBPACK_IMPORTED_MODULE_7__.composeHandler)({\n      app: this,\n      path,\n      method,\n      hooks,\n      validator,\n      handler: typeof handle !== \"function\" && typeof adapter.createStaticHandler !== \"function\" ? () => handle : handle,\n      allowMeta,\n      inference,\n      asManifest\n    });\n    let oldIndex;\n    if (this.routeTree.has(method + path))\n      for (let i = 0; i < this.router.history.length; i++) {\n        const route = this.router.history[i];\n        if (route.path === path && route.method === method) {\n          oldIndex = i;\n          break;\n        }\n      }\n    else this.routeTree.set(method + path, this.router.history.length);\n    const history = this.router.history;\n    const index = oldIndex ?? this.router.history.length;\n    const mainHandler = shouldPrecompile ? compile() : (ctx) => {\n      const temp = (history[index].composed = compile())(ctx);\n      compile = void 0;\n      return temp;\n    };\n    if (shouldPrecompile) compile = void 0;\n    const isWebSocket = method === \"$INTERNALWS\";\n    if (oldIndex !== void 0)\n      this.router.history[oldIndex] = // @ts-ignore\n      Object.assign(\n        {\n          method,\n          path,\n          composed: mainHandler,\n          handler: handle,\n          hooks\n        },\n        localHook.webSocket ? { websocket: localHook.websocket } : {}\n      );\n    else\n      this.router.history.push(\n        // @ts-ignore\n        Object.assign(\n          {\n            method,\n            path,\n            composed: mainHandler,\n            handler: handle,\n            hooks\n          },\n          localHook.webSocket ? { websocket: localHook.websocket } : {}\n        )\n      );\n    const staticRouter = this.router.static.http;\n    const handler = {\n      handler: shouldPrecompile ? mainHandler : void 0,\n      compile() {\n        return this.handler = compile();\n      }\n    };\n    if (isWebSocket) {\n      this.router.http.add(\"ws\", path, handler);\n      if (!this.config.strictPath)\n        this.router.http.add(\"ws\", (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getLoosePath)(path), handler);\n      const encoded = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.encodePath)(path, { dynamic: true });\n      if (encoded !== path) this.router.http.add(\"ws\", encoded, handler);\n      return;\n    }\n    if (path.indexOf(\":\") === -1 && path.indexOf(\"*\") === -1) {\n      if (!staticRouter.map[path])\n        staticRouter.map[path] = {\n          code: \"\"\n        };\n      const ctx = staticHandler ? \"\" : \"c\";\n      if (method === \"ALL\")\n        staticRouter.map[path].all = `default:return ht[${index}].composed(${ctx})\n`;\n      else\n        staticRouter.map[path].code = `case '${method}':return ht[${index}].composed(${ctx})\n${staticRouter.map[path].code}`;\n      if (!this.config.strictPath && this.config.nativeStaticResponse === true && nativeStaticHandler && (method === \"GET\" || method === \"ALL\"))\n        this.router.static.http.static[(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getLoosePath)(path)] = nativeStaticHandler();\n    } else {\n      this.router.http.add(method, path, handler);\n      if (!this.config.strictPath) {\n        const loosePath = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.getLoosePath)(path);\n        if (this.config.nativeStaticResponse === true && staticHandler && (method === \"GET\" || method === \"ALL\"))\n          this.router.static.http.static[loosePath] = staticHandler();\n        this.router.http.add(method, loosePath, handler);\n      }\n      const encoded = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.encodePath)(path, { dynamic: true });\n      if (path !== encoded) {\n        this.router.http.add(method, encoded, handler);\n        if (this.config.nativeStaticResponse === true && staticHandler && (method === \"GET\" || method === \"ALL\"))\n          this.router.static.http.static[encoded] = staticHandler();\n        this.router.http.add(method, encoded, handler);\n      }\n    }\n  }\n  headers(header) {\n    if (!header) return this;\n    if (!this.setHeaders) this.setHeaders = {};\n    this.setHeaders = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeDeep)(this.setHeaders, header);\n    return this;\n  }\n  /**\n   * ### start | Life cycle event\n   * Called after server is ready for serving\n   *\n   * ---\n   * @example\n   * ```typescript\n   * new Elysia()\n   *     .onStart(({ server }) => {\n   *         console.log(\"Running at ${server?.url}:${server?.port}\")\n   *     })\n   *     .listen(3000)\n   * ```\n   */\n  onStart(handler) {\n    this.on(\"start\", handler);\n    return this;\n  }\n  /**\n   * ### request | Life cycle event\n   * Called on every new request is accepted\n   *\n   * ---\n   * @example\n   * ```typescript\n   * new Elysia()\n   *     .onRequest(({ method, url }) => {\n   *         saveToAnalytic({ method, url })\n   *     })\n   * ```\n   */\n  onRequest(handler) {\n    this.on(\"request\", handler);\n    return this;\n  }\n  onParse(options, handler) {\n    if (!handler) {\n      if (typeof options === \"string\")\n        return this.on(\"parse\", this[\"~parser\"][options]);\n      return this.on(\"parse\", options);\n    }\n    return this.on(\n      options,\n      \"parse\",\n      handler\n    );\n  }\n  /**\n   * ### parse | Life cycle event\n   * Callback function to handle body parsing\n   *\n   * If truthy value is returned, will be assigned to `context.body`\n   * Otherwise will skip the callback and look for the next one.\n   *\n   * Equivalent to Express's body parser\n   *\n   * ---\n   * @example\n   * ```typescript\n   * new Elysia()\n   *     .onParse((request, contentType) => {\n   *         if(contentType === \"application/json\")\n   *             return request.json()\n   *     })\n   * ```\n   */\n  parser(name, parser) {\n    this[\"~parser\"][name] = parser;\n    return this;\n  }\n  onTransform(options, handler) {\n    if (!handler) return this.on(\"transform\", options);\n    return this.on(\n      options,\n      \"transform\",\n      handler\n    );\n  }\n  resolve(optionsOrResolve, resolve) {\n    if (!resolve) {\n      resolve = optionsOrResolve;\n      optionsOrResolve = { as: \"local\" };\n    }\n    const hook = {\n      subType: \"resolve\",\n      fn: resolve\n    };\n    return this.onBeforeHandle(optionsOrResolve, hook);\n  }\n  mapResolve(optionsOrResolve, mapper) {\n    if (!mapper) {\n      mapper = optionsOrResolve;\n      optionsOrResolve = { as: \"local\" };\n    }\n    const hook = {\n      subType: \"mapResolve\",\n      fn: mapper\n    };\n    return this.onBeforeHandle(optionsOrResolve, hook);\n  }\n  onBeforeHandle(options, handler) {\n    if (!handler) return this.on(\"beforeHandle\", options);\n    return this.on(\n      options,\n      \"beforeHandle\",\n      handler\n    );\n  }\n  onAfterHandle(options, handler) {\n    if (!handler) return this.on(\"afterHandle\", options);\n    return this.on(\n      options,\n      \"afterHandle\",\n      handler\n    );\n  }\n  mapResponse(options, handler) {\n    if (!handler) return this.on(\"mapResponse\", options);\n    return this.on(\n      options,\n      \"mapResponse\",\n      handler\n    );\n  }\n  onAfterResponse(options, handler) {\n    if (!handler) return this.on(\"afterResponse\", options);\n    return this.on(\n      options,\n      \"afterResponse\",\n      handler\n    );\n  }\n  /**\n   * ### After Handle | Life cycle event\n   * Intercept request **after** main handler is called.\n   *\n   * If truthy value is returned, will be assigned as `Response`\n   *\n   * ---\n   * @example\n   * ```typescript\n   * new Elysia()\n   *     .onAfterHandle((context, response) => {\n   *         if(typeof response === \"object\")\n   *             return JSON.stringify(response)\n   *     })\n   * ```\n   */\n  trace(options, handler) {\n    if (!handler) {\n      handler = options;\n      options = { as: \"local\" };\n    }\n    if (!Array.isArray(handler)) handler = [handler];\n    for (const fn of handler)\n      this.on(\n        options,\n        \"trace\",\n        (0,_trace_mjs__WEBPACK_IMPORTED_MODULE_8__.createTracer)(fn)\n      );\n    return this;\n  }\n  error(name, error2) {\n    switch (typeof name) {\n      case \"string\":\n        error2.prototype[_error_mjs__WEBPACK_IMPORTED_MODULE_10__.ERROR_CODE] = name;\n        this.definitions.error[name] = error2;\n        return this;\n      case \"function\":\n        this.definitions.error = name(this.definitions.error);\n        return this;\n    }\n    for (const [code, error3] of Object.entries(name)) {\n      error3.prototype[_error_mjs__WEBPACK_IMPORTED_MODULE_10__.ERROR_CODE] = code;\n      this.definitions.error[code] = error3;\n    }\n    return this;\n  }\n  /**\n   * ### Error | Life cycle event\n   * Called when error is thrown during processing request\n   *\n   * ---\n   * @example\n   * ```typescript\n   * new Elysia()\n   *     .onError(({ code }) => {\n   *         if(code === \"NOT_FOUND\")\n   *             return \"Path not found :(\"\n   *     })\n   * ```\n   */\n  onError(options, handler) {\n    if (!handler) return this.on(\"error\", options);\n    return this.on(\n      options,\n      \"error\",\n      handler\n    );\n  }\n  /**\n   * ### stop | Life cycle event\n   * Called after server stop serving request\n   *\n   * ---\n   * @example\n   * ```typescript\n   * new Elysia()\n   *     .onStop((app) => {\n   *         cleanup()\n   *     })\n   * ```\n   */\n  onStop(handler) {\n    this.on(\"stop\", handler);\n    return this;\n  }\n  on(optionsOrType, typeOrHandlers, handlers) {\n    let type;\n    switch (typeof optionsOrType) {\n      case \"string\":\n        type = optionsOrType;\n        handlers = typeOrHandlers;\n        break;\n      case \"object\":\n        type = typeOrHandlers;\n        if (!Array.isArray(typeOrHandlers) && typeof typeOrHandlers === \"object\")\n          handlers = typeOrHandlers;\n        break;\n    }\n    if (Array.isArray(handlers)) handlers = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.fnToContainer)(handlers);\n    else {\n      if (typeof handlers === \"function\")\n        handlers = [\n          {\n            fn: handlers\n          }\n        ];\n      else handlers = [handlers];\n    }\n    const handles = handlers;\n    for (const handle of handles) {\n      handle.scope = typeof optionsOrType === \"string\" ? \"local\" : optionsOrType?.as ?? \"local\";\n      if (type === \"resolve\" || type === \"derive\") handle.subType = type;\n    }\n    if (type !== \"trace\")\n      (0,_sucrose_mjs__WEBPACK_IMPORTED_MODULE_2__.sucrose)(\n        {\n          [type]: handles.map((x) => x.fn)\n        },\n        this.inference\n      );\n    for (const handle of handles) {\n      const fn = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.asHookType)(handle, \"global\", { skipIfHasType: true });\n      switch (type) {\n        case \"start\":\n          this.event.start ??= [];\n          this.event.start.push(fn);\n          break;\n        case \"request\":\n          this.event.request ??= [];\n          this.event.request.push(fn);\n          break;\n        case \"parse\":\n          this.event.parse ??= [];\n          this.event.parse.push(fn);\n          break;\n        case \"transform\":\n          this.event.transform ??= [];\n          this.event.transform.push(fn);\n          break;\n        // @ts-expect-error\n        case \"derive\":\n          this.event.transform ??= [];\n          this.event.transform.push(\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.fnToContainer)(fn, \"derive\")\n          );\n          break;\n        case \"beforeHandle\":\n          this.event.beforeHandle ??= [];\n          this.event.beforeHandle.push(fn);\n          break;\n        // @ts-expect-error\n        // eslint-disable-next-line sonarjs/no-duplicated-branches\n        case \"resolve\":\n          this.event.beforeHandle ??= [];\n          this.event.beforeHandle.push(\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.fnToContainer)(fn, \"resolve\")\n          );\n          break;\n        case \"afterHandle\":\n          this.event.afterHandle ??= [];\n          this.event.afterHandle.push(fn);\n          break;\n        case \"mapResponse\":\n          this.event.mapResponse ??= [];\n          this.event.mapResponse.push(fn);\n          break;\n        case \"afterResponse\":\n          this.event.afterResponse ??= [];\n          this.event.afterResponse.push(fn);\n          break;\n        case \"trace\":\n          this.event.trace ??= [];\n          this.event.trace.push(fn);\n          break;\n        case \"error\":\n          this.event.error ??= [];\n          this.event.error.push(fn);\n          break;\n        case \"stop\":\n          this.event.stop ??= [];\n          this.event.stop.push(fn);\n          break;\n      }\n    }\n    return this;\n  }\n  /**\n   * @deprecated use `Elysia.as` instead\n   *\n   * Will be removed in Elysia 1.2\n   */\n  propagate() {\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.parse);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.transform);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.beforeHandle);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.afterHandle);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.mapResponse);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.afterResponse);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.trace);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.error);\n    return this;\n  }\n  as(type) {\n    const castType = { plugin: \"scoped\", scoped: \"scoped\", global: \"global\" }[type];\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.parse, castType);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.transform, castType);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.beforeHandle, castType);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.afterHandle, castType);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.mapResponse, castType);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.afterResponse, castType);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.trace, castType);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.promoteEvent)(this.event.error, castType);\n    if (type === \"plugin\") {\n      this.validator.scoped = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeSchemaValidator)(\n        this.validator.scoped,\n        this.validator.local\n      );\n      this.validator.local = null;\n    } else if (type === \"global\") {\n      this.validator.global = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeSchemaValidator)(\n        this.validator.global,\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeSchemaValidator)(\n          this.validator.scoped,\n          this.validator.local\n        )\n      );\n      this.validator.scoped = null;\n      this.validator.local = null;\n    }\n    return this;\n  }\n  /**\n   * ### group\n   * Encapsulate and group path with prefix\n   *\n   * ---\n   * @example\n   * ```typescript\n   * new Elysia()\n   *     .group('/v1', app => app\n   *         .get('/', () => 'Hi')\n   *         .get('/name', () => 'Elysia')\n   *     })\n   * ```\n   */\n  group(prefix, schemaOrRun, run) {\n    const instance = new Elysia({\n      ...this.config,\n      prefix: \"\"\n    });\n    instance.singleton = { ...this.singleton };\n    instance.definitions = { ...this.definitions };\n    instance.getServer = () => this.getServer();\n    instance.inference = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.cloneInference)(this.inference);\n    instance.extender = { ...this.extender };\n    const isSchema = typeof schemaOrRun === \"object\";\n    const sandbox = (isSchema ? run : schemaOrRun)(instance);\n    this.singleton = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeDeep)(this.singleton, instance.singleton);\n    this.definitions = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeDeep)(this.definitions, instance.definitions);\n    if (sandbox.event.request?.length)\n      this.event.request = [\n        ...this.event.request || [],\n        ...sandbox.event.request || []\n      ];\n    if (sandbox.event.mapResponse?.length)\n      this.event.mapResponse = [\n        ...this.event.mapResponse || [],\n        ...sandbox.event.mapResponse || []\n      ];\n    this.model(sandbox.definitions.type);\n    Object.values(instance.router.history).forEach(\n      ({ method, path, handler, hooks }) => {\n        path = (isSchema ? \"\" : this.config.prefix) + prefix + path;\n        if (isSchema) {\n          const hook = schemaOrRun;\n          const localHook = hooks;\n          this.add(\n            method,\n            path,\n            handler,\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeHook)(hook, {\n              ...localHook || {},\n              error: !localHook.error ? sandbox.event.error : Array.isArray(localHook.error) ? [\n                ...localHook.error || {},\n                ...sandbox.event.error || {}\n              ] : [\n                localHook.error,\n                ...sandbox.event.error || {}\n              ]\n            })\n          );\n        } else {\n          this.add(\n            method,\n            path,\n            handler,\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeHook)(hooks, {\n              error: sandbox.event.error\n            }),\n            {\n              skipPrefix: true\n            }\n          );\n        }\n      }\n    );\n    return this;\n  }\n  /**\n   * ### guard\n   * Encapsulate and pass hook into all child handler\n   *\n   * ---\n   * @example\n   * ```typescript\n   * import { t } from 'elysia'\n   *\n   * new Elysia()\n   *     .guard({\n   *          schema: {\n   *              body: t.Object({\n   *                  username: t.String(),\n   *                  password: t.String()\n   *              })\n   *          }\n   *     }, app => app\n   *         .get(\"/\", () => 'Hi')\n   *         .get(\"/name\", () => 'Elysia')\n   *     })\n   * ```\n   */\n  guard(hook, run) {\n    if (!run) {\n      if (typeof hook === \"object\") {\n        this.applyMacro(hook);\n        const type = hook.as ?? \"local\";\n        this.validator[type] = {\n          body: hook.body ?? this.validator[type]?.body,\n          headers: hook.headers ?? this.validator[type]?.headers,\n          params: hook.params ?? this.validator[type]?.params,\n          query: hook.query ?? this.validator[type]?.query,\n          response: hook.response ?? this.validator[type]?.response,\n          cookie: hook.cookie ?? this.validator[type]?.cookie\n        };\n        if (hook.parse) this.on({ as: type }, \"parse\", hook.parse);\n        if (hook.transform)\n          this.on({ as: type }, \"transform\", hook.transform);\n        if (hook.derive) this.on({ as: type }, \"derive\", hook.derive);\n        if (hook.beforeHandle)\n          this.on({ as: type }, \"beforeHandle\", hook.beforeHandle);\n        if (hook.resolve) this.on({ as: type }, \"resolve\", hook.resolve);\n        if (hook.afterHandle)\n          this.on({ as: type }, \"afterHandle\", hook.afterHandle);\n        if (hook.mapResponse)\n          this.on({ as: type }, \"mapResponse\", hook.mapResponse);\n        if (hook.afterResponse)\n          this.on({ as: type }, \"afterResponse\", hook.afterResponse);\n        if (hook.error) this.on({ as: type }, \"error\", hook.error);\n        if (hook.detail) {\n          if (this.config.detail)\n            this.config.detail = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeDeep)(\n              Object.assign({}, this.config.detail),\n              hook.detail\n            );\n          else this.config.detail = hook.detail;\n        }\n        if (hook?.tags) {\n          if (!this.config.detail)\n            this.config.detail = {\n              tags: hook.tags\n            };\n          else this.config.detail.tags = hook.tags;\n        }\n        return this;\n      }\n      return this.guard({}, hook);\n    }\n    const instance = new Elysia({\n      ...this.config,\n      prefix: \"\"\n    });\n    instance.singleton = { ...this.singleton };\n    instance.definitions = { ...this.definitions };\n    instance.inference = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.cloneInference)(this.inference);\n    instance.extender = { ...this.extender };\n    const sandbox = run(instance);\n    this.singleton = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeDeep)(this.singleton, instance.singleton);\n    this.definitions = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeDeep)(this.definitions, instance.definitions);\n    sandbox.getServer = () => this.server;\n    if (sandbox.event.request?.length)\n      this.event.request = [\n        ...this.event.request || [],\n        ...sandbox.event.request || []\n      ];\n    if (sandbox.event.mapResponse?.length)\n      this.event.mapResponse = [\n        ...this.event.mapResponse || [],\n        ...sandbox.event.mapResponse || []\n      ];\n    this.model(sandbox.definitions.type);\n    Object.values(instance.router.history).forEach(\n      ({ method, path, handler, hooks: localHook }) => {\n        this.add(\n          method,\n          path,\n          handler,\n          (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeHook)(hook, {\n            ...localHook || {},\n            error: !localHook.error ? sandbox.event.error : Array.isArray(localHook.error) ? [\n              ...localHook.error || {},\n              ...sandbox.event.error || []\n            ] : [\n              localHook.error,\n              ...sandbox.event.error || []\n            ]\n          })\n        );\n      }\n    );\n    return this;\n  }\n  /**\n   * ### use\n   * Merge separate logic of Elysia with current\n   *\n   * ---\n   * @example\n   * ```typescript\n   * const plugin = (app: Elysia) => app\n   *     .get('/plugin', () => 'hi')\n   *\n   * new Elysia()\n   *     .use(plugin)\n   * ```\n   */\n  use(plugin, options) {\n    if (Array.isArray(plugin)) {\n      let app = this;\n      for (const p of plugin) app = app.use(p);\n      return app;\n    }\n    if (options?.scoped)\n      return this.guard({}, (app) => app.use(plugin));\n    if (Array.isArray(plugin)) {\n      let current = this;\n      for (const p of plugin) current = this.use(p);\n      return current;\n    }\n    if (plugin instanceof Promise) {\n      this.promisedModules.add(\n        plugin.then((plugin2) => {\n          if (typeof plugin2 === \"function\") return plugin2(this);\n          if (plugin2 instanceof Elysia)\n            return this._use(plugin2).compile();\n          if (plugin2.constructor.name === \"Elysia\")\n            return this._use(\n              plugin2\n            ).compile();\n          if (typeof plugin2.default === \"function\")\n            return plugin2.default(this);\n          if (plugin2.default instanceof Elysia)\n            return this._use(plugin2.default);\n          if (plugin2.constructor.name === \"Elysia\")\n            return this._use(plugin2.default);\n          if (plugin2.constructor.name === \"_Elysia\")\n            return this._use(plugin2.default);\n          try {\n            return this._use(plugin2.default);\n          } catch (error2) {\n            console.error(\n              'Invalid plugin type. Expected Elysia instance, function, or module with \"default\" as Elysia instance or function that returns Elysia instance.'\n            );\n            throw error2;\n          }\n        }).then((v) => {\n          if (v && typeof v.compile === \"function\") v.compile();\n          return v;\n        })\n      );\n      return this;\n    }\n    return this._use(plugin);\n  }\n  propagatePromiseModules(plugin) {\n    if (plugin.promisedModules.size <= 0) return this;\n    for (const promise of plugin.promisedModules.promises)\n      this.promisedModules.add(\n        promise.then((v) => {\n          if (!v) return;\n          const t3 = this._use(v);\n          if (t3 instanceof Promise)\n            return t3.then((v2) => {\n              if (v2) v2.compile();\n              else v.compile();\n            });\n          return v.compile();\n        })\n      );\n    return this;\n  }\n  _use(plugin) {\n    if (typeof plugin === \"function\") {\n      const instance = plugin(this);\n      if (instance instanceof Promise) {\n        this.promisedModules.add(\n          instance.then((plugin2) => {\n            if (plugin2 instanceof Elysia) {\n              plugin2.getServer = () => this.getServer();\n              plugin2.getGlobalRoutes = () => this.getGlobalRoutes();\n              plugin2.model(this.definitions.type);\n              plugin2.error(this.definitions.error);\n              for (const {\n                method,\n                path,\n                handler,\n                hooks\n              } of Object.values(plugin2.router.history))\n                this.add(\n                  method,\n                  path,\n                  handler,\n                  (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeHook)(hooks, {\n                    error: plugin2.event.error\n                  })\n                );\n              plugin2.compile();\n              if (plugin2 === this) return;\n              this.propagatePromiseModules(plugin2);\n              return plugin2;\n            }\n            if (typeof plugin2 === \"function\")\n              return plugin2(\n                this\n              );\n            if (typeof plugin2.default === \"function\")\n              return plugin2.default(\n                this\n              );\n            return this._use(plugin2);\n          }).then((v) => {\n            if (v && typeof v.compile === \"function\")\n              v.compile();\n            return v;\n          })\n        );\n        return this;\n      }\n      return instance;\n    }\n    this.propagatePromiseModules(plugin);\n    const { name, seed } = plugin.config;\n    plugin.getParent = () => this;\n    plugin.getServer = () => this.getServer();\n    plugin.getGlobalRoutes = () => this.getGlobalRoutes();\n    plugin.model(this.definitions.type);\n    plugin.error(this.definitions.error);\n    this[\"~parser\"] = {\n      ...plugin[\"~parser\"],\n      ...this[\"~parser\"]\n    };\n    this.headers(plugin.setHeaders);\n    if (name) {\n      if (!(name in this.dependencies)) this.dependencies[name] = [];\n      const current = seed !== void 0 ? (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.checksum)(name + JSON.stringify(seed)) : 0;\n      if (!this.dependencies[name].some(\n        ({ checksum: checksum3 }) => current === checksum3\n      )) {\n        this.extender.macros = this.extender.macros.concat(\n          plugin.extender.macros\n        );\n        this.extender.higherOrderFunctions = this.extender.higherOrderFunctions.concat(\n          plugin.extender.higherOrderFunctions\n        );\n      }\n    } else {\n      this.extender.macros = this.extender.macros.concat(\n        plugin.extender.macros\n      );\n      this.extender.higherOrderFunctions = this.extender.higherOrderFunctions.concat(\n        plugin.extender.higherOrderFunctions\n      );\n    }\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.deduplicateChecksum)(this.extender.macros);\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.deduplicateChecksum)(this.extender.higherOrderFunctions);\n    const hofHashes = [];\n    for (let i = 0; i < this.extender.higherOrderFunctions.length; i++) {\n      const hof = this.extender.higherOrderFunctions[i];\n      if (hof.checksum) {\n        if (hofHashes.includes(hof.checksum)) {\n          this.extender.higherOrderFunctions.splice(i, 1);\n          i--;\n        }\n        hofHashes.push(hof.checksum);\n      }\n    }\n    this.inference = {\n      body: this.inference.body || plugin.inference.body,\n      cookie: this.inference.cookie || plugin.inference.cookie,\n      headers: this.inference.headers || plugin.inference.headers,\n      query: this.inference.query || plugin.inference.query,\n      set: this.inference.set || plugin.inference.set,\n      server: this.inference.server || plugin.inference.server,\n      request: this.inference.request || plugin.inference.request,\n      route: this.inference.route || plugin.inference.route\n    };\n    this.decorate(plugin.singleton.decorator);\n    this.state(plugin.singleton.store);\n    this.model(plugin.definitions.type);\n    this.error(plugin.definitions.error);\n    plugin.extender.macros = this.extender.macros.concat(\n      plugin.extender.macros\n    );\n    for (const { method, path, handler, hooks } of Object.values(\n      plugin.router.history\n    )) {\n      this.add(\n        method,\n        path,\n        handler,\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeHook)(hooks, {\n          error: plugin.event.error\n        })\n      );\n    }\n    if (name) {\n      if (!(name in this.dependencies)) this.dependencies[name] = [];\n      const current = seed !== void 0 ? (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.checksum)(name + JSON.stringify(seed)) : 0;\n      if (this.dependencies[name].some(\n        ({ checksum: checksum3 }) => current === checksum3\n      ))\n        return this;\n      this.dependencies[name].push(\n        this.config?.analytic ? {\n          name: plugin.config.name,\n          seed: plugin.config.seed,\n          checksum: current,\n          dependencies: plugin.dependencies,\n          stack: plugin.telemetry.stack,\n          routes: plugin.router.history,\n          decorators: plugin.singleton,\n          store: plugin.singleton.store,\n          error: plugin.definitions.error,\n          derive: plugin.event.transform?.filter((x) => x?.subType === \"derive\").map((x) => ({\n            fn: x.toString(),\n            stack: new Error().stack ?? \"\"\n          })),\n          resolve: plugin.event.transform?.filter((x) => x?.subType === \"resolve\").map((x) => ({\n            fn: x.toString(),\n            stack: new Error().stack ?? \"\"\n          }))\n        } : {\n          name: plugin.config.name,\n          seed: plugin.config.seed,\n          checksum: current,\n          dependencies: plugin.dependencies\n        }\n      );\n      this.event = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeLifeCycle)(\n        this.event,\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.filterGlobalHook)(plugin.event),\n        current\n      );\n    } else {\n      this.event = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeLifeCycle)(\n        this.event,\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.filterGlobalHook)(plugin.event)\n      );\n    }\n    this.validator.global = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeHook)(this.validator.global, {\n      ...plugin.validator.global\n    });\n    this.validator.local = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeHook)(this.validator.local, {\n      ...plugin.validator.scoped\n    });\n    return this;\n  }\n  macro(macro) {\n    if (typeof macro === \"function\") {\n      const hook = {\n        checksum: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.checksum)(\n          JSON.stringify({\n            name: this.config.name,\n            seed: this.config.seed,\n            content: macro.toString()\n          })\n        ),\n        fn: macro\n      };\n      this.extender.macros.push(hook);\n    } else if (typeof macro === \"object\") {\n      for (const name of Object.keys(macro))\n        if (typeof macro[name] === \"object\") {\n          const actualValue = { ...macro[name] };\n          macro[name] = (v) => {\n            if (v === true) return actualValue;\n          };\n        }\n      const hook = {\n        checksum: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.checksum)(\n          JSON.stringify({\n            name: this.config.name,\n            seed: this.config.seed,\n            content: Object.entries(macro).map(([k, v]) => `${k}+${v}`).join(\",\")\n          })\n        ),\n        fn: () => macro\n      };\n      this.extender.macros.push(hook);\n    }\n    return this;\n  }\n  mount(path, handle) {\n    if (path instanceof Elysia || typeof path === \"function\" || path.length === 0 || path === \"/\") {\n      const run = typeof path === \"function\" ? path : path instanceof Elysia ? path.compile().fetch : handle instanceof Elysia ? handle.compile().fetch : handle;\n      const handler2 = ({ request, path: path2 }) => run(\n        new Request((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.replaceUrlPath)(request.url, path2), {\n          method: request.method,\n          headers: request.headers,\n          signal: request.signal,\n          credentials: request.credentials,\n          referrerPolicy: request.referrerPolicy,\n          duplex: request.duplex,\n          redirect: request.redirect,\n          mode: request.mode,\n          keepalive: request.keepalive,\n          integrity: request.integrity,\n          body: request.body\n        })\n      );\n      this.all(\"/*\", handler2, {\n        parse: \"none\"\n      });\n      return this;\n    }\n    if (!handle) return this;\n    const length = path.length - (path.endsWith(\"*\") ? 1 : 0);\n    if (handle instanceof Elysia) handle = handle.compile().fetch;\n    const handler = ({ request, path: path2 }) => handle(\n      new Request(\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.replaceUrlPath)(request.url, path2.slice(length) || \"/\"),\n        {\n          method: request.method,\n          headers: request.headers,\n          signal: request.signal,\n          credentials: request.credentials,\n          referrerPolicy: request.referrerPolicy,\n          duplex: request.duplex,\n          redirect: request.redirect,\n          mode: request.mode,\n          keepalive: request.keepalive,\n          integrity: request.integrity,\n          body: request.body\n        }\n      )\n    );\n    this.all(path, handler, {\n      parse: \"none\"\n    });\n    this.all(path + (path.endsWith(\"/\") ? \"*\" : \"/*\"), handler, {\n      parse: \"none\"\n    });\n    return this;\n  }\n  /**\n   * ### get\n   * Register handler for path with method [GET]\n   *\n   * ---\n   * @example\n   * ```typescript\n   * import { Elysia, t } from 'elysia'\n   *\n   * new Elysia()\n   *     .get('/', () => 'hi')\n   *     .get('/with-hook', () => 'hi', {\n   *         response: t.String()\n   *     })\n   * ```\n   */\n  get(path, handler, hook) {\n    this.add(\"GET\", path, handler, hook);\n    return this;\n  }\n  /**\n   * ### post\n   * Register handler for path with method [POST]\n   *\n   * ---\n   * @example\n   * ```typescript\n   * import { Elysia, t } from 'elysia'\n   *\n   * new Elysia()\n   *     .post('/', () => 'hi')\n   *     .post('/with-hook', () => 'hi', {\n   *         response: t.String()\n   *     })\n   * ```\n   */\n  post(path, handler, hook) {\n    this.add(\"POST\", path, handler, hook);\n    return this;\n  }\n  /**\n   * ### put\n   * Register handler for path with method [PUT]\n   *\n   * ---\n   * @example\n   * ```typescript\n   * import { Elysia, t } from 'elysia'\n   *\n   * new Elysia()\n   *     .put('/', () => 'hi')\n   *     .put('/with-hook', () => 'hi', {\n   *         response: t.String()\n   *     })\n   * ```\n   */\n  put(path, handler, hook) {\n    this.add(\"PUT\", path, handler, hook);\n    return this;\n  }\n  /**\n   * ### patch\n   * Register handler for path with method [PATCH]\n   *\n   * ---\n   * @example\n   * ```typescript\n   * import { Elysia, t } from 'elysia'\n   *\n   * new Elysia()\n   *     .patch('/', () => 'hi')\n   *     .patch('/with-hook', () => 'hi', {\n   *         response: t.String()\n   *     })\n   * ```\n   */\n  patch(path, handler, hook) {\n    this.add(\"PATCH\", path, handler, hook);\n    return this;\n  }\n  /**\n   * ### delete\n   * Register handler for path with method [DELETE]\n   *\n   * ---\n   * @example\n   * ```typescript\n   * import { Elysia, t } from 'elysia'\n   *\n   * new Elysia()\n   *     .delete('/', () => 'hi')\n   *     .delete('/with-hook', () => 'hi', {\n   *         response: t.String()\n   *     })\n   * ```\n   */\n  delete(path, handler, hook) {\n    this.add(\"DELETE\", path, handler, hook);\n    return this;\n  }\n  /**\n   * ### options\n   * Register handler for path with method [POST]\n   *\n   * ---\n   * @example\n   * ```typescript\n   * import { Elysia, t } from 'elysia'\n   *\n   * new Elysia()\n   *     .options('/', () => 'hi')\n   *     .options('/with-hook', () => 'hi', {\n   *         response: t.String()\n   *     })\n   * ```\n   */\n  options(path, handler, hook) {\n    this.add(\"OPTIONS\", path, handler, hook);\n    return this;\n  }\n  /**\n   * ### all\n   * Register handler for path with method [ALL]\n   *\n   * ---\n   * @example\n   * ```typescript\n   * import { Elysia, t } from 'elysia'\n   *\n   * new Elysia()\n   *     .all('/', () => 'hi')\n   *     .all('/with-hook', () => 'hi', {\n   *         response: t.String()\n   *     })\n   * ```\n   */\n  all(path, handler, hook) {\n    this.add(\"ALL\", path, handler, hook);\n    return this;\n  }\n  /**\n   * ### head\n   * Register handler for path with method [HEAD]\n   *\n   * ---\n   * @example\n   * ```typescript\n   * import { Elysia, t } from 'elysia'\n   *\n   * new Elysia()\n   *     .head('/', () => 'hi')\n   *     .head('/with-hook', () => 'hi', {\n   *         response: t.String()\n   *     })\n   * ```\n   */\n  head(path, handler, hook) {\n    this.add(\"HEAD\", path, handler, hook);\n    return this;\n  }\n  /**\n   * ### connect\n   * Register handler for path with method [CONNECT]\n   *\n   * ---\n   * @example\n   * ```typescript\n   * import { Elysia, t } from 'elysia'\n   *\n   * new Elysia()\n   *     .connect('/', () => 'hi')\n   *     .connect('/with-hook', () => 'hi', {\n   *         response: t.String()\n   *     })\n   * ```\n   */\n  connect(path, handler, hook) {\n    this.add(\"CONNECT\", path, handler, hook);\n    return this;\n  }\n  /**\n   * ### route\n   * Register handler for path with method [ROUTE]\n   *\n   * ---\n   * @example\n   * ```typescript\n   * import { Elysia, t } from 'elysia'\n   *\n   * new Elysia()\n   *     .route('/', () => 'hi')\n   *     .route('/with-hook', () => 'hi', {\n   *         response: t.String()\n   *     })\n   * ```\n   */\n  route(method, path, handler, hook) {\n    this.add(method.toUpperCase(), path, handler, hook, hook?.config);\n    return this;\n  }\n  /**\n   * ### ws\n   * Register handler for path with method [ws]\n   *\n   * ---\n   * @example\n   * ```typescript\n   * import { Elysia, t } from 'elysia'\n   *\n   * new Elysia()\n   *     .ws('/', {\n   *         message(ws, message) {\n   *             ws.send(message)\n   *         }\n   *     })\n   * ```\n   */\n  ws(path, options) {\n    if (this[\"~adapter\"].ws) this[\"~adapter\"].ws(this, path, options);\n    else console.warn(`Current adapter doesn't support WebSocket`);\n    return this;\n  }\n  /**\n   * ### state\n   * Assign global mutatable state accessible for all handler\n   *\n   * ---\n   * @example\n   * ```typescript\n   * new Elysia()\n   *     .state('counter', 0)\n   *     .get('/', (({ counter }) => ++counter)\n   * ```\n   */\n  state(options, name, value) {\n    if (name === void 0) {\n      value = options;\n      options = { as: \"append\" };\n      name = \"\";\n    } else if (value === void 0) {\n      if (typeof options === \"string\") {\n        value = name;\n        name = options;\n        options = { as: \"append\" };\n      } else if (typeof options === \"object\") {\n        value = name;\n        name = \"\";\n      }\n    }\n    const { as } = options;\n    if (typeof name !== \"string\") return this;\n    switch (typeof value) {\n      case \"object\":\n        if (name) {\n          if (name in this.singleton.store)\n            this.singleton.store[name] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeDeep)(\n              this.singleton.store[name],\n              value,\n              {\n                override: as === \"override\"\n              }\n            );\n          else this.singleton.store[name] = value;\n          return this;\n        }\n        if (value === null) return this;\n        this.singleton.store = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeDeep)(this.singleton.store, value, {\n          override: as === \"override\"\n        });\n        return this;\n      case \"function\":\n        if (name) {\n          if (as === \"override\" || !(name in this.singleton.store))\n            this.singleton.store[name] = value;\n        } else this.singleton.store = value(this.singleton.store);\n        return this;\n      default:\n        if (as === \"override\" || !(name in this.singleton.store))\n          this.singleton.store[name] = value;\n        return this;\n    }\n  }\n  /**\n   * ### decorate\n   * Define custom method to `Context` accessible for all handler\n   *\n   * ---\n   * @example\n   * ```typescript\n   * new Elysia()\n   *     .decorate('getDate', () => Date.now())\n   *     .get('/', (({ getDate }) => getDate())\n   * ```\n   */\n  decorate(options, name, value) {\n    if (name === void 0) {\n      value = options;\n      options = { as: \"append\" };\n      name = \"\";\n    } else if (value === void 0) {\n      if (typeof options === \"string\") {\n        value = name;\n        name = options;\n        options = { as: \"append\" };\n      } else if (typeof options === \"object\") {\n        value = name;\n        name = \"\";\n      }\n    }\n    const { as } = options;\n    if (typeof name !== \"string\") return this;\n    switch (typeof value) {\n      case \"object\":\n        if (name) {\n          if (name in this.singleton.decorator)\n            this.singleton.decorator[name] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeDeep)(\n              this.singleton.decorator[name],\n              value,\n              {\n                override: as === \"override\"\n              }\n            );\n          else this.singleton.decorator[name] = value;\n          return this;\n        }\n        if (value === null) return this;\n        this.singleton.decorator = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeDeep)(\n          this.singleton.decorator,\n          value,\n          {\n            override: as === \"override\"\n          }\n        );\n        return this;\n      case \"function\":\n        if (name) {\n          if (as === \"override\" || !(name in this.singleton.decorator))\n            this.singleton.decorator[name] = value;\n        } else\n          this.singleton.decorator = value(this.singleton.decorator);\n        return this;\n      default:\n        if (as === \"override\" || !(name in this.singleton.decorator))\n          this.singleton.decorator[name] = value;\n        return this;\n    }\n  }\n  derive(optionsOrTransform, transform) {\n    if (!transform) {\n      transform = optionsOrTransform;\n      optionsOrTransform = { as: \"local\" };\n    }\n    const hook = {\n      subType: \"derive\",\n      fn: transform\n    };\n    return this.onTransform(optionsOrTransform, hook);\n  }\n  model(name, model) {\n    const coerce = (schema) => (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.replaceSchemaType)(schema, [\n      {\n        from: _type_system_mjs__WEBPACK_IMPORTED_MODULE_1__.t.Number(),\n        to: (options) => _type_system_mjs__WEBPACK_IMPORTED_MODULE_1__.t.Numeric(options),\n        untilObjectFound: true\n      },\n      {\n        from: _type_system_mjs__WEBPACK_IMPORTED_MODULE_1__.t.Boolean(),\n        to: (options) => _type_system_mjs__WEBPACK_IMPORTED_MODULE_1__.t.BooleanString(options),\n        untilObjectFound: true\n      }\n    ]);\n    switch (typeof name) {\n      case \"object\":\n        const parsedSchemas = {};\n        const kvs = Object.entries(name);\n        for (const [key, value] of kvs) {\n          if (key in this.definitions.type) continue;\n          parsedSchemas[key] = this.definitions.type[key] = coerce(\n            value\n          );\n          parsedSchemas[key].$id ??= `#/components/schemas/${key}`;\n        }\n        this.definitions.typebox = _type_system_mjs__WEBPACK_IMPORTED_MODULE_1__.t.Module({\n          ...this.definitions.typebox[\"$defs\"],\n          ...parsedSchemas\n        });\n        return this;\n      case \"function\":\n        const result = coerce(name(this.definitions.type));\n        this.definitions.type = result;\n        this.definitions.typebox = _type_system_mjs__WEBPACK_IMPORTED_MODULE_1__.t.Module(result);\n        return this;\n      case \"string\":\n        if (!model) break;\n        const newModel = {\n          ...model,\n          id: model.$id ?? `#/components/schemas/${name}`\n        };\n        this.definitions.type[name] = model;\n        this.definitions.typebox = _type_system_mjs__WEBPACK_IMPORTED_MODULE_1__.t.Module({\n          ...this.definitions.typebox[\"$defs\"],\n          ...newModel\n        });\n        return this;\n    }\n    ;\n    this.definitions.type[name] = model;\n    this.definitions.typebox = _type_system_mjs__WEBPACK_IMPORTED_MODULE_1__.t.Module({\n      ...this.definitions.typebox[\"$defs\"],\n      [name]: model\n    });\n    return this;\n  }\n  mapDerive(optionsOrDerive, mapper) {\n    if (!mapper) {\n      mapper = optionsOrDerive;\n      optionsOrDerive = { as: \"local\" };\n    }\n    const hook = {\n      subType: \"mapDerive\",\n      fn: mapper\n    };\n    return this.onTransform(optionsOrDerive, hook);\n  }\n  affix(base, type, word) {\n    if (word === \"\") return this;\n    const delimieter = [\"_\", \"-\", \" \"];\n    const capitalize = (word2) => word2[0].toUpperCase() + word2.slice(1);\n    const joinKey = base === \"prefix\" ? (prefix, word2) => delimieter.includes(prefix.at(-1) ?? \"\") ? prefix + word2 : prefix + capitalize(word2) : delimieter.includes(word.at(-1) ?? \"\") ? (suffix, word2) => word2 + suffix : (suffix, word2) => word2 + capitalize(suffix);\n    const remap = (type2) => {\n      const store = {};\n      switch (type2) {\n        case \"decorator\":\n          for (const key in this.singleton.decorator) {\n            store[joinKey(word, key)] = this.singleton.decorator[key];\n          }\n          this.singleton.decorator = store;\n          break;\n        case \"state\":\n          for (const key in this.singleton.store)\n            store[joinKey(word, key)] = this.singleton.store[key];\n          this.singleton.store = store;\n          break;\n        case \"model\":\n          for (const key in this.definitions.type)\n            store[joinKey(word, key)] = this.definitions.type[key];\n          this.definitions.type = store;\n          break;\n        case \"error\":\n          for (const key in this.definitions.error)\n            store[joinKey(word, key)] = this.definitions.error[key];\n          this.definitions.error = store;\n          break;\n      }\n    };\n    const types = Array.isArray(type) ? type : [type];\n    for (const type2 of types.some((x) => x === \"all\") ? [\"decorator\", \"state\", \"model\", \"error\"] : types)\n      remap(type2);\n    return this;\n  }\n  prefix(type, word) {\n    return this.affix(\"prefix\", type, word);\n  }\n  suffix(type, word) {\n    return this.affix(\"suffix\", type, word);\n  }\n  compile() {\n    if (this[\"~adapter\"].isWebStandard) {\n      this.fetch = this.config.aot ? (0,_compose_mjs__WEBPACK_IMPORTED_MODULE_7__.composeGeneralHandler)(this) : (0,_dynamic_handle_mjs__WEBPACK_IMPORTED_MODULE_9__.createDynamicHandler)(this);\n      if (typeof this.server?.reload === \"function\")\n        this.server.reload({\n          ...this.server || {},\n          fetch: this.fetch\n        });\n      return this;\n    }\n    if (typeof this.server?.reload === \"function\")\n      this.server.reload(this.server || {});\n    this._handle = (0,_compose_mjs__WEBPACK_IMPORTED_MODULE_7__.composeGeneralHandler)(this);\n    return this;\n  }\n  /**\n   * Wait until all lazy loaded modules all load is fully\n   */\n  get modules() {\n    return this.promisedModules;\n  }\n}\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vZWx5c2lhQDEuMi4yNV9Ac2luY2xhaXIrdHlwZWJveEAwLjM0LjMzX3R5cGVzY3JpcHRANS44LjMvbm9kZV9tb2R1bGVzL2VseXNpYS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFzQztBQUNIO0FBQ0U7QUFDYTtBQUNpQjtBQUM1QjtBQWlCcEI7QUFLRTtBQUNtQjtBQWFyQjtBQUlTO0FBSVQ7QUFDbkI7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixlQUFlO0FBQ2YsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLGVBQWUsK0NBQUMsVUFBVTtBQUMxQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0VBQW9CO0FBQ25DLFVBQVUsZ0VBQW9CO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsZ0RBQVMsR0FBRyxZQUFZO0FBQ3hFO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnREFBUztBQUMvRDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLG1FQUFxQixTQUFTLHlFQUFvQjtBQUMvRjtBQUNBO0FBQ0EsbURBQW1ELGlFQUFtQixTQUFTLDhFQUF5QjtBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw0QkFBNEI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMsdUVBQXVFLDhEQUFVLEdBQUcsK0VBQWtCO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELG9EQUFZO0FBQ3hFO0FBQ0E7QUFDQSxvQkFBb0IsbURBQUc7QUFDdkIsc0JBQXNCLDhEQUFrQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHlCQUF5Qix3REFBZTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvREFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDhEQUFrQjtBQUN2QztBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDBEQUFjO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG1EQUFHO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsOERBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qyx3Q0FBd0M7QUFDakY7QUFDQTtBQUNBLEdBQUc7QUFDSCxnQkFBZ0IsK0RBQW1CLENBQUMscUVBQXlCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELDhEQUFrQjtBQUNwRTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxZQUFZLDhEQUFrQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiwrREFBbUI7QUFDN0MsT0FBTztBQUNQLGVBQWUsOERBQWtCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsc0VBQTBCO0FBQ3BELE9BQU87QUFDUCxjQUFjLDhEQUFrQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixzRUFBMEI7QUFDcEQsT0FBTztBQUNQLGFBQWEsOERBQWtCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsc0VBQTBCO0FBQ3BELE9BQU87QUFDUDtBQUNBLGdCQUFnQixzRUFBMEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQSwyQkFBMkIsOERBQWtCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwrREFBbUI7QUFDakQ7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsOEJBQThCLDhEQUFrQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixzRUFBMEI7QUFDeEQ7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsNkJBQTZCLDhEQUFrQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsc0VBQTBCO0FBQ3hEO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLDRCQUE0Qiw4REFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHNFQUEwQjtBQUN4RDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsK0JBQStCLHNFQUEwQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxREFBUztBQUN6QjtBQUNBLE1BQU0sK0RBQW1CO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFVO0FBQ2xCLHlCQUF5QixxREFBUztBQUNsQyx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLCtEQUFtQixDQUFDLHFEQUFTO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLHNCQUFzQixzREFBVSxTQUFTLGVBQWU7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLDBCQUEwQix3REFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QseUJBQXlCLHNEQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwwREFBYztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsNERBQWM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxzQkFBc0IsZ0NBQWdDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGdDQUFnQyxpQ0FBaUM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxrQ0FBa0MsaUNBQWlDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyx3REFBWTtBQUMvQyxzQkFBc0Isc0RBQVUsU0FBUyxlQUFlO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELE1BQU0sYUFBYSxJQUFJO0FBQ2pGO0FBQ0E7QUFDQSwrQ0FBK0MsT0FBTyxjQUFjLE1BQU0sYUFBYSxJQUFJO0FBQzNGLEVBQUUsNEJBQTRCO0FBQzlCO0FBQ0EsdUNBQXVDLHdEQUFZO0FBQ25ELE1BQU07QUFDTjtBQUNBO0FBQ0EsMEJBQTBCLHdEQUFZO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNEQUFVLFNBQVMsZUFBZTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHFEQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFFBQVE7QUFDN0IsdUNBQXVDLFlBQVksR0FBRyxhQUFhO0FBQ25FLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsYUFBYTtBQUNwQyw4QkFBOEIsYUFBYTtBQUMzQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0RBQVk7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1EQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1EQUFVO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixNQUFNO0FBQzNCO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0Qyx5REFBYTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHFEQUFPO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsc0RBQVUscUJBQXFCLHFCQUFxQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlEQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlEQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksd0RBQVk7QUFDaEIsSUFBSSx3REFBWTtBQUNoQixJQUFJLHdEQUFZO0FBQ2hCLElBQUksd0RBQVk7QUFDaEIsSUFBSSx3REFBWTtBQUNoQixJQUFJLHdEQUFZO0FBQ2hCLElBQUksd0RBQVk7QUFDaEIsSUFBSSx3REFBWTtBQUNoQjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0RBQXNEO0FBQzdFLElBQUksd0RBQVk7QUFDaEIsSUFBSSx3REFBWTtBQUNoQixJQUFJLHdEQUFZO0FBQ2hCLElBQUksd0RBQVk7QUFDaEIsSUFBSSx3REFBWTtBQUNoQixJQUFJLHdEQUFZO0FBQ2hCLElBQUksd0RBQVk7QUFDaEIsSUFBSSx3REFBWTtBQUNoQjtBQUNBLDhCQUE4QixnRUFBb0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sOEJBQThCLGdFQUFvQjtBQUNsRDtBQUNBLFFBQVEsZ0VBQW9CO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLDJCQUEyQjtBQUMzQiw2QkFBNkI7QUFDN0I7QUFDQSx5QkFBeUIsMERBQWM7QUFDdkMsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSxxQkFBcUIscURBQVM7QUFDOUIsdUJBQXVCLHFEQUFTO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsOEJBQThCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFEQUFTO0FBQ3JCLGdDQUFnQztBQUNoQztBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxREFBUztBQUNyQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsSUFBSTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxVQUFVO0FBQzVDO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUIsbUNBQW1DLFVBQVU7QUFDN0M7QUFDQSxvQkFBb0IsVUFBVTtBQUM5QixvQ0FBb0MsVUFBVTtBQUM5QztBQUNBLG9CQUFvQixVQUFVO0FBQzlCO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUI7QUFDQSxvQkFBb0IsVUFBVTtBQUM5QixrQ0FBa0MsVUFBVTtBQUM1QztBQUNBO0FBQ0EsaUNBQWlDLHFEQUFTO0FBQzFDLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwyQkFBMkI7QUFDM0IsNkJBQTZCO0FBQzdCLHlCQUF5QiwwREFBYztBQUN2QywwQkFBMEI7QUFDMUI7QUFDQSxxQkFBcUIscURBQVM7QUFDOUIsdUJBQXVCLHFEQUFTO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyx5Q0FBeUM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHFEQUFTO0FBQ25CLDhCQUE4QjtBQUM5QjtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHFEQUFTO0FBQzNCO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxhQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxvREFBUTtBQUNoRDtBQUNBLFdBQVcscUJBQXFCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLCtEQUFtQjtBQUN2QixJQUFJLCtEQUFtQjtBQUN2QjtBQUNBLG9CQUFvQiwrQ0FBK0M7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwrQkFBK0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxxREFBUztBQUNqQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxvREFBUTtBQUNoRDtBQUNBLFdBQVcscUJBQXFCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDBEQUFjO0FBQ2pDO0FBQ0EsUUFBUSw0REFBZ0I7QUFDeEI7QUFDQTtBQUNBLE1BQU07QUFDTixtQkFBbUIsMERBQWM7QUFDakM7QUFDQSxRQUFRLDREQUFnQjtBQUN4QjtBQUNBO0FBQ0EsNEJBQTRCLHFEQUFTO0FBQ3JDO0FBQ0EsS0FBSztBQUNMLDJCQUEyQixxREFBUztBQUNwQztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9EQUFRO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixvREFBUTtBQUMxQjtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsRUFBRSxHQUFHLEVBQUU7QUFDckUsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHNCQUFzQjtBQUNoRCxvQkFBb0IsMERBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQSxRQUFRLDBEQUFjO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFlBQVk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsWUFBWTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxZQUFZO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFlBQVk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsWUFBWTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxZQUFZO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFlBQVk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsWUFBWTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxZQUFZO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFlBQVk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsWUFBWTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsU0FBUztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLEtBQUs7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxxREFBUztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixxREFBUztBQUN4QztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFNBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxLQUFLO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMscURBQVM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMscURBQVM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsNkRBQWlCO0FBQ2hEO0FBQ0EsY0FBYywrQ0FBQztBQUNmLHlCQUF5QiwrQ0FBQztBQUMxQjtBQUNBLE9BQU87QUFDUDtBQUNBLGNBQWMsK0NBQUM7QUFDZix5QkFBeUIsK0NBQUM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELElBQUk7QUFDakU7QUFDQSxtQ0FBbUMsK0NBQUM7QUFDcEM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQywrQ0FBQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELEtBQUs7QUFDeEQ7QUFDQTtBQUNBLG1DQUFtQywrQ0FBQztBQUNwQztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLCtDQUFDO0FBQ2hDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsbUVBQXFCLFNBQVMseUVBQW9CO0FBQ3ZGO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDLG1CQUFtQixtRUFBcUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3lDO0FBQ1k7QUFHbEM7QUFpQkE7QUFVQTtBQUM0QjtBQUNNO0FBQ087QUFtQzFEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGxvbGhhXFxEZXNrdG9wXFxERVZcXGNvZGluZy5nbG9iYWwtd2ViXFxub2RlX21vZHVsZXNcXC5wbnBtXFxlbHlzaWFAMS4yLjI1X0BzaW5jbGFpcit0eXBlYm94QDAuMzQuMzNfdHlwZXNjcmlwdEA1LjguM1xcbm9kZV9tb2R1bGVzXFxlbHlzaWFcXGRpc3RcXGluZGV4Lm1qc3xyc2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVtb2lyaXN0IH0gZnJvbSBcIm1lbW9pcmlzdFwiO1xuaW1wb3J0eyB0IH1mcm9tXCIuL3R5cGUtc3lzdGVtLm1qc1wiO1xuaW1wb3J0eyBzdWNyb3NlIH1mcm9tXCIuL3N1Y3Jvc2UubWpzXCI7XG5pbXBvcnR7IEJ1bkFkYXB0ZXIgfWZyb21cIi4vYWRhcHRlci9idW4vaW5kZXgubWpzXCI7XG5pbXBvcnR7IFdlYlN0YW5kYXJkQWRhcHRlciB9ZnJvbVwiLi9hZGFwdGVyL3dlYi1zdGFuZGFyZC9pbmRleC5tanNcIjtcbmltcG9ydHsgZW52IH1mcm9tXCIuL3VuaXZlcnNhbC9lbnYubWpzXCI7XG5pbXBvcnR7XG4gIGNsb25lSW5mZXJlbmNlLFxuICBjb2VyY2VQcmltaXRpdmVSb290LFxuICBkZWR1cGxpY2F0ZUNoZWNrc3VtLFxuICBmblRvQ29udGFpbmVyLFxuICBnZXRMb29zZVBhdGgsXG4gIGxvY2FsSG9va1RvTGlmZUN5Y2xlU3RvcmUsXG4gIG1lcmdlRGVlcCxcbiAgbWVyZ2VTY2hlbWFWYWxpZGF0b3IsXG4gIFByb21pc2VHcm91cCxcbiAgcHJvbW90ZUV2ZW50LFxuICBzdHJpbmdUb1N0cnVjdHVyZUNvZXJjaW9ucyxcbiAgaXNOb3RFbXB0eSxcbiAgcmVwbGFjZVNjaGVtYVR5cGUsXG4gIGNvbXByZXNzSGlzdG9yeUhvb2ssXG4gIGVuY29kZVBhdGhcbn1mcm9tXCIuL3V0aWxzLm1qc1wiO1xuaW1wb3J0e1xuICBjb21wb3NlSGFuZGxlcixcbiAgY29tcG9zZUdlbmVyYWxIYW5kbGVyLFxuICBjb21wb3NlRXJyb3JIYW5kbGVyXG59ZnJvbVwiLi9jb21wb3NlLm1qc1wiO1xuaW1wb3J0eyBjcmVhdGVUcmFjZXIgfWZyb21cIi4vdHJhY2UubWpzXCI7XG5pbXBvcnR7XG4gIG1lcmdlSG9vayxcbiAgZ2V0U2NoZW1hVmFsaWRhdG9yLFxuICBnZXRSZXNwb25zZVNjaGVtYVZhbGlkYXRvcixcbiAgY2hlY2tzdW0sXG4gIG1lcmdlTGlmZUN5Y2xlLFxuICBmaWx0ZXJHbG9iYWxIb29rLFxuICBhc0hvb2tUeXBlLFxuICB0cmFjZUJhY2tNYWNybyxcbiAgcmVwbGFjZVVybFBhdGgsXG4gIGNyZWF0ZU1hY3JvTWFuYWdlcixcbiAgZ2V0Q29va2llVmFsaWRhdG9yXG59ZnJvbVwiLi91dGlscy5tanNcIjtcbmltcG9ydHtcbiAgY3JlYXRlRHluYW1pY0Vycm9ySGFuZGxlcixcbiAgY3JlYXRlRHluYW1pY0hhbmRsZXJcbn1mcm9tXCIuL2R5bmFtaWMtaGFuZGxlLm1qc1wiO1xuaW1wb3J0e1xuICBFUlJPUl9DT0RFLFxuICBWYWxpZGF0aW9uRXJyb3Jcbn1mcm9tXCIuL2Vycm9yLm1qc1wiO1xuY2xhc3MgRWx5c2lhIHtcbiAgY29uc3RydWN0b3IoY29uZmlnID0ge30pIHtcbiAgICB0aGlzLnNlcnZlciA9IG51bGw7XG4gICAgdGhpcy5kZXBlbmRlbmNpZXMgPSB7fTtcbiAgICB0aGlzLl9yb3V0ZXMgPSB7fTtcbiAgICB0aGlzLl90eXBlcyA9IHtcbiAgICAgIFByZWZpeDogXCJcIixcbiAgICAgIFNpbmdsZXRvbjoge30sXG4gICAgICBEZWZpbml0aW9uczoge30sXG4gICAgICBNZXRhZGF0YToge31cbiAgICB9O1xuICAgIHRoaXMuX2VwaGVtZXJhbCA9IHt9O1xuICAgIHRoaXMuX3ZvbGF0aWxlID0ge307XG4gICAgdGhpcy5zaW5nbGV0b24gPSB7XG4gICAgICBkZWNvcmF0b3I6IHt9LFxuICAgICAgc3RvcmU6IHt9LFxuICAgICAgZGVyaXZlOiB7fSxcbiAgICAgIHJlc29sdmU6IHt9XG4gICAgfTtcbiAgICB0aGlzLmRlZmluaXRpb25zID0ge1xuICAgICAgdHlwZWJveDogdC5Nb2R1bGUoe30pLFxuICAgICAgdHlwZToge30sXG4gICAgICBlcnJvcjoge31cbiAgICB9O1xuICAgIHRoaXMuZXh0ZW5kZXIgPSB7XG4gICAgICBtYWNyb3M6IFtdLFxuICAgICAgaGlnaGVyT3JkZXJGdW5jdGlvbnM6IFtdXG4gICAgfTtcbiAgICB0aGlzLnZhbGlkYXRvciA9IHtcbiAgICAgIGdsb2JhbDogbnVsbCxcbiAgICAgIHNjb3BlZDogbnVsbCxcbiAgICAgIGxvY2FsOiBudWxsLFxuICAgICAgZ2V0Q2FuZGlkYXRlKCkge1xuICAgICAgICByZXR1cm4gbWVyZ2VTY2hlbWFWYWxpZGF0b3IoXG4gICAgICAgICAgbWVyZ2VTY2hlbWFWYWxpZGF0b3IodGhpcy5nbG9iYWwsIHRoaXMuc2NvcGVkKSxcbiAgICAgICAgICB0aGlzLmxvY2FsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmV2ZW50ID0ge307XG4gICAgdGhpcy50ZWxlbWV0cnkgPSB7XG4gICAgICBzdGFjazogdm9pZCAwXG4gICAgfTtcbiAgICB0aGlzLnJvdXRlciA9IHtcbiAgICAgIFwifmh0dHBcIjogdm9pZCAwLFxuICAgICAgZ2V0IGh0dHAoKSB7XG4gICAgICAgIGlmICghdGhpc1tcIn5odHRwXCJdKSB0aGlzW1wifmh0dHBcIl0gPSBuZXcgTWVtb2lyaXN0KHsgbGF6eTogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXNbXCJ+aHR0cFwiXTtcbiAgICAgIH0sXG4gICAgICBcIn5keW5hbWljXCI6IHZvaWQgMCxcbiAgICAgIC8vIFVzZSBpbiBub24tQU9UIG1vZGVcbiAgICAgIGdldCBkeW5hbWljKCkge1xuICAgICAgICBpZiAoIXRoaXNbXCJ+ZHluYW1pY1wiXSkgdGhpc1tcIn5keW5hbWljXCJdID0gbmV3IE1lbW9pcmlzdCgpO1xuICAgICAgICByZXR1cm4gdGhpc1tcIn5keW5hbWljXCJdO1xuICAgICAgfSxcbiAgICAgIHN0YXRpYzoge1xuICAgICAgICBodHRwOiB7XG4gICAgICAgICAgc3RhdGljOiB7fSxcbiAgICAgICAgICAvLyBoYW5kbGVyczogW10gYXMgQ29tcG9zZWRIYW5kbGVyW10sXG4gICAgICAgICAgbWFwOiB7fSxcbiAgICAgICAgICBhbGw6IFwiXCJcbiAgICAgICAgfSxcbiAgICAgICAgLy8gU3RhdGljIFdTIFJvdXRlciBpcyBjb25zaXN0cyBvZiBwYXRobmFtZSBhbmQgd2Vic29ja2V0IGhhbmRsZXIgaW5kZXggdG8gY29tcG9zZVxuICAgICAgICB3czoge31cbiAgICAgIH0sXG4gICAgICBoaXN0b3J5OiBbXVxuICAgIH07XG4gICAgdGhpcy5yb3V0ZVRyZWUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIHRoaXMuaW5mZXJlbmNlID0ge1xuICAgICAgYm9keTogZmFsc2UsXG4gICAgICBjb29raWU6IGZhbHNlLFxuICAgICAgaGVhZGVyczogZmFsc2UsXG4gICAgICBxdWVyeTogZmFsc2UsXG4gICAgICBzZXQ6IGZhbHNlLFxuICAgICAgc2VydmVyOiBmYWxzZSxcbiAgICAgIHJlcXVlc3Q6IGZhbHNlLFxuICAgICAgcm91dGU6IGZhbHNlXG4gICAgfTtcbiAgICB0aGlzW1wifnBhcnNlclwiXSA9IHt9O1xuICAgIHRoaXMuaGFuZGxlID0gYXN5bmMgKHJlcXVlc3QpID0+IHRoaXMuZmV0Y2gocmVxdWVzdCk7XG4gICAgLyoqXG4gICAgICogVXNlIGhhbmRsZSBjYW4gYmUgZWl0aGVyIHN5bmMgb3IgYXN5bmMgdG8gc2F2ZSBwZXJmb3JtYW5jZS5cbiAgICAgKlxuICAgICAqIEJlc2lkZSBiZW5jaG1hcmsgcHVycG9zZSwgcGxlYXNlIHVzZSAnaGFuZGxlJyBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHRoaXMuZmV0Y2ggPSAocmVxdWVzdCkgPT4ge1xuICAgICAgcmV0dXJuICh0aGlzLmZldGNoID0gdGhpcy5jb25maWcuYW90ID8gY29tcG9zZUdlbmVyYWxIYW5kbGVyKHRoaXMpIDogY3JlYXRlRHluYW1pY0hhbmRsZXIodGhpcykpKHJlcXVlc3QpO1xuICAgIH07XG4gICAgdGhpcy5oYW5kbGVFcnJvciA9IGFzeW5jIChjb250ZXh0LCBlcnJvcjIpID0+IHtcbiAgICAgIHJldHVybiAodGhpcy5oYW5kbGVFcnJvciA9IHRoaXMuY29uZmlnLmFvdCA/IGNvbXBvc2VFcnJvckhhbmRsZXIodGhpcykgOiBjcmVhdGVEeW5hbWljRXJyb3JIYW5kbGVyKHRoaXMpKShjb250ZXh0LCBlcnJvcjIpO1xuICAgIH07XG4gICAgdGhpcy5vdXRlckVycm9ySGFuZGxlciA9IChlcnJvcjIpID0+IG5ldyBSZXNwb25zZShlcnJvcjIubWVzc2FnZSB8fCBlcnJvcjIubmFtZSB8fCBcIkVycm9yXCIsIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHN0YXR1czogZXJyb3IyPy5zdGF0dXMgPz8gNTAwXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogIyMjIGxpc3RlblxuICAgICAqIEFzc2lnbiBjdXJyZW50IGluc3RhbmNlIHRvIHBvcnQgYW5kIHN0YXJ0IHNlcnZpbmdcbiAgICAgKlxuICAgICAqIC0tLVxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIG5ldyBFbHlzaWEoKVxuICAgICAqICAgICAuZ2V0KFwiL1wiLCAoKSA9PiAnaGknKVxuICAgICAqICAgICAubGlzdGVuKDMwMDApXG4gICAgICogYGBgXG4gICAgICovXG4gICAgdGhpcy5saXN0ZW4gPSAob3B0aW9ucywgY2FsbGJhY2spID0+IHtcbiAgICAgIHRoaXNbXCJ+YWRhcHRlclwiXS5saXN0ZW4odGhpcykob3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiAjIyMgc3RvcFxuICAgICAqIFN0b3Agc2VydmVyIGZyb20gc2VydmluZ1xuICAgICAqXG4gICAgICogLS0tXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXBwID0gbmV3IEVseXNpYSgpXG4gICAgICogICAgIC5nZXQoXCIvXCIsICgpID0+ICdoaScpXG4gICAgICogICAgIC5saXN0ZW4oMzAwMClcbiAgICAgKlxuICAgICAqIC8vIFNvbWV0aW1lIGxhdGVyXG4gICAgICogYXBwLnN0b3AoKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXBwID0gbmV3IEVseXNpYSgpXG4gICAgICogICAgIC5nZXQoXCIvXCIsICgpID0+ICdoaScpXG4gICAgICogICAgIC5saXN0ZW4oMzAwMClcbiAgICAgKlxuICAgICAqIGFwcC5zdG9wKHRydWUpIC8vIEFicnVwdGx5IGFueSByZXF1ZXN0cyBpbmZsaWdodFxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHRoaXMuc3RvcCA9IGFzeW5jIChjbG9zZUFjdGl2ZUNvbm5lY3Rpb25zKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuc2VydmVyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgXCJFbHlzaWEgaXNuJ3QgcnVubmluZy4gQ2FsbCBgYXBwLmxpc3RlbmAgdG8gc3RhcnQgdGhlIHNlcnZlci5cIlxuICAgICAgICApO1xuICAgICAgaWYgKHRoaXMuc2VydmVyKSB7XG4gICAgICAgIHRoaXMuc2VydmVyLnN0b3AoY2xvc2VBY3RpdmVDb25uZWN0aW9ucyk7XG4gICAgICAgIHRoaXMuc2VydmVyID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuZXZlbnQuc3RvcD8ubGVuZ3RoKVxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ldmVudC5zdG9wLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgdGhpcy5ldmVudC5zdG9wW2ldLmZuKHRoaXMpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGNvbmZpZy50YWdzKSB7XG4gICAgICBpZiAoIWNvbmZpZy5kZXRhaWwpXG4gICAgICAgIGNvbmZpZy5kZXRhaWwgPSB7XG4gICAgICAgICAgdGFnczogY29uZmlnLnRhZ3NcbiAgICAgICAgfTtcbiAgICAgIGVsc2UgY29uZmlnLmRldGFpbC50YWdzID0gY29uZmlnLnRhZ3M7XG4gICAgfVxuICAgIGlmIChjb25maWcubmF0aXZlU3RhdGljUmVzcG9uc2UgPT09IHZvaWQgMClcbiAgICAgIGNvbmZpZy5uYXRpdmVTdGF0aWNSZXNwb25zZSA9IHRydWU7XG4gICAgdGhpcy5jb25maWcgPSB7fTtcbiAgICB0aGlzLmFwcGx5Q29uZmlnKGNvbmZpZyA/PyB7fSk7XG4gICAgdGhpc1tcIn5hZGFwdGVyXCJdID0gY29uZmlnLmFkYXB0ZXIgPz8gKHR5cGVvZiBCdW4gIT09IFwidW5kZWZpbmVkXCIgPyBCdW5BZGFwdGVyIDogV2ViU3RhbmRhcmRBZGFwdGVyKTtcbiAgICBpZiAoY29uZmlnPy5hbmFseXRpYyAmJiAoY29uZmlnPy5uYW1lIHx8IGNvbmZpZz8uc2VlZCAhPT0gdm9pZCAwKSlcbiAgICAgIHRoaXMudGVsZW1ldHJ5LnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gIH1cbiAgZ2V0IHN0b3JlKCkge1xuICAgIHJldHVybiB0aGlzLnNpbmdsZXRvbi5zdG9yZTtcbiAgfVxuICBnZXQgZGVjb3JhdG9yKCkge1xuICAgIHJldHVybiB0aGlzLnNpbmdsZXRvbi5kZWNvcmF0b3I7XG4gIH1cbiAgZ2V0IHJvdXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5yb3V0ZXIuaGlzdG9yeTtcbiAgfVxuICBnZXRHbG9iYWxSb3V0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMucm91dGVyLmhpc3Rvcnk7XG4gIH1cbiAgZ2V0U2VydmVyKCkge1xuICAgIHJldHVybiB0aGlzLnNlcnZlcjtcbiAgfVxuICBnZXRQYXJlbnQoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZ2V0IHByb21pc2VkTW9kdWxlcygpIHtcbiAgICBpZiAoIXRoaXMuX3Byb21pc2VkTW9kdWxlcykgdGhpcy5fcHJvbWlzZWRNb2R1bGVzID0gbmV3IFByb21pc2VHcm91cCgpO1xuICAgIHJldHVybiB0aGlzLl9wcm9taXNlZE1vZHVsZXM7XG4gIH1cbiAgZW52KG1vZGVsLCBfZW52ID0gZW52KSB7XG4gICAgY29uc3QgdmFsaWRhdG9yID0gZ2V0U2NoZW1hVmFsaWRhdG9yKG1vZGVsLCB7XG4gICAgICBtb2R1bGVzOiB0aGlzLmRlZmluaXRpb25zLnR5cGVib3gsXG4gICAgICBkeW5hbWljOiB0cnVlLFxuICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IHRydWUsXG4gICAgICBjb2VyY2U6IHRydWVcbiAgICB9KTtcbiAgICBpZiAodmFsaWRhdG9yLkNoZWNrKF9lbnYpID09PSBmYWxzZSkge1xuICAgICAgY29uc3QgZXJyb3IyID0gbmV3IFZhbGlkYXRpb25FcnJvcihcImVudlwiLCBtb2RlbCwgX2Vudik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IyLmFsbC5tYXAoKHgpID0+IHguc3VtbWFyeSkuam9pbihcIlxcblwiKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZSBET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEXG4gICAqIEB2ZXJzaW9uIDEuMS4wXG4gICAqXG4gICAqICEgRG8gbm90IHVzZSB1bmxlc3MgeW91IGtub3cgZXhhY3RseSB3aGF0IHlvdSBhcmUgZG9pbmdcbiAgICogPyBBZGQgSGlnaGVyIG9yZGVyIGZ1bmN0aW9uIHRvIEVseXNpYS5mZXRjaFxuICAgKi9cbiAgd3JhcChmbikge1xuICAgIHRoaXMuZXh0ZW5kZXIuaGlnaGVyT3JkZXJGdW5jdGlvbnMucHVzaCh7XG4gICAgICBjaGVja3N1bTogY2hlY2tzdW0oXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBuYW1lOiB0aGlzLmNvbmZpZy5uYW1lLFxuICAgICAgICAgIHNlZWQ6IHRoaXMuY29uZmlnLnNlZWQsXG4gICAgICAgICAgY29udGVudDogZm4udG9TdHJpbmcoKVxuICAgICAgICB9KVxuICAgICAgKSxcbiAgICAgIGZuXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgYXBwbHlNYWNybyhsb2NhbEhvb2spIHtcbiAgICBpZiAodGhpcy5leHRlbmRlci5tYWNyb3MubGVuZ3RoKSB7XG4gICAgICBjb25zdCBtYW5hZ2UgPSBjcmVhdGVNYWNyb01hbmFnZXIoe1xuICAgICAgICBnbG9iYWxIb29rOiB0aGlzLmV2ZW50LFxuICAgICAgICBsb2NhbEhvb2tcbiAgICAgIH0pO1xuICAgICAgY29uc3QgbWFuYWdlciA9IHtcbiAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgZ2xvYmFsOiB0aGlzLmV2ZW50LFxuICAgICAgICAgIGxvY2FsOiBsb2NhbEhvb2tcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IG9uUGFyc2UoKSB7XG4gICAgICAgICAgcmV0dXJuIG1hbmFnZShcInBhcnNlXCIpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgb25UcmFuc2Zvcm0oKSB7XG4gICAgICAgICAgcmV0dXJuIG1hbmFnZShcInRyYW5zZm9ybVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IG9uQmVmb3JlSGFuZGxlKCkge1xuICAgICAgICAgIHJldHVybiBtYW5hZ2UoXCJiZWZvcmVIYW5kbGVcIik7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBvbkFmdGVySGFuZGxlKCkge1xuICAgICAgICAgIHJldHVybiBtYW5hZ2UoXCJhZnRlckhhbmRsZVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IG1hcFJlc3BvbnNlKCkge1xuICAgICAgICAgIHJldHVybiBtYW5hZ2UoXCJtYXBSZXNwb25zZVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IG9uQWZ0ZXJSZXNwb25zZSgpIHtcbiAgICAgICAgICByZXR1cm4gbWFuYWdlKFwiYWZ0ZXJSZXNwb25zZVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IG9uRXJyb3IoKSB7XG4gICAgICAgICAgcmV0dXJuIG1hbmFnZShcImVycm9yXCIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZm9yIChjb25zdCBtYWNybyBvZiB0aGlzLmV4dGVuZGVyLm1hY3JvcylcbiAgICAgICAgdHJhY2VCYWNrTWFjcm8obWFjcm8uZm4obWFuYWdlciksIGxvY2FsSG9vaywgbWFuYWdlKTtcbiAgICB9XG4gIH1cbiAgYXBwbHlDb25maWcoY29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICBwcmVmaXg6IFwiXCIsXG4gICAgICBhb3Q6IGVudi5FTFlTSUFfQU9UICE9PSBcImZhbHNlXCIsXG4gICAgICBub3JtYWxpemU6IHRydWUsXG4gICAgICAuLi5jb25maWcsXG4gICAgICBjb29raWU6IHtcbiAgICAgICAgcGF0aDogXCIvXCIsXG4gICAgICAgIC4uLmNvbmZpZz8uY29va2llXG4gICAgICB9LFxuICAgICAgZXhwZXJpbWVudGFsOiBjb25maWc/LmV4cGVyaW1lbnRhbCA/PyB7fSxcbiAgICAgIHNlZWQ6IGNvbmZpZz8uc2VlZCA9PT0gdm9pZCAwID8gXCJcIiA6IGNvbmZpZz8uc2VlZFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ2V0IG1vZGVscygpIHtcbiAgICBjb25zdCBtb2RlbHMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmtleXModGhpcy5kZWZpbml0aW9ucy50eXBlKSlcbiAgICAgIG1vZGVsc1tuYW1lXSA9IGdldFNjaGVtYVZhbGlkYXRvcihcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICB0aGlzLmRlZmluaXRpb25zLnR5cGVib3guSW1wb3J0KG5hbWUpXG4gICAgICApO1xuICAgIG1vZGVscy5tb2R1bGVzID0gdGhpcy5kZWZpbml0aW9ucy50eXBlYm94O1xuICAgIHJldHVybiBtb2RlbHM7XG4gIH1cbiAgYWRkKG1ldGhvZCwgcGF0aCwgaGFuZGxlLCBsb2NhbEhvb2ssIHsgYWxsb3dNZXRhID0gZmFsc2UsIHNraXBQcmVmaXggPSBmYWxzZSB9ID0ge1xuICAgIGFsbG93TWV0YTogZmFsc2UsXG4gICAgc2tpcFByZWZpeDogZmFsc2VcbiAgfSkge1xuICAgIGxvY2FsSG9vayA9IGNvbXByZXNzSGlzdG9yeUhvb2sobG9jYWxIb29rVG9MaWZlQ3ljbGVTdG9yZShsb2NhbEhvb2spKTtcbiAgICBpZiAocGF0aCAhPT0gXCJcIiAmJiBwYXRoLmNoYXJDb2RlQXQoMCkgIT09IDQ3KSBwYXRoID0gXCIvXCIgKyBwYXRoO1xuICAgIGlmICh0aGlzLmNvbmZpZy5wcmVmaXggJiYgIXNraXBQcmVmaXgpIHBhdGggPSB0aGlzLmNvbmZpZy5wcmVmaXggKyBwYXRoO1xuICAgIGlmIChsb2NhbEhvb2s/LnR5cGUpXG4gICAgICBzd2l0Y2ggKGxvY2FsSG9vay50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJ0ZXh0XCI6XG4gICAgICAgICAgbG9jYWxIb29rLnR5cGUgPSBcInRleHQvcGxhaW5cIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImpzb25cIjpcbiAgICAgICAgICBsb2NhbEhvb2sudHlwZSA9IFwiYXBwbGljYXRpb24vanNvblwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZm9ybWRhdGFcIjpcbiAgICAgICAgICBsb2NhbEhvb2sudHlwZSA9IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidXJsZW5jb2RlZFwiOlxuICAgICAgICAgIGxvY2FsSG9vay50eXBlID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImFycmF5QnVmZmVyXCI6XG4gICAgICAgICAgbG9jYWxIb29rLnR5cGUgPSBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIGNvbnN0IG1vZGVscyA9IHRoaXMuZGVmaW5pdGlvbnMudHlwZTtcbiAgICBjb25zdCBkeW5hbWljID0gIXRoaXMuY29uZmlnLmFvdDtcbiAgICBjb25zdCBpbnN0YW5jZVZhbGlkYXRvciA9IHsgLi4udGhpcy52YWxpZGF0b3IuZ2V0Q2FuZGlkYXRlKCkgfTtcbiAgICBjb25zdCBjbG9uZWQgPSB7XG4gICAgICBib2R5OiBsb2NhbEhvb2s/LmJvZHkgPz8gaW5zdGFuY2VWYWxpZGF0b3I/LmJvZHksXG4gICAgICBoZWFkZXJzOiBsb2NhbEhvb2s/LmhlYWRlcnMgPz8gaW5zdGFuY2VWYWxpZGF0b3I/LmhlYWRlcnMsXG4gICAgICBwYXJhbXM6IGxvY2FsSG9vaz8ucGFyYW1zID8/IGluc3RhbmNlVmFsaWRhdG9yPy5wYXJhbXMsXG4gICAgICBxdWVyeTogbG9jYWxIb29rPy5xdWVyeSA/PyBpbnN0YW5jZVZhbGlkYXRvcj8ucXVlcnksXG4gICAgICBjb29raWU6IGxvY2FsSG9vaz8uY29va2llID8/IGluc3RhbmNlVmFsaWRhdG9yPy5jb29raWUsXG4gICAgICByZXNwb25zZTogbG9jYWxIb29rPy5yZXNwb25zZSA/PyBpbnN0YW5jZVZhbGlkYXRvcj8ucmVzcG9uc2VcbiAgICB9O1xuICAgIGNvbnN0IGNvb2tpZVZhbGlkYXRvciA9ICgpID0+IGNsb25lZC5jb29raWUgPyBnZXRDb29raWVWYWxpZGF0b3Ioe1xuICAgICAgbW9kdWxlcyxcbiAgICAgIHZhbGlkYXRvcjogY2xvbmVkLmNvb2tpZSxcbiAgICAgIGRlZmF1bHRDb25maWc6IHRoaXMuY29uZmlnLmNvb2tpZSxcbiAgICAgIGNvbmZpZzogY2xvbmVkLmNvb2tpZT8uY29uZmlnID8/IHt9LFxuICAgICAgZHluYW1pYyxcbiAgICAgIG1vZGVsc1xuICAgIH0pIDogdm9pZCAwO1xuICAgIGNvbnN0IG5vcm1hbGl6ZSA9IHRoaXMuY29uZmlnLm5vcm1hbGl6ZTtcbiAgICBjb25zdCBtb2R1bGVzID0gdGhpcy5kZWZpbml0aW9ucy50eXBlYm94O1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IHRoaXMuY29uZmlnLnByZWNvbXBpbGUgPT09IHRydWUgfHwgdHlwZW9mIHRoaXMuY29uZmlnLnByZWNvbXBpbGUgPT09IFwib2JqZWN0XCIgJiYgdGhpcy5jb25maWcucHJlY29tcGlsZS5zY2hlbWEgPT09IHRydWUgPyB7XG4gICAgICBib2R5OiBnZXRTY2hlbWFWYWxpZGF0b3IoY2xvbmVkLmJvZHksIHtcbiAgICAgICAgbW9kdWxlcyxcbiAgICAgICAgZHluYW1pYyxcbiAgICAgICAgbW9kZWxzLFxuICAgICAgICBub3JtYWxpemUsXG4gICAgICAgIGFkZGl0aW9uYWxDb2VyY2U6IGNvZXJjZVByaW1pdGl2ZVJvb3QoKVxuICAgICAgfSksXG4gICAgICBoZWFkZXJzOiBnZXRTY2hlbWFWYWxpZGF0b3IoY2xvbmVkLmhlYWRlcnMsIHtcbiAgICAgICAgbW9kdWxlcyxcbiAgICAgICAgZHluYW1pYyxcbiAgICAgICAgbW9kZWxzLFxuICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogIXRoaXMuY29uZmlnLm5vcm1hbGl6ZSxcbiAgICAgICAgY29lcmNlOiB0cnVlLFxuICAgICAgICBhZGRpdGlvbmFsQ29lcmNlOiBzdHJpbmdUb1N0cnVjdHVyZUNvZXJjaW9ucygpXG4gICAgICB9KSxcbiAgICAgIHBhcmFtczogZ2V0U2NoZW1hVmFsaWRhdG9yKGNsb25lZC5wYXJhbXMsIHtcbiAgICAgICAgbW9kdWxlcyxcbiAgICAgICAgZHluYW1pYyxcbiAgICAgICAgbW9kZWxzLFxuICAgICAgICBjb2VyY2U6IHRydWUsXG4gICAgICAgIGFkZGl0aW9uYWxDb2VyY2U6IHN0cmluZ1RvU3RydWN0dXJlQ29lcmNpb25zKClcbiAgICAgIH0pLFxuICAgICAgcXVlcnk6IGdldFNjaGVtYVZhbGlkYXRvcihjbG9uZWQucXVlcnksIHtcbiAgICAgICAgbW9kdWxlcyxcbiAgICAgICAgZHluYW1pYyxcbiAgICAgICAgbW9kZWxzLFxuICAgICAgICBub3JtYWxpemUsXG4gICAgICAgIGNvZXJjZTogdHJ1ZSxcbiAgICAgICAgYWRkaXRpb25hbENvZXJjZTogc3RyaW5nVG9TdHJ1Y3R1cmVDb2VyY2lvbnMoKVxuICAgICAgfSksXG4gICAgICBjb29raWU6IGNvb2tpZVZhbGlkYXRvcigpLFxuICAgICAgcmVzcG9uc2U6IGdldFJlc3BvbnNlU2NoZW1hVmFsaWRhdG9yKGNsb25lZC5yZXNwb25zZSwge1xuICAgICAgICBtb2R1bGVzLFxuICAgICAgICBkeW5hbWljLFxuICAgICAgICBtb2RlbHMsXG4gICAgICAgIG5vcm1hbGl6ZVxuICAgICAgfSlcbiAgICB9IDoge1xuICAgICAgY3JlYXRlQm9keSgpIHtcbiAgICAgICAgaWYgKHRoaXMuYm9keSkgcmV0dXJuIHRoaXMuYm9keTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm9keSA9IGdldFNjaGVtYVZhbGlkYXRvcihcbiAgICAgICAgICBjbG9uZWQuYm9keSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtb2R1bGVzLFxuICAgICAgICAgICAgZHluYW1pYyxcbiAgICAgICAgICAgIG1vZGVscyxcbiAgICAgICAgICAgIG5vcm1hbGl6ZSxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxDb2VyY2U6IGNvZXJjZVByaW1pdGl2ZVJvb3QoKVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBjcmVhdGVIZWFkZXJzKCkge1xuICAgICAgICBpZiAodGhpcy5oZWFkZXJzKSByZXR1cm4gdGhpcy5oZWFkZXJzO1xuICAgICAgICByZXR1cm4gdGhpcy5oZWFkZXJzID0gZ2V0U2NoZW1hVmFsaWRhdG9yKFxuICAgICAgICAgIGNsb25lZC5oZWFkZXJzLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG1vZHVsZXMsXG4gICAgICAgICAgICBkeW5hbWljLFxuICAgICAgICAgICAgbW9kZWxzLFxuICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6ICFub3JtYWxpemUsXG4gICAgICAgICAgICBjb2VyY2U6IHRydWUsXG4gICAgICAgICAgICBhZGRpdGlvbmFsQ29lcmNlOiBzdHJpbmdUb1N0cnVjdHVyZUNvZXJjaW9ucygpXG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIGNyZWF0ZVBhcmFtcygpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zKSByZXR1cm4gdGhpcy5wYXJhbXM7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmFtcyA9IGdldFNjaGVtYVZhbGlkYXRvcihcbiAgICAgICAgICBjbG9uZWQucGFyYW1zLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG1vZHVsZXMsXG4gICAgICAgICAgICBkeW5hbWljLFxuICAgICAgICAgICAgbW9kZWxzLFxuICAgICAgICAgICAgY29lcmNlOiB0cnVlLFxuICAgICAgICAgICAgYWRkaXRpb25hbENvZXJjZTogc3RyaW5nVG9TdHJ1Y3R1cmVDb2VyY2lvbnMoKVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBjcmVhdGVRdWVyeSgpIHtcbiAgICAgICAgaWYgKHRoaXMucXVlcnkpIHJldHVybiB0aGlzLnF1ZXJ5O1xuICAgICAgICByZXR1cm4gdGhpcy5xdWVyeSA9IGdldFNjaGVtYVZhbGlkYXRvcihcbiAgICAgICAgICBjbG9uZWQucXVlcnksXG4gICAgICAgICAge1xuICAgICAgICAgICAgbW9kdWxlcyxcbiAgICAgICAgICAgIGR5bmFtaWMsXG4gICAgICAgICAgICBtb2RlbHMsXG4gICAgICAgICAgICBjb2VyY2U6IHRydWUsXG4gICAgICAgICAgICBhZGRpdGlvbmFsQ29lcmNlOiBzdHJpbmdUb1N0cnVjdHVyZUNvZXJjaW9ucygpXG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIGNyZWF0ZUNvb2tpZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29va2llKSByZXR1cm4gdGhpcy5jb29raWU7XG4gICAgICAgIHJldHVybiB0aGlzLmNvb2tpZSA9IGNvb2tpZVZhbGlkYXRvcigpO1xuICAgICAgfSxcbiAgICAgIGNyZWF0ZVJlc3BvbnNlKCkge1xuICAgICAgICBpZiAodGhpcy5yZXNwb25zZSkgcmV0dXJuIHRoaXMucmVzcG9uc2U7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlID0gZ2V0UmVzcG9uc2VTY2hlbWFWYWxpZGF0b3IoXG4gICAgICAgICAgY2xvbmVkLnJlc3BvbnNlLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG1vZHVsZXMsXG4gICAgICAgICAgICBkeW5hbWljLFxuICAgICAgICAgICAgbW9kZWxzLFxuICAgICAgICAgICAgbm9ybWFsaXplXG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH07XG4gICAgbG9jYWxIb29rID0gbWVyZ2VIb29rKFxuICAgICAgbG9jYWxIb29rLFxuICAgICAgY29tcHJlc3NIaXN0b3J5SG9vayhpbnN0YW5jZVZhbGlkYXRvcilcbiAgICApO1xuICAgIGlmIChsb2NhbEhvb2sudGFncykge1xuICAgICAgaWYgKCFsb2NhbEhvb2suZGV0YWlsKVxuICAgICAgICBsb2NhbEhvb2suZGV0YWlsID0ge1xuICAgICAgICAgIHRhZ3M6IGxvY2FsSG9vay50YWdzXG4gICAgICAgIH07XG4gICAgICBlbHNlIGxvY2FsSG9vay5kZXRhaWwudGFncyA9IGxvY2FsSG9vay50YWdzO1xuICAgIH1cbiAgICBpZiAoaXNOb3RFbXB0eSh0aGlzLmNvbmZpZy5kZXRhaWwpKVxuICAgICAgbG9jYWxIb29rLmRldGFpbCA9IG1lcmdlRGVlcChcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcuZGV0YWlsKSxcbiAgICAgICAgbG9jYWxIb29rLmRldGFpbFxuICAgICAgKTtcbiAgICB0aGlzLmFwcGx5TWFjcm8obG9jYWxIb29rKTtcbiAgICBjb25zdCBob29rcyA9IGNvbXByZXNzSGlzdG9yeUhvb2sobWVyZ2VIb29rKHRoaXMuZXZlbnQsIGxvY2FsSG9vaykpO1xuICAgIGlmICh0aGlzLmNvbmZpZy5hb3QgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLnJvdXRlci5keW5hbWljLmFkZChtZXRob2QsIHBhdGgsIHtcbiAgICAgICAgdmFsaWRhdG9yLFxuICAgICAgICBob29rcyxcbiAgICAgICAgY29udGVudDogbG9jYWxIb29rPy50eXBlLFxuICAgICAgICBoYW5kbGUsXG4gICAgICAgIHJvdXRlOiBwYXRoXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGVuY29kZWQgPSBlbmNvZGVQYXRoKHBhdGgsIHsgZHluYW1pYzogdHJ1ZSB9KTtcbiAgICAgIGlmIChwYXRoICE9PSBlbmNvZGVkKSB7XG4gICAgICAgIHRoaXMucm91dGVyLmR5bmFtaWMuYWRkKG1ldGhvZCwgZW5jb2RlZCwge1xuICAgICAgICAgIHZhbGlkYXRvcixcbiAgICAgICAgICBob29rcyxcbiAgICAgICAgICBjb250ZW50OiBsb2NhbEhvb2s/LnR5cGUsXG4gICAgICAgICAgaGFuZGxlLFxuICAgICAgICAgIHJvdXRlOiBwYXRoXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY29uZmlnLnN0cmljdFBhdGggPT09IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGxvb3NlUGF0aCA9IGdldExvb3NlUGF0aChwYXRoKTtcbiAgICAgICAgdGhpcy5yb3V0ZXIuZHluYW1pYy5hZGQobWV0aG9kLCBsb29zZVBhdGgsIHtcbiAgICAgICAgICB2YWxpZGF0b3IsXG4gICAgICAgICAgaG9va3MsXG4gICAgICAgICAgY29udGVudDogbG9jYWxIb29rPy50eXBlLFxuICAgICAgICAgIGhhbmRsZSxcbiAgICAgICAgICByb3V0ZTogcGF0aFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZW5jb2RlZDIgPSBlbmNvZGVQYXRoKGxvb3NlUGF0aCk7XG4gICAgICAgIGlmIChsb29zZVBhdGggIT09IGVuY29kZWQyKVxuICAgICAgICAgIHRoaXMucm91dGVyLmR5bmFtaWMuYWRkKG1ldGhvZCwgbG9vc2VQYXRoLCB7XG4gICAgICAgICAgICB2YWxpZGF0b3IsXG4gICAgICAgICAgICBob29rcyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGxvY2FsSG9vaz8udHlwZSxcbiAgICAgICAgICAgIGhhbmRsZSxcbiAgICAgICAgICAgIHJvdXRlOiBwYXRoXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLnJvdXRlci5oaXN0b3J5LnB1c2goe1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIHBhdGgsXG4gICAgICAgIGNvbXBvc2VkOiBudWxsLFxuICAgICAgICBoYW5kbGVyOiBoYW5kbGUsXG4gICAgICAgIGhvb2tzXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2hvdWxkUHJlY29tcGlsZSA9IHRoaXMuY29uZmlnLnByZWNvbXBpbGUgPT09IHRydWUgfHwgdHlwZW9mIHRoaXMuY29uZmlnLnByZWNvbXBpbGUgPT09IFwib2JqZWN0XCIgJiYgdGhpcy5jb25maWcucHJlY29tcGlsZS5jb21wb3NlID09PSB0cnVlO1xuICAgIGNvbnN0IGluZmVyZW5jZSA9IGNsb25lSW5mZXJlbmNlKHRoaXMuaW5mZXJlbmNlKTtcbiAgICBjb25zdCBhZGFwdGVyID0gdGhpc1tcIn5hZGFwdGVyXCJdLmhhbmRsZXI7XG4gICAgY29uc3Qgc3RhdGljSGFuZGxlciA9IHR5cGVvZiBoYW5kbGUgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYWRhcHRlci5jcmVhdGVTdGF0aWNIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIgPyBhZGFwdGVyLmNyZWF0ZVN0YXRpY0hhbmRsZXIoaGFuZGxlLCBob29rcywgdGhpcy5zZXRIZWFkZXJzKSA6IHZvaWQgMDtcbiAgICBjb25zdCBuYXRpdmVTdGF0aWNIYW5kbGVyID0gdHlwZW9mIGhhbmRsZSAhPT0gXCJmdW5jdGlvblwiID8gYWRhcHRlci5jcmVhdGVOYXRpdmVTdGF0aWNIYW5kbGVyPy4oXG4gICAgICBoYW5kbGUsXG4gICAgICBob29rcyxcbiAgICAgIHRoaXMuc2V0SGVhZGVyc1xuICAgICkgOiB2b2lkIDA7XG4gICAgaWYgKHRoaXMuY29uZmlnLm5hdGl2ZVN0YXRpY1Jlc3BvbnNlID09PSB0cnVlICYmIG5hdGl2ZVN0YXRpY0hhbmRsZXIgJiYgKG1ldGhvZCA9PT0gXCJHRVRcIiB8fCBtZXRob2QgPT09IFwiQUxMXCIpKVxuICAgICAgdGhpcy5yb3V0ZXIuc3RhdGljLmh0dHAuc3RhdGljW3BhdGhdID0gbmF0aXZlU3RhdGljSGFuZGxlcigpO1xuICAgIGxldCBjb21waWxlID0gKGFzTWFuaWZlc3QgPSBmYWxzZSkgPT4gY29tcG9zZUhhbmRsZXIoe1xuICAgICAgYXBwOiB0aGlzLFxuICAgICAgcGF0aCxcbiAgICAgIG1ldGhvZCxcbiAgICAgIGhvb2tzLFxuICAgICAgdmFsaWRhdG9yLFxuICAgICAgaGFuZGxlcjogdHlwZW9mIGhhbmRsZSAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBhZGFwdGVyLmNyZWF0ZVN0YXRpY0hhbmRsZXIgIT09IFwiZnVuY3Rpb25cIiA/ICgpID0+IGhhbmRsZSA6IGhhbmRsZSxcbiAgICAgIGFsbG93TWV0YSxcbiAgICAgIGluZmVyZW5jZSxcbiAgICAgIGFzTWFuaWZlc3RcbiAgICB9KTtcbiAgICBsZXQgb2xkSW5kZXg7XG4gICAgaWYgKHRoaXMucm91dGVUcmVlLmhhcyhtZXRob2QgKyBwYXRoKSlcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3V0ZXIuaGlzdG9yeS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCByb3V0ZSA9IHRoaXMucm91dGVyLmhpc3RvcnlbaV07XG4gICAgICAgIGlmIChyb3V0ZS5wYXRoID09PSBwYXRoICYmIHJvdXRlLm1ldGhvZCA9PT0gbWV0aG9kKSB7XG4gICAgICAgICAgb2xkSW5kZXggPSBpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgZWxzZSB0aGlzLnJvdXRlVHJlZS5zZXQobWV0aG9kICsgcGF0aCwgdGhpcy5yb3V0ZXIuaGlzdG9yeS5sZW5ndGgpO1xuICAgIGNvbnN0IGhpc3RvcnkgPSB0aGlzLnJvdXRlci5oaXN0b3J5O1xuICAgIGNvbnN0IGluZGV4ID0gb2xkSW5kZXggPz8gdGhpcy5yb3V0ZXIuaGlzdG9yeS5sZW5ndGg7XG4gICAgY29uc3QgbWFpbkhhbmRsZXIgPSBzaG91bGRQcmVjb21waWxlID8gY29tcGlsZSgpIDogKGN0eCkgPT4ge1xuICAgICAgY29uc3QgdGVtcCA9IChoaXN0b3J5W2luZGV4XS5jb21wb3NlZCA9IGNvbXBpbGUoKSkoY3R4KTtcbiAgICAgIGNvbXBpbGUgPSB2b2lkIDA7XG4gICAgICByZXR1cm4gdGVtcDtcbiAgICB9O1xuICAgIGlmIChzaG91bGRQcmVjb21waWxlKSBjb21waWxlID0gdm9pZCAwO1xuICAgIGNvbnN0IGlzV2ViU29ja2V0ID0gbWV0aG9kID09PSBcIiRJTlRFUk5BTFdTXCI7XG4gICAgaWYgKG9sZEluZGV4ICE9PSB2b2lkIDApXG4gICAgICB0aGlzLnJvdXRlci5oaXN0b3J5W29sZEluZGV4XSA9IC8vIEB0cy1pZ25vcmVcbiAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgIHtcbiAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICBjb21wb3NlZDogbWFpbkhhbmRsZXIsXG4gICAgICAgICAgaGFuZGxlcjogaGFuZGxlLFxuICAgICAgICAgIGhvb2tzXG4gICAgICAgIH0sXG4gICAgICAgIGxvY2FsSG9vay53ZWJTb2NrZXQgPyB7IHdlYnNvY2tldDogbG9jYWxIb29rLndlYnNvY2tldCB9IDoge31cbiAgICAgICk7XG4gICAgZWxzZVxuICAgICAgdGhpcy5yb3V0ZXIuaGlzdG9yeS5wdXNoKFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgIGNvbXBvc2VkOiBtYWluSGFuZGxlcixcbiAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZSxcbiAgICAgICAgICAgIGhvb2tzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsb2NhbEhvb2sud2ViU29ja2V0ID8geyB3ZWJzb2NrZXQ6IGxvY2FsSG9vay53ZWJzb2NrZXQgfSA6IHt9XG4gICAgICAgIClcbiAgICAgICk7XG4gICAgY29uc3Qgc3RhdGljUm91dGVyID0gdGhpcy5yb3V0ZXIuc3RhdGljLmh0dHA7XG4gICAgY29uc3QgaGFuZGxlciA9IHtcbiAgICAgIGhhbmRsZXI6IHNob3VsZFByZWNvbXBpbGUgPyBtYWluSGFuZGxlciA6IHZvaWQgMCxcbiAgICAgIGNvbXBpbGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZXIgPSBjb21waWxlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNXZWJTb2NrZXQpIHtcbiAgICAgIHRoaXMucm91dGVyLmh0dHAuYWRkKFwid3NcIiwgcGF0aCwgaGFuZGxlcik7XG4gICAgICBpZiAoIXRoaXMuY29uZmlnLnN0cmljdFBhdGgpXG4gICAgICAgIHRoaXMucm91dGVyLmh0dHAuYWRkKFwid3NcIiwgZ2V0TG9vc2VQYXRoKHBhdGgpLCBoYW5kbGVyKTtcbiAgICAgIGNvbnN0IGVuY29kZWQgPSBlbmNvZGVQYXRoKHBhdGgsIHsgZHluYW1pYzogdHJ1ZSB9KTtcbiAgICAgIGlmIChlbmNvZGVkICE9PSBwYXRoKSB0aGlzLnJvdXRlci5odHRwLmFkZChcIndzXCIsIGVuY29kZWQsIGhhbmRsZXIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocGF0aC5pbmRleE9mKFwiOlwiKSA9PT0gLTEgJiYgcGF0aC5pbmRleE9mKFwiKlwiKSA9PT0gLTEpIHtcbiAgICAgIGlmICghc3RhdGljUm91dGVyLm1hcFtwYXRoXSlcbiAgICAgICAgc3RhdGljUm91dGVyLm1hcFtwYXRoXSA9IHtcbiAgICAgICAgICBjb2RlOiBcIlwiXG4gICAgICAgIH07XG4gICAgICBjb25zdCBjdHggPSBzdGF0aWNIYW5kbGVyID8gXCJcIiA6IFwiY1wiO1xuICAgICAgaWYgKG1ldGhvZCA9PT0gXCJBTExcIilcbiAgICAgICAgc3RhdGljUm91dGVyLm1hcFtwYXRoXS5hbGwgPSBgZGVmYXVsdDpyZXR1cm4gaHRbJHtpbmRleH1dLmNvbXBvc2VkKCR7Y3R4fSlcbmA7XG4gICAgICBlbHNlXG4gICAgICAgIHN0YXRpY1JvdXRlci5tYXBbcGF0aF0uY29kZSA9IGBjYXNlICcke21ldGhvZH0nOnJldHVybiBodFske2luZGV4fV0uY29tcG9zZWQoJHtjdHh9KVxuJHtzdGF0aWNSb3V0ZXIubWFwW3BhdGhdLmNvZGV9YDtcbiAgICAgIGlmICghdGhpcy5jb25maWcuc3RyaWN0UGF0aCAmJiB0aGlzLmNvbmZpZy5uYXRpdmVTdGF0aWNSZXNwb25zZSA9PT0gdHJ1ZSAmJiBuYXRpdmVTdGF0aWNIYW5kbGVyICYmIChtZXRob2QgPT09IFwiR0VUXCIgfHwgbWV0aG9kID09PSBcIkFMTFwiKSlcbiAgICAgICAgdGhpcy5yb3V0ZXIuc3RhdGljLmh0dHAuc3RhdGljW2dldExvb3NlUGF0aChwYXRoKV0gPSBuYXRpdmVTdGF0aWNIYW5kbGVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm91dGVyLmh0dHAuYWRkKG1ldGhvZCwgcGF0aCwgaGFuZGxlcik7XG4gICAgICBpZiAoIXRoaXMuY29uZmlnLnN0cmljdFBhdGgpIHtcbiAgICAgICAgY29uc3QgbG9vc2VQYXRoID0gZ2V0TG9vc2VQYXRoKHBhdGgpO1xuICAgICAgICBpZiAodGhpcy5jb25maWcubmF0aXZlU3RhdGljUmVzcG9uc2UgPT09IHRydWUgJiYgc3RhdGljSGFuZGxlciAmJiAobWV0aG9kID09PSBcIkdFVFwiIHx8IG1ldGhvZCA9PT0gXCJBTExcIikpXG4gICAgICAgICAgdGhpcy5yb3V0ZXIuc3RhdGljLmh0dHAuc3RhdGljW2xvb3NlUGF0aF0gPSBzdGF0aWNIYW5kbGVyKCk7XG4gICAgICAgIHRoaXMucm91dGVyLmh0dHAuYWRkKG1ldGhvZCwgbG9vc2VQYXRoLCBoYW5kbGVyKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVuY29kZWQgPSBlbmNvZGVQYXRoKHBhdGgsIHsgZHluYW1pYzogdHJ1ZSB9KTtcbiAgICAgIGlmIChwYXRoICE9PSBlbmNvZGVkKSB7XG4gICAgICAgIHRoaXMucm91dGVyLmh0dHAuYWRkKG1ldGhvZCwgZW5jb2RlZCwgaGFuZGxlcik7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5uYXRpdmVTdGF0aWNSZXNwb25zZSA9PT0gdHJ1ZSAmJiBzdGF0aWNIYW5kbGVyICYmIChtZXRob2QgPT09IFwiR0VUXCIgfHwgbWV0aG9kID09PSBcIkFMTFwiKSlcbiAgICAgICAgICB0aGlzLnJvdXRlci5zdGF0aWMuaHR0cC5zdGF0aWNbZW5jb2RlZF0gPSBzdGF0aWNIYW5kbGVyKCk7XG4gICAgICAgIHRoaXMucm91dGVyLmh0dHAuYWRkKG1ldGhvZCwgZW5jb2RlZCwgaGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGhlYWRlcnMoaGVhZGVyKSB7XG4gICAgaWYgKCFoZWFkZXIpIHJldHVybiB0aGlzO1xuICAgIGlmICghdGhpcy5zZXRIZWFkZXJzKSB0aGlzLnNldEhlYWRlcnMgPSB7fTtcbiAgICB0aGlzLnNldEhlYWRlcnMgPSBtZXJnZURlZXAodGhpcy5zZXRIZWFkZXJzLCBoZWFkZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgc3RhcnQgfCBMaWZlIGN5Y2xlIGV2ZW50XG4gICAqIENhbGxlZCBhZnRlciBzZXJ2ZXIgaXMgcmVhZHkgZm9yIHNlcnZpbmdcbiAgICpcbiAgICogLS0tXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogbmV3IEVseXNpYSgpXG4gICAqICAgICAub25TdGFydCgoeyBzZXJ2ZXIgfSkgPT4ge1xuICAgKiAgICAgICAgIGNvbnNvbGUubG9nKFwiUnVubmluZyBhdCAke3NlcnZlcj8udXJsfToke3NlcnZlcj8ucG9ydH1cIilcbiAgICogICAgIH0pXG4gICAqICAgICAubGlzdGVuKDMwMDApXG4gICAqIGBgYFxuICAgKi9cbiAgb25TdGFydChoYW5kbGVyKSB7XG4gICAgdGhpcy5vbihcInN0YXJ0XCIsIGhhbmRsZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgcmVxdWVzdCB8IExpZmUgY3ljbGUgZXZlbnRcbiAgICogQ2FsbGVkIG9uIGV2ZXJ5IG5ldyByZXF1ZXN0IGlzIGFjY2VwdGVkXG4gICAqXG4gICAqIC0tLVxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIG5ldyBFbHlzaWEoKVxuICAgKiAgICAgLm9uUmVxdWVzdCgoeyBtZXRob2QsIHVybCB9KSA9PiB7XG4gICAqICAgICAgICAgc2F2ZVRvQW5hbHl0aWMoeyBtZXRob2QsIHVybCB9KVxuICAgKiAgICAgfSlcbiAgICogYGBgXG4gICAqL1xuICBvblJlcXVlc3QoaGFuZGxlcikge1xuICAgIHRoaXMub24oXCJyZXF1ZXN0XCIsIGhhbmRsZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9uUGFyc2Uob3B0aW9ucywgaGFuZGxlcikge1xuICAgIGlmICghaGFuZGxlcikge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKVxuICAgICAgICByZXR1cm4gdGhpcy5vbihcInBhcnNlXCIsIHRoaXNbXCJ+cGFyc2VyXCJdW29wdGlvbnNdKTtcbiAgICAgIHJldHVybiB0aGlzLm9uKFwicGFyc2VcIiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm9uKFxuICAgICAgb3B0aW9ucyxcbiAgICAgIFwicGFyc2VcIixcbiAgICAgIGhhbmRsZXJcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgcGFyc2UgfCBMaWZlIGN5Y2xlIGV2ZW50XG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGhhbmRsZSBib2R5IHBhcnNpbmdcbiAgICpcbiAgICogSWYgdHJ1dGh5IHZhbHVlIGlzIHJldHVybmVkLCB3aWxsIGJlIGFzc2lnbmVkIHRvIGBjb250ZXh0LmJvZHlgXG4gICAqIE90aGVyd2lzZSB3aWxsIHNraXAgdGhlIGNhbGxiYWNrIGFuZCBsb29rIGZvciB0aGUgbmV4dCBvbmUuXG4gICAqXG4gICAqIEVxdWl2YWxlbnQgdG8gRXhwcmVzcydzIGJvZHkgcGFyc2VyXG4gICAqXG4gICAqIC0tLVxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIG5ldyBFbHlzaWEoKVxuICAgKiAgICAgLm9uUGFyc2UoKHJlcXVlc3QsIGNvbnRlbnRUeXBlKSA9PiB7XG4gICAqICAgICAgICAgaWYoY29udGVudFR5cGUgPT09IFwiYXBwbGljYXRpb24vanNvblwiKVxuICAgKiAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdC5qc29uKClcbiAgICogICAgIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgcGFyc2VyKG5hbWUsIHBhcnNlcikge1xuICAgIHRoaXNbXCJ+cGFyc2VyXCJdW25hbWVdID0gcGFyc2VyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9uVHJhbnNmb3JtKG9wdGlvbnMsIGhhbmRsZXIpIHtcbiAgICBpZiAoIWhhbmRsZXIpIHJldHVybiB0aGlzLm9uKFwidHJhbnNmb3JtXCIsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLm9uKFxuICAgICAgb3B0aW9ucyxcbiAgICAgIFwidHJhbnNmb3JtXCIsXG4gICAgICBoYW5kbGVyXG4gICAgKTtcbiAgfVxuICByZXNvbHZlKG9wdGlvbnNPclJlc29sdmUsIHJlc29sdmUpIHtcbiAgICBpZiAoIXJlc29sdmUpIHtcbiAgICAgIHJlc29sdmUgPSBvcHRpb25zT3JSZXNvbHZlO1xuICAgICAgb3B0aW9uc09yUmVzb2x2ZSA9IHsgYXM6IFwibG9jYWxcIiB9O1xuICAgIH1cbiAgICBjb25zdCBob29rID0ge1xuICAgICAgc3ViVHlwZTogXCJyZXNvbHZlXCIsXG4gICAgICBmbjogcmVzb2x2ZVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMub25CZWZvcmVIYW5kbGUob3B0aW9uc09yUmVzb2x2ZSwgaG9vayk7XG4gIH1cbiAgbWFwUmVzb2x2ZShvcHRpb25zT3JSZXNvbHZlLCBtYXBwZXIpIHtcbiAgICBpZiAoIW1hcHBlcikge1xuICAgICAgbWFwcGVyID0gb3B0aW9uc09yUmVzb2x2ZTtcbiAgICAgIG9wdGlvbnNPclJlc29sdmUgPSB7IGFzOiBcImxvY2FsXCIgfTtcbiAgICB9XG4gICAgY29uc3QgaG9vayA9IHtcbiAgICAgIHN1YlR5cGU6IFwibWFwUmVzb2x2ZVwiLFxuICAgICAgZm46IG1hcHBlclxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMub25CZWZvcmVIYW5kbGUob3B0aW9uc09yUmVzb2x2ZSwgaG9vayk7XG4gIH1cbiAgb25CZWZvcmVIYW5kbGUob3B0aW9ucywgaGFuZGxlcikge1xuICAgIGlmICghaGFuZGxlcikgcmV0dXJuIHRoaXMub24oXCJiZWZvcmVIYW5kbGVcIiwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXMub24oXG4gICAgICBvcHRpb25zLFxuICAgICAgXCJiZWZvcmVIYW5kbGVcIixcbiAgICAgIGhhbmRsZXJcbiAgICApO1xuICB9XG4gIG9uQWZ0ZXJIYW5kbGUob3B0aW9ucywgaGFuZGxlcikge1xuICAgIGlmICghaGFuZGxlcikgcmV0dXJuIHRoaXMub24oXCJhZnRlckhhbmRsZVwiLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy5vbihcbiAgICAgIG9wdGlvbnMsXG4gICAgICBcImFmdGVySGFuZGxlXCIsXG4gICAgICBoYW5kbGVyXG4gICAgKTtcbiAgfVxuICBtYXBSZXNwb25zZShvcHRpb25zLCBoYW5kbGVyKSB7XG4gICAgaWYgKCFoYW5kbGVyKSByZXR1cm4gdGhpcy5vbihcIm1hcFJlc3BvbnNlXCIsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLm9uKFxuICAgICAgb3B0aW9ucyxcbiAgICAgIFwibWFwUmVzcG9uc2VcIixcbiAgICAgIGhhbmRsZXJcbiAgICApO1xuICB9XG4gIG9uQWZ0ZXJSZXNwb25zZShvcHRpb25zLCBoYW5kbGVyKSB7XG4gICAgaWYgKCFoYW5kbGVyKSByZXR1cm4gdGhpcy5vbihcImFmdGVyUmVzcG9uc2VcIiwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXMub24oXG4gICAgICBvcHRpb25zLFxuICAgICAgXCJhZnRlclJlc3BvbnNlXCIsXG4gICAgICBoYW5kbGVyXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogIyMjIEFmdGVyIEhhbmRsZSB8IExpZmUgY3ljbGUgZXZlbnRcbiAgICogSW50ZXJjZXB0IHJlcXVlc3QgKiphZnRlcioqIG1haW4gaGFuZGxlciBpcyBjYWxsZWQuXG4gICAqXG4gICAqIElmIHRydXRoeSB2YWx1ZSBpcyByZXR1cm5lZCwgd2lsbCBiZSBhc3NpZ25lZCBhcyBgUmVzcG9uc2VgXG4gICAqXG4gICAqIC0tLVxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIG5ldyBFbHlzaWEoKVxuICAgKiAgICAgLm9uQWZ0ZXJIYW5kbGUoKGNvbnRleHQsIHJlc3BvbnNlKSA9PiB7XG4gICAqICAgICAgICAgaWYodHlwZW9mIHJlc3BvbnNlID09PSBcIm9iamVjdFwiKVxuICAgKiAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UpXG4gICAqICAgICB9KVxuICAgKiBgYGBcbiAgICovXG4gIHRyYWNlKG9wdGlvbnMsIGhhbmRsZXIpIHtcbiAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIgPSBvcHRpb25zO1xuICAgICAgb3B0aW9ucyA9IHsgYXM6IFwibG9jYWxcIiB9O1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaGFuZGxlcikpIGhhbmRsZXIgPSBbaGFuZGxlcl07XG4gICAgZm9yIChjb25zdCBmbiBvZiBoYW5kbGVyKVxuICAgICAgdGhpcy5vbihcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgXCJ0cmFjZVwiLFxuICAgICAgICBjcmVhdGVUcmFjZXIoZm4pXG4gICAgICApO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGVycm9yKG5hbWUsIGVycm9yMikge1xuICAgIHN3aXRjaCAodHlwZW9mIG5hbWUpIHtcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgZXJyb3IyLnByb3RvdHlwZVtFUlJPUl9DT0RFXSA9IG5hbWU7XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbnMuZXJyb3JbbmFtZV0gPSBlcnJvcjI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbnMuZXJyb3IgPSBuYW1lKHRoaXMuZGVmaW5pdGlvbnMuZXJyb3IpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZm9yIChjb25zdCBbY29kZSwgZXJyb3IzXSBvZiBPYmplY3QuZW50cmllcyhuYW1lKSkge1xuICAgICAgZXJyb3IzLnByb3RvdHlwZVtFUlJPUl9DT0RFXSA9IGNvZGU7XG4gICAgICB0aGlzLmRlZmluaXRpb25zLmVycm9yW2NvZGVdID0gZXJyb3IzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogIyMjIEVycm9yIHwgTGlmZSBjeWNsZSBldmVudFxuICAgKiBDYWxsZWQgd2hlbiBlcnJvciBpcyB0aHJvd24gZHVyaW5nIHByb2Nlc3NpbmcgcmVxdWVzdFxuICAgKlxuICAgKiAtLS1cbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBuZXcgRWx5c2lhKClcbiAgICogICAgIC5vbkVycm9yKCh7IGNvZGUgfSkgPT4ge1xuICAgKiAgICAgICAgIGlmKGNvZGUgPT09IFwiTk9UX0ZPVU5EXCIpXG4gICAqICAgICAgICAgICAgIHJldHVybiBcIlBhdGggbm90IGZvdW5kIDooXCJcbiAgICogICAgIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgb25FcnJvcihvcHRpb25zLCBoYW5kbGVyKSB7XG4gICAgaWYgKCFoYW5kbGVyKSByZXR1cm4gdGhpcy5vbihcImVycm9yXCIsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLm9uKFxuICAgICAgb3B0aW9ucyxcbiAgICAgIFwiZXJyb3JcIixcbiAgICAgIGhhbmRsZXJcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgc3RvcCB8IExpZmUgY3ljbGUgZXZlbnRcbiAgICogQ2FsbGVkIGFmdGVyIHNlcnZlciBzdG9wIHNlcnZpbmcgcmVxdWVzdFxuICAgKlxuICAgKiAtLS1cbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBuZXcgRWx5c2lhKClcbiAgICogICAgIC5vblN0b3AoKGFwcCkgPT4ge1xuICAgKiAgICAgICAgIGNsZWFudXAoKVxuICAgKiAgICAgfSlcbiAgICogYGBgXG4gICAqL1xuICBvblN0b3AoaGFuZGxlcikge1xuICAgIHRoaXMub24oXCJzdG9wXCIsIGhhbmRsZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9uKG9wdGlvbnNPclR5cGUsIHR5cGVPckhhbmRsZXJzLCBoYW5kbGVycykge1xuICAgIGxldCB0eXBlO1xuICAgIHN3aXRjaCAodHlwZW9mIG9wdGlvbnNPclR5cGUpIHtcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgdHlwZSA9IG9wdGlvbnNPclR5cGU7XG4gICAgICAgIGhhbmRsZXJzID0gdHlwZU9ySGFuZGxlcnM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICB0eXBlID0gdHlwZU9ySGFuZGxlcnM7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlT3JIYW5kbGVycykgJiYgdHlwZW9mIHR5cGVPckhhbmRsZXJzID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgIGhhbmRsZXJzID0gdHlwZU9ySGFuZGxlcnM7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVycykpIGhhbmRsZXJzID0gZm5Ub0NvbnRhaW5lcihoYW5kbGVycyk7XG4gICAgZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXJzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGhhbmRsZXJzID0gW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZuOiBoYW5kbGVyc1xuICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICAgIGVsc2UgaGFuZGxlcnMgPSBbaGFuZGxlcnNdO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGVzID0gaGFuZGxlcnM7XG4gICAgZm9yIChjb25zdCBoYW5kbGUgb2YgaGFuZGxlcykge1xuICAgICAgaGFuZGxlLnNjb3BlID0gdHlwZW9mIG9wdGlvbnNPclR5cGUgPT09IFwic3RyaW5nXCIgPyBcImxvY2FsXCIgOiBvcHRpb25zT3JUeXBlPy5hcyA/PyBcImxvY2FsXCI7XG4gICAgICBpZiAodHlwZSA9PT0gXCJyZXNvbHZlXCIgfHwgdHlwZSA9PT0gXCJkZXJpdmVcIikgaGFuZGxlLnN1YlR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICBpZiAodHlwZSAhPT0gXCJ0cmFjZVwiKVxuICAgICAgc3Vjcm9zZShcbiAgICAgICAge1xuICAgICAgICAgIFt0eXBlXTogaGFuZGxlcy5tYXAoKHgpID0+IHguZm4pXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuaW5mZXJlbmNlXG4gICAgICApO1xuICAgIGZvciAoY29uc3QgaGFuZGxlIG9mIGhhbmRsZXMpIHtcbiAgICAgIGNvbnN0IGZuID0gYXNIb29rVHlwZShoYW5kbGUsIFwiZ2xvYmFsXCIsIHsgc2tpcElmSGFzVHlwZTogdHJ1ZSB9KTtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwic3RhcnRcIjpcbiAgICAgICAgICB0aGlzLmV2ZW50LnN0YXJ0ID8/PSBbXTtcbiAgICAgICAgICB0aGlzLmV2ZW50LnN0YXJ0LnB1c2goZm4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicmVxdWVzdFwiOlxuICAgICAgICAgIHRoaXMuZXZlbnQucmVxdWVzdCA/Pz0gW107XG4gICAgICAgICAgdGhpcy5ldmVudC5yZXF1ZXN0LnB1c2goZm4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicGFyc2VcIjpcbiAgICAgICAgICB0aGlzLmV2ZW50LnBhcnNlID8/PSBbXTtcbiAgICAgICAgICB0aGlzLmV2ZW50LnBhcnNlLnB1c2goZm4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidHJhbnNmb3JtXCI6XG4gICAgICAgICAgdGhpcy5ldmVudC50cmFuc2Zvcm0gPz89IFtdO1xuICAgICAgICAgIHRoaXMuZXZlbnQudHJhbnNmb3JtLnB1c2goZm4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgIGNhc2UgXCJkZXJpdmVcIjpcbiAgICAgICAgICB0aGlzLmV2ZW50LnRyYW5zZm9ybSA/Pz0gW107XG4gICAgICAgICAgdGhpcy5ldmVudC50cmFuc2Zvcm0ucHVzaChcbiAgICAgICAgICAgIGZuVG9Db250YWluZXIoZm4sIFwiZGVyaXZlXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImJlZm9yZUhhbmRsZVwiOlxuICAgICAgICAgIHRoaXMuZXZlbnQuYmVmb3JlSGFuZGxlID8/PSBbXTtcbiAgICAgICAgICB0aGlzLmV2ZW50LmJlZm9yZUhhbmRsZS5wdXNoKGZuKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc29uYXJqcy9uby1kdXBsaWNhdGVkLWJyYW5jaGVzXG4gICAgICAgIGNhc2UgXCJyZXNvbHZlXCI6XG4gICAgICAgICAgdGhpcy5ldmVudC5iZWZvcmVIYW5kbGUgPz89IFtdO1xuICAgICAgICAgIHRoaXMuZXZlbnQuYmVmb3JlSGFuZGxlLnB1c2goXG4gICAgICAgICAgICBmblRvQ29udGFpbmVyKGZuLCBcInJlc29sdmVcIilcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYWZ0ZXJIYW5kbGVcIjpcbiAgICAgICAgICB0aGlzLmV2ZW50LmFmdGVySGFuZGxlID8/PSBbXTtcbiAgICAgICAgICB0aGlzLmV2ZW50LmFmdGVySGFuZGxlLnB1c2goZm4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibWFwUmVzcG9uc2VcIjpcbiAgICAgICAgICB0aGlzLmV2ZW50Lm1hcFJlc3BvbnNlID8/PSBbXTtcbiAgICAgICAgICB0aGlzLmV2ZW50Lm1hcFJlc3BvbnNlLnB1c2goZm4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYWZ0ZXJSZXNwb25zZVwiOlxuICAgICAgICAgIHRoaXMuZXZlbnQuYWZ0ZXJSZXNwb25zZSA/Pz0gW107XG4gICAgICAgICAgdGhpcy5ldmVudC5hZnRlclJlc3BvbnNlLnB1c2goZm4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidHJhY2VcIjpcbiAgICAgICAgICB0aGlzLmV2ZW50LnRyYWNlID8/PSBbXTtcbiAgICAgICAgICB0aGlzLmV2ZW50LnRyYWNlLnB1c2goZm4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICB0aGlzLmV2ZW50LmVycm9yID8/PSBbXTtcbiAgICAgICAgICB0aGlzLmV2ZW50LmVycm9yLnB1c2goZm4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic3RvcFwiOlxuICAgICAgICAgIHRoaXMuZXZlbnQuc3RvcCA/Pz0gW107XG4gICAgICAgICAgdGhpcy5ldmVudC5zdG9wLnB1c2goZm4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgdXNlIGBFbHlzaWEuYXNgIGluc3RlYWRcbiAgICpcbiAgICogV2lsbCBiZSByZW1vdmVkIGluIEVseXNpYSAxLjJcbiAgICovXG4gIHByb3BhZ2F0ZSgpIHtcbiAgICBwcm9tb3RlRXZlbnQodGhpcy5ldmVudC5wYXJzZSk7XG4gICAgcHJvbW90ZUV2ZW50KHRoaXMuZXZlbnQudHJhbnNmb3JtKTtcbiAgICBwcm9tb3RlRXZlbnQodGhpcy5ldmVudC5iZWZvcmVIYW5kbGUpO1xuICAgIHByb21vdGVFdmVudCh0aGlzLmV2ZW50LmFmdGVySGFuZGxlKTtcbiAgICBwcm9tb3RlRXZlbnQodGhpcy5ldmVudC5tYXBSZXNwb25zZSk7XG4gICAgcHJvbW90ZUV2ZW50KHRoaXMuZXZlbnQuYWZ0ZXJSZXNwb25zZSk7XG4gICAgcHJvbW90ZUV2ZW50KHRoaXMuZXZlbnQudHJhY2UpO1xuICAgIHByb21vdGVFdmVudCh0aGlzLmV2ZW50LmVycm9yKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBhcyh0eXBlKSB7XG4gICAgY29uc3QgY2FzdFR5cGUgPSB7IHBsdWdpbjogXCJzY29wZWRcIiwgc2NvcGVkOiBcInNjb3BlZFwiLCBnbG9iYWw6IFwiZ2xvYmFsXCIgfVt0eXBlXTtcbiAgICBwcm9tb3RlRXZlbnQodGhpcy5ldmVudC5wYXJzZSwgY2FzdFR5cGUpO1xuICAgIHByb21vdGVFdmVudCh0aGlzLmV2ZW50LnRyYW5zZm9ybSwgY2FzdFR5cGUpO1xuICAgIHByb21vdGVFdmVudCh0aGlzLmV2ZW50LmJlZm9yZUhhbmRsZSwgY2FzdFR5cGUpO1xuICAgIHByb21vdGVFdmVudCh0aGlzLmV2ZW50LmFmdGVySGFuZGxlLCBjYXN0VHlwZSk7XG4gICAgcHJvbW90ZUV2ZW50KHRoaXMuZXZlbnQubWFwUmVzcG9uc2UsIGNhc3RUeXBlKTtcbiAgICBwcm9tb3RlRXZlbnQodGhpcy5ldmVudC5hZnRlclJlc3BvbnNlLCBjYXN0VHlwZSk7XG4gICAgcHJvbW90ZUV2ZW50KHRoaXMuZXZlbnQudHJhY2UsIGNhc3RUeXBlKTtcbiAgICBwcm9tb3RlRXZlbnQodGhpcy5ldmVudC5lcnJvciwgY2FzdFR5cGUpO1xuICAgIGlmICh0eXBlID09PSBcInBsdWdpblwiKSB7XG4gICAgICB0aGlzLnZhbGlkYXRvci5zY29wZWQgPSBtZXJnZVNjaGVtYVZhbGlkYXRvcihcbiAgICAgICAgdGhpcy52YWxpZGF0b3Iuc2NvcGVkLFxuICAgICAgICB0aGlzLnZhbGlkYXRvci5sb2NhbFxuICAgICAgKTtcbiAgICAgIHRoaXMudmFsaWRhdG9yLmxvY2FsID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZ2xvYmFsXCIpIHtcbiAgICAgIHRoaXMudmFsaWRhdG9yLmdsb2JhbCA9IG1lcmdlU2NoZW1hVmFsaWRhdG9yKFxuICAgICAgICB0aGlzLnZhbGlkYXRvci5nbG9iYWwsXG4gICAgICAgIG1lcmdlU2NoZW1hVmFsaWRhdG9yKFxuICAgICAgICAgIHRoaXMudmFsaWRhdG9yLnNjb3BlZCxcbiAgICAgICAgICB0aGlzLnZhbGlkYXRvci5sb2NhbFxuICAgICAgICApXG4gICAgICApO1xuICAgICAgdGhpcy52YWxpZGF0b3Iuc2NvcGVkID0gbnVsbDtcbiAgICAgIHRoaXMudmFsaWRhdG9yLmxvY2FsID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqICMjIyBncm91cFxuICAgKiBFbmNhcHN1bGF0ZSBhbmQgZ3JvdXAgcGF0aCB3aXRoIHByZWZpeFxuICAgKlxuICAgKiAtLS1cbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBuZXcgRWx5c2lhKClcbiAgICogICAgIC5ncm91cCgnL3YxJywgYXBwID0+IGFwcFxuICAgKiAgICAgICAgIC5nZXQoJy8nLCAoKSA9PiAnSGknKVxuICAgKiAgICAgICAgIC5nZXQoJy9uYW1lJywgKCkgPT4gJ0VseXNpYScpXG4gICAqICAgICB9KVxuICAgKiBgYGBcbiAgICovXG4gIGdyb3VwKHByZWZpeCwgc2NoZW1hT3JSdW4sIHJ1bikge1xuICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IEVseXNpYSh7XG4gICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgIHByZWZpeDogXCJcIlxuICAgIH0pO1xuICAgIGluc3RhbmNlLnNpbmdsZXRvbiA9IHsgLi4udGhpcy5zaW5nbGV0b24gfTtcbiAgICBpbnN0YW5jZS5kZWZpbml0aW9ucyA9IHsgLi4udGhpcy5kZWZpbml0aW9ucyB9O1xuICAgIGluc3RhbmNlLmdldFNlcnZlciA9ICgpID0+IHRoaXMuZ2V0U2VydmVyKCk7XG4gICAgaW5zdGFuY2UuaW5mZXJlbmNlID0gY2xvbmVJbmZlcmVuY2UodGhpcy5pbmZlcmVuY2UpO1xuICAgIGluc3RhbmNlLmV4dGVuZGVyID0geyAuLi50aGlzLmV4dGVuZGVyIH07XG4gICAgY29uc3QgaXNTY2hlbWEgPSB0eXBlb2Ygc2NoZW1hT3JSdW4gPT09IFwib2JqZWN0XCI7XG4gICAgY29uc3Qgc2FuZGJveCA9IChpc1NjaGVtYSA/IHJ1biA6IHNjaGVtYU9yUnVuKShpbnN0YW5jZSk7XG4gICAgdGhpcy5zaW5nbGV0b24gPSBtZXJnZURlZXAodGhpcy5zaW5nbGV0b24sIGluc3RhbmNlLnNpbmdsZXRvbik7XG4gICAgdGhpcy5kZWZpbml0aW9ucyA9IG1lcmdlRGVlcCh0aGlzLmRlZmluaXRpb25zLCBpbnN0YW5jZS5kZWZpbml0aW9ucyk7XG4gICAgaWYgKHNhbmRib3guZXZlbnQucmVxdWVzdD8ubGVuZ3RoKVxuICAgICAgdGhpcy5ldmVudC5yZXF1ZXN0ID0gW1xuICAgICAgICAuLi50aGlzLmV2ZW50LnJlcXVlc3QgfHwgW10sXG4gICAgICAgIC4uLnNhbmRib3guZXZlbnQucmVxdWVzdCB8fCBbXVxuICAgICAgXTtcbiAgICBpZiAoc2FuZGJveC5ldmVudC5tYXBSZXNwb25zZT8ubGVuZ3RoKVxuICAgICAgdGhpcy5ldmVudC5tYXBSZXNwb25zZSA9IFtcbiAgICAgICAgLi4udGhpcy5ldmVudC5tYXBSZXNwb25zZSB8fCBbXSxcbiAgICAgICAgLi4uc2FuZGJveC5ldmVudC5tYXBSZXNwb25zZSB8fCBbXVxuICAgICAgXTtcbiAgICB0aGlzLm1vZGVsKHNhbmRib3guZGVmaW5pdGlvbnMudHlwZSk7XG4gICAgT2JqZWN0LnZhbHVlcyhpbnN0YW5jZS5yb3V0ZXIuaGlzdG9yeSkuZm9yRWFjaChcbiAgICAgICh7IG1ldGhvZCwgcGF0aCwgaGFuZGxlciwgaG9va3MgfSkgPT4ge1xuICAgICAgICBwYXRoID0gKGlzU2NoZW1hID8gXCJcIiA6IHRoaXMuY29uZmlnLnByZWZpeCkgKyBwcmVmaXggKyBwYXRoO1xuICAgICAgICBpZiAoaXNTY2hlbWEpIHtcbiAgICAgICAgICBjb25zdCBob29rID0gc2NoZW1hT3JSdW47XG4gICAgICAgICAgY29uc3QgbG9jYWxIb29rID0gaG9va3M7XG4gICAgICAgICAgdGhpcy5hZGQoXG4gICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgIG1lcmdlSG9vayhob29rLCB7XG4gICAgICAgICAgICAgIC4uLmxvY2FsSG9vayB8fCB7fSxcbiAgICAgICAgICAgICAgZXJyb3I6ICFsb2NhbEhvb2suZXJyb3IgPyBzYW5kYm94LmV2ZW50LmVycm9yIDogQXJyYXkuaXNBcnJheShsb2NhbEhvb2suZXJyb3IpID8gW1xuICAgICAgICAgICAgICAgIC4uLmxvY2FsSG9vay5lcnJvciB8fCB7fSxcbiAgICAgICAgICAgICAgICAuLi5zYW5kYm94LmV2ZW50LmVycm9yIHx8IHt9XG4gICAgICAgICAgICAgIF0gOiBbXG4gICAgICAgICAgICAgICAgbG9jYWxIb29rLmVycm9yLFxuICAgICAgICAgICAgICAgIC4uLnNhbmRib3guZXZlbnQuZXJyb3IgfHwge31cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYWRkKFxuICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgIGhhbmRsZXIsXG4gICAgICAgICAgICBtZXJnZUhvb2soaG9va3MsIHtcbiAgICAgICAgICAgICAgZXJyb3I6IHNhbmRib3guZXZlbnQuZXJyb3JcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBza2lwUHJlZml4OiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqICMjIyBndWFyZFxuICAgKiBFbmNhcHN1bGF0ZSBhbmQgcGFzcyBob29rIGludG8gYWxsIGNoaWxkIGhhbmRsZXJcbiAgICpcbiAgICogLS0tXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogaW1wb3J0IHsgdCB9IGZyb20gJ2VseXNpYSdcbiAgICpcbiAgICogbmV3IEVseXNpYSgpXG4gICAqICAgICAuZ3VhcmQoe1xuICAgKiAgICAgICAgICBzY2hlbWE6IHtcbiAgICogICAgICAgICAgICAgIGJvZHk6IHQuT2JqZWN0KHtcbiAgICogICAgICAgICAgICAgICAgICB1c2VybmFtZTogdC5TdHJpbmcoKSxcbiAgICogICAgICAgICAgICAgICAgICBwYXNzd29yZDogdC5TdHJpbmcoKVxuICAgKiAgICAgICAgICAgICAgfSlcbiAgICogICAgICAgICAgfVxuICAgKiAgICAgfSwgYXBwID0+IGFwcFxuICAgKiAgICAgICAgIC5nZXQoXCIvXCIsICgpID0+ICdIaScpXG4gICAqICAgICAgICAgLmdldChcIi9uYW1lXCIsICgpID0+ICdFbHlzaWEnKVxuICAgKiAgICAgfSlcbiAgICogYGBgXG4gICAqL1xuICBndWFyZChob29rLCBydW4pIHtcbiAgICBpZiAoIXJ1bikge1xuICAgICAgaWYgKHR5cGVvZiBob29rID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHRoaXMuYXBwbHlNYWNybyhob29rKTtcbiAgICAgICAgY29uc3QgdHlwZSA9IGhvb2suYXMgPz8gXCJsb2NhbFwiO1xuICAgICAgICB0aGlzLnZhbGlkYXRvclt0eXBlXSA9IHtcbiAgICAgICAgICBib2R5OiBob29rLmJvZHkgPz8gdGhpcy52YWxpZGF0b3JbdHlwZV0/LmJvZHksXG4gICAgICAgICAgaGVhZGVyczogaG9vay5oZWFkZXJzID8/IHRoaXMudmFsaWRhdG9yW3R5cGVdPy5oZWFkZXJzLFxuICAgICAgICAgIHBhcmFtczogaG9vay5wYXJhbXMgPz8gdGhpcy52YWxpZGF0b3JbdHlwZV0/LnBhcmFtcyxcbiAgICAgICAgICBxdWVyeTogaG9vay5xdWVyeSA/PyB0aGlzLnZhbGlkYXRvclt0eXBlXT8ucXVlcnksXG4gICAgICAgICAgcmVzcG9uc2U6IGhvb2sucmVzcG9uc2UgPz8gdGhpcy52YWxpZGF0b3JbdHlwZV0/LnJlc3BvbnNlLFxuICAgICAgICAgIGNvb2tpZTogaG9vay5jb29raWUgPz8gdGhpcy52YWxpZGF0b3JbdHlwZV0/LmNvb2tpZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoaG9vay5wYXJzZSkgdGhpcy5vbih7IGFzOiB0eXBlIH0sIFwicGFyc2VcIiwgaG9vay5wYXJzZSk7XG4gICAgICAgIGlmIChob29rLnRyYW5zZm9ybSlcbiAgICAgICAgICB0aGlzLm9uKHsgYXM6IHR5cGUgfSwgXCJ0cmFuc2Zvcm1cIiwgaG9vay50cmFuc2Zvcm0pO1xuICAgICAgICBpZiAoaG9vay5kZXJpdmUpIHRoaXMub24oeyBhczogdHlwZSB9LCBcImRlcml2ZVwiLCBob29rLmRlcml2ZSk7XG4gICAgICAgIGlmIChob29rLmJlZm9yZUhhbmRsZSlcbiAgICAgICAgICB0aGlzLm9uKHsgYXM6IHR5cGUgfSwgXCJiZWZvcmVIYW5kbGVcIiwgaG9vay5iZWZvcmVIYW5kbGUpO1xuICAgICAgICBpZiAoaG9vay5yZXNvbHZlKSB0aGlzLm9uKHsgYXM6IHR5cGUgfSwgXCJyZXNvbHZlXCIsIGhvb2sucmVzb2x2ZSk7XG4gICAgICAgIGlmIChob29rLmFmdGVySGFuZGxlKVxuICAgICAgICAgIHRoaXMub24oeyBhczogdHlwZSB9LCBcImFmdGVySGFuZGxlXCIsIGhvb2suYWZ0ZXJIYW5kbGUpO1xuICAgICAgICBpZiAoaG9vay5tYXBSZXNwb25zZSlcbiAgICAgICAgICB0aGlzLm9uKHsgYXM6IHR5cGUgfSwgXCJtYXBSZXNwb25zZVwiLCBob29rLm1hcFJlc3BvbnNlKTtcbiAgICAgICAgaWYgKGhvb2suYWZ0ZXJSZXNwb25zZSlcbiAgICAgICAgICB0aGlzLm9uKHsgYXM6IHR5cGUgfSwgXCJhZnRlclJlc3BvbnNlXCIsIGhvb2suYWZ0ZXJSZXNwb25zZSk7XG4gICAgICAgIGlmIChob29rLmVycm9yKSB0aGlzLm9uKHsgYXM6IHR5cGUgfSwgXCJlcnJvclwiLCBob29rLmVycm9yKTtcbiAgICAgICAgaWYgKGhvb2suZGV0YWlsKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmRldGFpbClcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmRldGFpbCA9IG1lcmdlRGVlcChcbiAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcuZGV0YWlsKSxcbiAgICAgICAgICAgICAgaG9vay5kZXRhaWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgZWxzZSB0aGlzLmNvbmZpZy5kZXRhaWwgPSBob29rLmRldGFpbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaG9vaz8udGFncykge1xuICAgICAgICAgIGlmICghdGhpcy5jb25maWcuZGV0YWlsKVxuICAgICAgICAgICAgdGhpcy5jb25maWcuZGV0YWlsID0ge1xuICAgICAgICAgICAgICB0YWdzOiBob29rLnRhZ3NcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgZWxzZSB0aGlzLmNvbmZpZy5kZXRhaWwudGFncyA9IGhvb2sudGFncztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmd1YXJkKHt9LCBob29rKTtcbiAgICB9XG4gICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgRWx5c2lhKHtcbiAgICAgIC4uLnRoaXMuY29uZmlnLFxuICAgICAgcHJlZml4OiBcIlwiXG4gICAgfSk7XG4gICAgaW5zdGFuY2Uuc2luZ2xldG9uID0geyAuLi50aGlzLnNpbmdsZXRvbiB9O1xuICAgIGluc3RhbmNlLmRlZmluaXRpb25zID0geyAuLi50aGlzLmRlZmluaXRpb25zIH07XG4gICAgaW5zdGFuY2UuaW5mZXJlbmNlID0gY2xvbmVJbmZlcmVuY2UodGhpcy5pbmZlcmVuY2UpO1xuICAgIGluc3RhbmNlLmV4dGVuZGVyID0geyAuLi50aGlzLmV4dGVuZGVyIH07XG4gICAgY29uc3Qgc2FuZGJveCA9IHJ1bihpbnN0YW5jZSk7XG4gICAgdGhpcy5zaW5nbGV0b24gPSBtZXJnZURlZXAodGhpcy5zaW5nbGV0b24sIGluc3RhbmNlLnNpbmdsZXRvbik7XG4gICAgdGhpcy5kZWZpbml0aW9ucyA9IG1lcmdlRGVlcCh0aGlzLmRlZmluaXRpb25zLCBpbnN0YW5jZS5kZWZpbml0aW9ucyk7XG4gICAgc2FuZGJveC5nZXRTZXJ2ZXIgPSAoKSA9PiB0aGlzLnNlcnZlcjtcbiAgICBpZiAoc2FuZGJveC5ldmVudC5yZXF1ZXN0Py5sZW5ndGgpXG4gICAgICB0aGlzLmV2ZW50LnJlcXVlc3QgPSBbXG4gICAgICAgIC4uLnRoaXMuZXZlbnQucmVxdWVzdCB8fCBbXSxcbiAgICAgICAgLi4uc2FuZGJveC5ldmVudC5yZXF1ZXN0IHx8IFtdXG4gICAgICBdO1xuICAgIGlmIChzYW5kYm94LmV2ZW50Lm1hcFJlc3BvbnNlPy5sZW5ndGgpXG4gICAgICB0aGlzLmV2ZW50Lm1hcFJlc3BvbnNlID0gW1xuICAgICAgICAuLi50aGlzLmV2ZW50Lm1hcFJlc3BvbnNlIHx8IFtdLFxuICAgICAgICAuLi5zYW5kYm94LmV2ZW50Lm1hcFJlc3BvbnNlIHx8IFtdXG4gICAgICBdO1xuICAgIHRoaXMubW9kZWwoc2FuZGJveC5kZWZpbml0aW9ucy50eXBlKTtcbiAgICBPYmplY3QudmFsdWVzKGluc3RhbmNlLnJvdXRlci5oaXN0b3J5KS5mb3JFYWNoKFxuICAgICAgKHsgbWV0aG9kLCBwYXRoLCBoYW5kbGVyLCBob29rczogbG9jYWxIb29rIH0pID0+IHtcbiAgICAgICAgdGhpcy5hZGQoXG4gICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICBtZXJnZUhvb2soaG9vaywge1xuICAgICAgICAgICAgLi4ubG9jYWxIb29rIHx8IHt9LFxuICAgICAgICAgICAgZXJyb3I6ICFsb2NhbEhvb2suZXJyb3IgPyBzYW5kYm94LmV2ZW50LmVycm9yIDogQXJyYXkuaXNBcnJheShsb2NhbEhvb2suZXJyb3IpID8gW1xuICAgICAgICAgICAgICAuLi5sb2NhbEhvb2suZXJyb3IgfHwge30sXG4gICAgICAgICAgICAgIC4uLnNhbmRib3guZXZlbnQuZXJyb3IgfHwgW11cbiAgICAgICAgICAgIF0gOiBbXG4gICAgICAgICAgICAgIGxvY2FsSG9vay5lcnJvcixcbiAgICAgICAgICAgICAgLi4uc2FuZGJveC5ldmVudC5lcnJvciB8fCBbXVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogIyMjIHVzZVxuICAgKiBNZXJnZSBzZXBhcmF0ZSBsb2dpYyBvZiBFbHlzaWEgd2l0aCBjdXJyZW50XG4gICAqXG4gICAqIC0tLVxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHBsdWdpbiA9IChhcHA6IEVseXNpYSkgPT4gYXBwXG4gICAqICAgICAuZ2V0KCcvcGx1Z2luJywgKCkgPT4gJ2hpJylcbiAgICpcbiAgICogbmV3IEVseXNpYSgpXG4gICAqICAgICAudXNlKHBsdWdpbilcbiAgICogYGBgXG4gICAqL1xuICB1c2UocGx1Z2luLCBvcHRpb25zKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGx1Z2luKSkge1xuICAgICAgbGV0IGFwcCA9IHRoaXM7XG4gICAgICBmb3IgKGNvbnN0IHAgb2YgcGx1Z2luKSBhcHAgPSBhcHAudXNlKHApO1xuICAgICAgcmV0dXJuIGFwcDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnM/LnNjb3BlZClcbiAgICAgIHJldHVybiB0aGlzLmd1YXJkKHt9LCAoYXBwKSA9PiBhcHAudXNlKHBsdWdpbikpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHBsdWdpbikpIHtcbiAgICAgIGxldCBjdXJyZW50ID0gdGhpcztcbiAgICAgIGZvciAoY29uc3QgcCBvZiBwbHVnaW4pIGN1cnJlbnQgPSB0aGlzLnVzZShwKTtcbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cbiAgICBpZiAocGx1Z2luIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgdGhpcy5wcm9taXNlZE1vZHVsZXMuYWRkKFxuICAgICAgICBwbHVnaW4udGhlbigocGx1Z2luMikgPT4ge1xuICAgICAgICAgIGlmICh0eXBlb2YgcGx1Z2luMiA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gcGx1Z2luMih0aGlzKTtcbiAgICAgICAgICBpZiAocGx1Z2luMiBpbnN0YW5jZW9mIEVseXNpYSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91c2UocGx1Z2luMikuY29tcGlsZSgpO1xuICAgICAgICAgIGlmIChwbHVnaW4yLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiRWx5c2lhXCIpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlKFxuICAgICAgICAgICAgICBwbHVnaW4yXG4gICAgICAgICAgICApLmNvbXBpbGUoKTtcbiAgICAgICAgICBpZiAodHlwZW9mIHBsdWdpbjIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgcmV0dXJuIHBsdWdpbjIuZGVmYXVsdCh0aGlzKTtcbiAgICAgICAgICBpZiAocGx1Z2luMi5kZWZhdWx0IGluc3RhbmNlb2YgRWx5c2lhKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VzZShwbHVnaW4yLmRlZmF1bHQpO1xuICAgICAgICAgIGlmIChwbHVnaW4yLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiRWx5c2lhXCIpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlKHBsdWdpbjIuZGVmYXVsdCk7XG4gICAgICAgICAgaWYgKHBsdWdpbjIuY29uc3RydWN0b3IubmFtZSA9PT0gXCJfRWx5c2lhXCIpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlKHBsdWdpbjIuZGVmYXVsdCk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91c2UocGx1Z2luMi5kZWZhdWx0KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcjIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICdJbnZhbGlkIHBsdWdpbiB0eXBlLiBFeHBlY3RlZCBFbHlzaWEgaW5zdGFuY2UsIGZ1bmN0aW9uLCBvciBtb2R1bGUgd2l0aCBcImRlZmF1bHRcIiBhcyBFbHlzaWEgaW5zdGFuY2Ugb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIEVseXNpYSBpbnN0YW5jZS4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3IyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkudGhlbigodikgPT4ge1xuICAgICAgICAgIGlmICh2ICYmIHR5cGVvZiB2LmNvbXBpbGUgPT09IFwiZnVuY3Rpb25cIikgdi5jb21waWxlKCk7XG4gICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl91c2UocGx1Z2luKTtcbiAgfVxuICBwcm9wYWdhdGVQcm9taXNlTW9kdWxlcyhwbHVnaW4pIHtcbiAgICBpZiAocGx1Z2luLnByb21pc2VkTW9kdWxlcy5zaXplIDw9IDApIHJldHVybiB0aGlzO1xuICAgIGZvciAoY29uc3QgcHJvbWlzZSBvZiBwbHVnaW4ucHJvbWlzZWRNb2R1bGVzLnByb21pc2VzKVxuICAgICAgdGhpcy5wcm9taXNlZE1vZHVsZXMuYWRkKFxuICAgICAgICBwcm9taXNlLnRoZW4oKHYpID0+IHtcbiAgICAgICAgICBpZiAoIXYpIHJldHVybjtcbiAgICAgICAgICBjb25zdCB0MyA9IHRoaXMuX3VzZSh2KTtcbiAgICAgICAgICBpZiAodDMgaW5zdGFuY2VvZiBQcm9taXNlKVxuICAgICAgICAgICAgcmV0dXJuIHQzLnRoZW4oKHYyKSA9PiB7XG4gICAgICAgICAgICAgIGlmICh2MikgdjIuY29tcGlsZSgpO1xuICAgICAgICAgICAgICBlbHNlIHYuY29tcGlsZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHYuY29tcGlsZSgpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBfdXNlKHBsdWdpbikge1xuICAgIGlmICh0eXBlb2YgcGx1Z2luID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gcGx1Z2luKHRoaXMpO1xuICAgICAgaWYgKGluc3RhbmNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICB0aGlzLnByb21pc2VkTW9kdWxlcy5hZGQoXG4gICAgICAgICAgaW5zdGFuY2UudGhlbigocGx1Z2luMikgPT4ge1xuICAgICAgICAgICAgaWYgKHBsdWdpbjIgaW5zdGFuY2VvZiBFbHlzaWEpIHtcbiAgICAgICAgICAgICAgcGx1Z2luMi5nZXRTZXJ2ZXIgPSAoKSA9PiB0aGlzLmdldFNlcnZlcigpO1xuICAgICAgICAgICAgICBwbHVnaW4yLmdldEdsb2JhbFJvdXRlcyA9ICgpID0+IHRoaXMuZ2V0R2xvYmFsUm91dGVzKCk7XG4gICAgICAgICAgICAgIHBsdWdpbjIubW9kZWwodGhpcy5kZWZpbml0aW9ucy50eXBlKTtcbiAgICAgICAgICAgICAgcGx1Z2luMi5lcnJvcih0aGlzLmRlZmluaXRpb25zLmVycm9yKTtcbiAgICAgICAgICAgICAgZm9yIChjb25zdCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICBob29rc1xuICAgICAgICAgICAgICB9IG9mIE9iamVjdC52YWx1ZXMocGx1Z2luMi5yb3V0ZXIuaGlzdG9yeSkpXG4gICAgICAgICAgICAgICAgdGhpcy5hZGQoXG4gICAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgIG1lcmdlSG9vayhob29rcywge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcjogcGx1Z2luMi5ldmVudC5lcnJvclxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBwbHVnaW4yLmNvbXBpbGUoKTtcbiAgICAgICAgICAgICAgaWYgKHBsdWdpbjIgPT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICAgICAgdGhpcy5wcm9wYWdhdGVQcm9taXNlTW9kdWxlcyhwbHVnaW4yKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHBsdWdpbjI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBsdWdpbjIgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgcmV0dXJuIHBsdWdpbjIoXG4gICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwbHVnaW4yLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgcmV0dXJuIHBsdWdpbjIuZGVmYXVsdChcbiAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlKHBsdWdpbjIpO1xuICAgICAgICAgIH0pLnRoZW4oKHYpID0+IHtcbiAgICAgICAgICAgIGlmICh2ICYmIHR5cGVvZiB2LmNvbXBpbGUgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgdi5jb21waWxlKCk7XG4gICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG4gICAgdGhpcy5wcm9wYWdhdGVQcm9taXNlTW9kdWxlcyhwbHVnaW4pO1xuICAgIGNvbnN0IHsgbmFtZSwgc2VlZCB9ID0gcGx1Z2luLmNvbmZpZztcbiAgICBwbHVnaW4uZ2V0UGFyZW50ID0gKCkgPT4gdGhpcztcbiAgICBwbHVnaW4uZ2V0U2VydmVyID0gKCkgPT4gdGhpcy5nZXRTZXJ2ZXIoKTtcbiAgICBwbHVnaW4uZ2V0R2xvYmFsUm91dGVzID0gKCkgPT4gdGhpcy5nZXRHbG9iYWxSb3V0ZXMoKTtcbiAgICBwbHVnaW4ubW9kZWwodGhpcy5kZWZpbml0aW9ucy50eXBlKTtcbiAgICBwbHVnaW4uZXJyb3IodGhpcy5kZWZpbml0aW9ucy5lcnJvcik7XG4gICAgdGhpc1tcIn5wYXJzZXJcIl0gPSB7XG4gICAgICAuLi5wbHVnaW5bXCJ+cGFyc2VyXCJdLFxuICAgICAgLi4udGhpc1tcIn5wYXJzZXJcIl1cbiAgICB9O1xuICAgIHRoaXMuaGVhZGVycyhwbHVnaW4uc2V0SGVhZGVycyk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIGlmICghKG5hbWUgaW4gdGhpcy5kZXBlbmRlbmNpZXMpKSB0aGlzLmRlcGVuZGVuY2llc1tuYW1lXSA9IFtdO1xuICAgICAgY29uc3QgY3VycmVudCA9IHNlZWQgIT09IHZvaWQgMCA/IGNoZWNrc3VtKG5hbWUgKyBKU09OLnN0cmluZ2lmeShzZWVkKSkgOiAwO1xuICAgICAgaWYgKCF0aGlzLmRlcGVuZGVuY2llc1tuYW1lXS5zb21lKFxuICAgICAgICAoeyBjaGVja3N1bTogY2hlY2tzdW0zIH0pID0+IGN1cnJlbnQgPT09IGNoZWNrc3VtM1xuICAgICAgKSkge1xuICAgICAgICB0aGlzLmV4dGVuZGVyLm1hY3JvcyA9IHRoaXMuZXh0ZW5kZXIubWFjcm9zLmNvbmNhdChcbiAgICAgICAgICBwbHVnaW4uZXh0ZW5kZXIubWFjcm9zXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZXh0ZW5kZXIuaGlnaGVyT3JkZXJGdW5jdGlvbnMgPSB0aGlzLmV4dGVuZGVyLmhpZ2hlck9yZGVyRnVuY3Rpb25zLmNvbmNhdChcbiAgICAgICAgICBwbHVnaW4uZXh0ZW5kZXIuaGlnaGVyT3JkZXJGdW5jdGlvbnNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5leHRlbmRlci5tYWNyb3MgPSB0aGlzLmV4dGVuZGVyLm1hY3Jvcy5jb25jYXQoXG4gICAgICAgIHBsdWdpbi5leHRlbmRlci5tYWNyb3NcbiAgICAgICk7XG4gICAgICB0aGlzLmV4dGVuZGVyLmhpZ2hlck9yZGVyRnVuY3Rpb25zID0gdGhpcy5leHRlbmRlci5oaWdoZXJPcmRlckZ1bmN0aW9ucy5jb25jYXQoXG4gICAgICAgIHBsdWdpbi5leHRlbmRlci5oaWdoZXJPcmRlckZ1bmN0aW9uc1xuICAgICAgKTtcbiAgICB9XG4gICAgZGVkdXBsaWNhdGVDaGVja3N1bSh0aGlzLmV4dGVuZGVyLm1hY3Jvcyk7XG4gICAgZGVkdXBsaWNhdGVDaGVja3N1bSh0aGlzLmV4dGVuZGVyLmhpZ2hlck9yZGVyRnVuY3Rpb25zKTtcbiAgICBjb25zdCBob2ZIYXNoZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZXh0ZW5kZXIuaGlnaGVyT3JkZXJGdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGhvZiA9IHRoaXMuZXh0ZW5kZXIuaGlnaGVyT3JkZXJGdW5jdGlvbnNbaV07XG4gICAgICBpZiAoaG9mLmNoZWNrc3VtKSB7XG4gICAgICAgIGlmIChob2ZIYXNoZXMuaW5jbHVkZXMoaG9mLmNoZWNrc3VtKSkge1xuICAgICAgICAgIHRoaXMuZXh0ZW5kZXIuaGlnaGVyT3JkZXJGdW5jdGlvbnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgICBob2ZIYXNoZXMucHVzaChob2YuY2hlY2tzdW0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmluZmVyZW5jZSA9IHtcbiAgICAgIGJvZHk6IHRoaXMuaW5mZXJlbmNlLmJvZHkgfHwgcGx1Z2luLmluZmVyZW5jZS5ib2R5LFxuICAgICAgY29va2llOiB0aGlzLmluZmVyZW5jZS5jb29raWUgfHwgcGx1Z2luLmluZmVyZW5jZS5jb29raWUsXG4gICAgICBoZWFkZXJzOiB0aGlzLmluZmVyZW5jZS5oZWFkZXJzIHx8IHBsdWdpbi5pbmZlcmVuY2UuaGVhZGVycyxcbiAgICAgIHF1ZXJ5OiB0aGlzLmluZmVyZW5jZS5xdWVyeSB8fCBwbHVnaW4uaW5mZXJlbmNlLnF1ZXJ5LFxuICAgICAgc2V0OiB0aGlzLmluZmVyZW5jZS5zZXQgfHwgcGx1Z2luLmluZmVyZW5jZS5zZXQsXG4gICAgICBzZXJ2ZXI6IHRoaXMuaW5mZXJlbmNlLnNlcnZlciB8fCBwbHVnaW4uaW5mZXJlbmNlLnNlcnZlcixcbiAgICAgIHJlcXVlc3Q6IHRoaXMuaW5mZXJlbmNlLnJlcXVlc3QgfHwgcGx1Z2luLmluZmVyZW5jZS5yZXF1ZXN0LFxuICAgICAgcm91dGU6IHRoaXMuaW5mZXJlbmNlLnJvdXRlIHx8IHBsdWdpbi5pbmZlcmVuY2Uucm91dGVcbiAgICB9O1xuICAgIHRoaXMuZGVjb3JhdGUocGx1Z2luLnNpbmdsZXRvbi5kZWNvcmF0b3IpO1xuICAgIHRoaXMuc3RhdGUocGx1Z2luLnNpbmdsZXRvbi5zdG9yZSk7XG4gICAgdGhpcy5tb2RlbChwbHVnaW4uZGVmaW5pdGlvbnMudHlwZSk7XG4gICAgdGhpcy5lcnJvcihwbHVnaW4uZGVmaW5pdGlvbnMuZXJyb3IpO1xuICAgIHBsdWdpbi5leHRlbmRlci5tYWNyb3MgPSB0aGlzLmV4dGVuZGVyLm1hY3Jvcy5jb25jYXQoXG4gICAgICBwbHVnaW4uZXh0ZW5kZXIubWFjcm9zXG4gICAgKTtcbiAgICBmb3IgKGNvbnN0IHsgbWV0aG9kLCBwYXRoLCBoYW5kbGVyLCBob29rcyB9IG9mIE9iamVjdC52YWx1ZXMoXG4gICAgICBwbHVnaW4ucm91dGVyLmhpc3RvcnlcbiAgICApKSB7XG4gICAgICB0aGlzLmFkZChcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBwYXRoLFxuICAgICAgICBoYW5kbGVyLFxuICAgICAgICBtZXJnZUhvb2soaG9va3MsIHtcbiAgICAgICAgICBlcnJvcjogcGx1Z2luLmV2ZW50LmVycm9yXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAobmFtZSkge1xuICAgICAgaWYgKCEobmFtZSBpbiB0aGlzLmRlcGVuZGVuY2llcykpIHRoaXMuZGVwZW5kZW5jaWVzW25hbWVdID0gW107XG4gICAgICBjb25zdCBjdXJyZW50ID0gc2VlZCAhPT0gdm9pZCAwID8gY2hlY2tzdW0obmFtZSArIEpTT04uc3RyaW5naWZ5KHNlZWQpKSA6IDA7XG4gICAgICBpZiAodGhpcy5kZXBlbmRlbmNpZXNbbmFtZV0uc29tZShcbiAgICAgICAgKHsgY2hlY2tzdW06IGNoZWNrc3VtMyB9KSA9PiBjdXJyZW50ID09PSBjaGVja3N1bTNcbiAgICAgICkpXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgdGhpcy5kZXBlbmRlbmNpZXNbbmFtZV0ucHVzaChcbiAgICAgICAgdGhpcy5jb25maWc/LmFuYWx5dGljID8ge1xuICAgICAgICAgIG5hbWU6IHBsdWdpbi5jb25maWcubmFtZSxcbiAgICAgICAgICBzZWVkOiBwbHVnaW4uY29uZmlnLnNlZWQsXG4gICAgICAgICAgY2hlY2tzdW06IGN1cnJlbnQsXG4gICAgICAgICAgZGVwZW5kZW5jaWVzOiBwbHVnaW4uZGVwZW5kZW5jaWVzLFxuICAgICAgICAgIHN0YWNrOiBwbHVnaW4udGVsZW1ldHJ5LnN0YWNrLFxuICAgICAgICAgIHJvdXRlczogcGx1Z2luLnJvdXRlci5oaXN0b3J5LFxuICAgICAgICAgIGRlY29yYXRvcnM6IHBsdWdpbi5zaW5nbGV0b24sXG4gICAgICAgICAgc3RvcmU6IHBsdWdpbi5zaW5nbGV0b24uc3RvcmUsXG4gICAgICAgICAgZXJyb3I6IHBsdWdpbi5kZWZpbml0aW9ucy5lcnJvcixcbiAgICAgICAgICBkZXJpdmU6IHBsdWdpbi5ldmVudC50cmFuc2Zvcm0/LmZpbHRlcigoeCkgPT4geD8uc3ViVHlwZSA9PT0gXCJkZXJpdmVcIikubWFwKCh4KSA9PiAoe1xuICAgICAgICAgICAgZm46IHgudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHN0YWNrOiBuZXcgRXJyb3IoKS5zdGFjayA/PyBcIlwiXG4gICAgICAgICAgfSkpLFxuICAgICAgICAgIHJlc29sdmU6IHBsdWdpbi5ldmVudC50cmFuc2Zvcm0/LmZpbHRlcigoeCkgPT4geD8uc3ViVHlwZSA9PT0gXCJyZXNvbHZlXCIpLm1hcCgoeCkgPT4gKHtcbiAgICAgICAgICAgIGZuOiB4LnRvU3RyaW5nKCksXG4gICAgICAgICAgICBzdGFjazogbmV3IEVycm9yKCkuc3RhY2sgPz8gXCJcIlxuICAgICAgICAgIH0pKVxuICAgICAgICB9IDoge1xuICAgICAgICAgIG5hbWU6IHBsdWdpbi5jb25maWcubmFtZSxcbiAgICAgICAgICBzZWVkOiBwbHVnaW4uY29uZmlnLnNlZWQsXG4gICAgICAgICAgY2hlY2tzdW06IGN1cnJlbnQsXG4gICAgICAgICAgZGVwZW5kZW5jaWVzOiBwbHVnaW4uZGVwZW5kZW5jaWVzXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLmV2ZW50ID0gbWVyZ2VMaWZlQ3ljbGUoXG4gICAgICAgIHRoaXMuZXZlbnQsXG4gICAgICAgIGZpbHRlckdsb2JhbEhvb2socGx1Z2luLmV2ZW50KSxcbiAgICAgICAgY3VycmVudFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ldmVudCA9IG1lcmdlTGlmZUN5Y2xlKFxuICAgICAgICB0aGlzLmV2ZW50LFxuICAgICAgICBmaWx0ZXJHbG9iYWxIb29rKHBsdWdpbi5ldmVudClcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMudmFsaWRhdG9yLmdsb2JhbCA9IG1lcmdlSG9vayh0aGlzLnZhbGlkYXRvci5nbG9iYWwsIHtcbiAgICAgIC4uLnBsdWdpbi52YWxpZGF0b3IuZ2xvYmFsXG4gICAgfSk7XG4gICAgdGhpcy52YWxpZGF0b3IubG9jYWwgPSBtZXJnZUhvb2sodGhpcy52YWxpZGF0b3IubG9jYWwsIHtcbiAgICAgIC4uLnBsdWdpbi52YWxpZGF0b3Iuc2NvcGVkXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgbWFjcm8obWFjcm8pIHtcbiAgICBpZiAodHlwZW9mIG1hY3JvID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNvbnN0IGhvb2sgPSB7XG4gICAgICAgIGNoZWNrc3VtOiBjaGVja3N1bShcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLmNvbmZpZy5uYW1lLFxuICAgICAgICAgICAgc2VlZDogdGhpcy5jb25maWcuc2VlZCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IG1hY3JvLnRvU3RyaW5nKClcbiAgICAgICAgICB9KVxuICAgICAgICApLFxuICAgICAgICBmbjogbWFjcm9cbiAgICAgIH07XG4gICAgICB0aGlzLmV4dGVuZGVyLm1hY3Jvcy5wdXNoKGhvb2spO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1hY3JvID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmtleXMobWFjcm8pKVxuICAgICAgICBpZiAodHlwZW9mIG1hY3JvW25hbWVdID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgY29uc3QgYWN0dWFsVmFsdWUgPSB7IC4uLm1hY3JvW25hbWVdIH07XG4gICAgICAgICAgbWFjcm9bbmFtZV0gPSAodikgPT4ge1xuICAgICAgICAgICAgaWYgKHYgPT09IHRydWUpIHJldHVybiBhY3R1YWxWYWx1ZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICBjb25zdCBob29rID0ge1xuICAgICAgICBjaGVja3N1bTogY2hlY2tzdW0oXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgbmFtZTogdGhpcy5jb25maWcubmFtZSxcbiAgICAgICAgICAgIHNlZWQ6IHRoaXMuY29uZmlnLnNlZWQsXG4gICAgICAgICAgICBjb250ZW50OiBPYmplY3QuZW50cmllcyhtYWNybykubWFwKChbaywgdl0pID0+IGAke2t9KyR7dn1gKS5qb2luKFwiLFwiKVxuICAgICAgICAgIH0pXG4gICAgICAgICksXG4gICAgICAgIGZuOiAoKSA9PiBtYWNyb1xuICAgICAgfTtcbiAgICAgIHRoaXMuZXh0ZW5kZXIubWFjcm9zLnB1c2goaG9vayk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG1vdW50KHBhdGgsIGhhbmRsZSkge1xuICAgIGlmIChwYXRoIGluc3RhbmNlb2YgRWx5c2lhIHx8IHR5cGVvZiBwYXRoID09PSBcImZ1bmN0aW9uXCIgfHwgcGF0aC5sZW5ndGggPT09IDAgfHwgcGF0aCA9PT0gXCIvXCIpIHtcbiAgICAgIGNvbnN0IHJ1biA9IHR5cGVvZiBwYXRoID09PSBcImZ1bmN0aW9uXCIgPyBwYXRoIDogcGF0aCBpbnN0YW5jZW9mIEVseXNpYSA/IHBhdGguY29tcGlsZSgpLmZldGNoIDogaGFuZGxlIGluc3RhbmNlb2YgRWx5c2lhID8gaGFuZGxlLmNvbXBpbGUoKS5mZXRjaCA6IGhhbmRsZTtcbiAgICAgIGNvbnN0IGhhbmRsZXIyID0gKHsgcmVxdWVzdCwgcGF0aDogcGF0aDIgfSkgPT4gcnVuKFxuICAgICAgICBuZXcgUmVxdWVzdChyZXBsYWNlVXJsUGF0aChyZXF1ZXN0LnVybCwgcGF0aDIpLCB7XG4gICAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICBoZWFkZXJzOiByZXF1ZXN0LmhlYWRlcnMsXG4gICAgICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbCxcbiAgICAgICAgICBjcmVkZW50aWFsczogcmVxdWVzdC5jcmVkZW50aWFscyxcbiAgICAgICAgICByZWZlcnJlclBvbGljeTogcmVxdWVzdC5yZWZlcnJlclBvbGljeSxcbiAgICAgICAgICBkdXBsZXg6IHJlcXVlc3QuZHVwbGV4LFxuICAgICAgICAgIHJlZGlyZWN0OiByZXF1ZXN0LnJlZGlyZWN0LFxuICAgICAgICAgIG1vZGU6IHJlcXVlc3QubW9kZSxcbiAgICAgICAgICBrZWVwYWxpdmU6IHJlcXVlc3Qua2VlcGFsaXZlLFxuICAgICAgICAgIGludGVncml0eTogcmVxdWVzdC5pbnRlZ3JpdHksXG4gICAgICAgICAgYm9keTogcmVxdWVzdC5ib2R5XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgdGhpcy5hbGwoXCIvKlwiLCBoYW5kbGVyMiwge1xuICAgICAgICBwYXJzZTogXCJub25lXCJcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICghaGFuZGxlKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBsZW5ndGggPSBwYXRoLmxlbmd0aCAtIChwYXRoLmVuZHNXaXRoKFwiKlwiKSA/IDEgOiAwKTtcbiAgICBpZiAoaGFuZGxlIGluc3RhbmNlb2YgRWx5c2lhKSBoYW5kbGUgPSBoYW5kbGUuY29tcGlsZSgpLmZldGNoO1xuICAgIGNvbnN0IGhhbmRsZXIgPSAoeyByZXF1ZXN0LCBwYXRoOiBwYXRoMiB9KSA9PiBoYW5kbGUoXG4gICAgICBuZXcgUmVxdWVzdChcbiAgICAgICAgcmVwbGFjZVVybFBhdGgocmVxdWVzdC51cmwsIHBhdGgyLnNsaWNlKGxlbmd0aCkgfHwgXCIvXCIpLFxuICAgICAgICB7XG4gICAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICBoZWFkZXJzOiByZXF1ZXN0LmhlYWRlcnMsXG4gICAgICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbCxcbiAgICAgICAgICBjcmVkZW50aWFsczogcmVxdWVzdC5jcmVkZW50aWFscyxcbiAgICAgICAgICByZWZlcnJlclBvbGljeTogcmVxdWVzdC5yZWZlcnJlclBvbGljeSxcbiAgICAgICAgICBkdXBsZXg6IHJlcXVlc3QuZHVwbGV4LFxuICAgICAgICAgIHJlZGlyZWN0OiByZXF1ZXN0LnJlZGlyZWN0LFxuICAgICAgICAgIG1vZGU6IHJlcXVlc3QubW9kZSxcbiAgICAgICAgICBrZWVwYWxpdmU6IHJlcXVlc3Qua2VlcGFsaXZlLFxuICAgICAgICAgIGludGVncml0eTogcmVxdWVzdC5pbnRlZ3JpdHksXG4gICAgICAgICAgYm9keTogcmVxdWVzdC5ib2R5XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuICAgIHRoaXMuYWxsKHBhdGgsIGhhbmRsZXIsIHtcbiAgICAgIHBhcnNlOiBcIm5vbmVcIlxuICAgIH0pO1xuICAgIHRoaXMuYWxsKHBhdGggKyAocGF0aC5lbmRzV2l0aChcIi9cIikgPyBcIipcIiA6IFwiLypcIiksIGhhbmRsZXIsIHtcbiAgICAgIHBhcnNlOiBcIm5vbmVcIlxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgZ2V0XG4gICAqIFJlZ2lzdGVyIGhhbmRsZXIgZm9yIHBhdGggd2l0aCBtZXRob2QgW0dFVF1cbiAgICpcbiAgICogLS0tXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogaW1wb3J0IHsgRWx5c2lhLCB0IH0gZnJvbSAnZWx5c2lhJ1xuICAgKlxuICAgKiBuZXcgRWx5c2lhKClcbiAgICogICAgIC5nZXQoJy8nLCAoKSA9PiAnaGknKVxuICAgKiAgICAgLmdldCgnL3dpdGgtaG9vaycsICgpID0+ICdoaScsIHtcbiAgICogICAgICAgICByZXNwb25zZTogdC5TdHJpbmcoKVxuICAgKiAgICAgfSlcbiAgICogYGBgXG4gICAqL1xuICBnZXQocGF0aCwgaGFuZGxlciwgaG9vaykge1xuICAgIHRoaXMuYWRkKFwiR0VUXCIsIHBhdGgsIGhhbmRsZXIsIGhvb2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgcG9zdFxuICAgKiBSZWdpc3RlciBoYW5kbGVyIGZvciBwYXRoIHdpdGggbWV0aG9kIFtQT1NUXVxuICAgKlxuICAgKiAtLS1cbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBpbXBvcnQgeyBFbHlzaWEsIHQgfSBmcm9tICdlbHlzaWEnXG4gICAqXG4gICAqIG5ldyBFbHlzaWEoKVxuICAgKiAgICAgLnBvc3QoJy8nLCAoKSA9PiAnaGknKVxuICAgKiAgICAgLnBvc3QoJy93aXRoLWhvb2snLCAoKSA9PiAnaGknLCB7XG4gICAqICAgICAgICAgcmVzcG9uc2U6IHQuU3RyaW5nKClcbiAgICogICAgIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgcG9zdChwYXRoLCBoYW5kbGVyLCBob29rKSB7XG4gICAgdGhpcy5hZGQoXCJQT1NUXCIsIHBhdGgsIGhhbmRsZXIsIGhvb2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgcHV0XG4gICAqIFJlZ2lzdGVyIGhhbmRsZXIgZm9yIHBhdGggd2l0aCBtZXRob2QgW1BVVF1cbiAgICpcbiAgICogLS0tXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogaW1wb3J0IHsgRWx5c2lhLCB0IH0gZnJvbSAnZWx5c2lhJ1xuICAgKlxuICAgKiBuZXcgRWx5c2lhKClcbiAgICogICAgIC5wdXQoJy8nLCAoKSA9PiAnaGknKVxuICAgKiAgICAgLnB1dCgnL3dpdGgtaG9vaycsICgpID0+ICdoaScsIHtcbiAgICogICAgICAgICByZXNwb25zZTogdC5TdHJpbmcoKVxuICAgKiAgICAgfSlcbiAgICogYGBgXG4gICAqL1xuICBwdXQocGF0aCwgaGFuZGxlciwgaG9vaykge1xuICAgIHRoaXMuYWRkKFwiUFVUXCIsIHBhdGgsIGhhbmRsZXIsIGhvb2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgcGF0Y2hcbiAgICogUmVnaXN0ZXIgaGFuZGxlciBmb3IgcGF0aCB3aXRoIG1ldGhvZCBbUEFUQ0hdXG4gICAqXG4gICAqIC0tLVxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGltcG9ydCB7IEVseXNpYSwgdCB9IGZyb20gJ2VseXNpYSdcbiAgICpcbiAgICogbmV3IEVseXNpYSgpXG4gICAqICAgICAucGF0Y2goJy8nLCAoKSA9PiAnaGknKVxuICAgKiAgICAgLnBhdGNoKCcvd2l0aC1ob29rJywgKCkgPT4gJ2hpJywge1xuICAgKiAgICAgICAgIHJlc3BvbnNlOiB0LlN0cmluZygpXG4gICAqICAgICB9KVxuICAgKiBgYGBcbiAgICovXG4gIHBhdGNoKHBhdGgsIGhhbmRsZXIsIGhvb2spIHtcbiAgICB0aGlzLmFkZChcIlBBVENIXCIsIHBhdGgsIGhhbmRsZXIsIGhvb2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgZGVsZXRlXG4gICAqIFJlZ2lzdGVyIGhhbmRsZXIgZm9yIHBhdGggd2l0aCBtZXRob2QgW0RFTEVURV1cbiAgICpcbiAgICogLS0tXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogaW1wb3J0IHsgRWx5c2lhLCB0IH0gZnJvbSAnZWx5c2lhJ1xuICAgKlxuICAgKiBuZXcgRWx5c2lhKClcbiAgICogICAgIC5kZWxldGUoJy8nLCAoKSA9PiAnaGknKVxuICAgKiAgICAgLmRlbGV0ZSgnL3dpdGgtaG9vaycsICgpID0+ICdoaScsIHtcbiAgICogICAgICAgICByZXNwb25zZTogdC5TdHJpbmcoKVxuICAgKiAgICAgfSlcbiAgICogYGBgXG4gICAqL1xuICBkZWxldGUocGF0aCwgaGFuZGxlciwgaG9vaykge1xuICAgIHRoaXMuYWRkKFwiREVMRVRFXCIsIHBhdGgsIGhhbmRsZXIsIGhvb2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgb3B0aW9uc1xuICAgKiBSZWdpc3RlciBoYW5kbGVyIGZvciBwYXRoIHdpdGggbWV0aG9kIFtQT1NUXVxuICAgKlxuICAgKiAtLS1cbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBpbXBvcnQgeyBFbHlzaWEsIHQgfSBmcm9tICdlbHlzaWEnXG4gICAqXG4gICAqIG5ldyBFbHlzaWEoKVxuICAgKiAgICAgLm9wdGlvbnMoJy8nLCAoKSA9PiAnaGknKVxuICAgKiAgICAgLm9wdGlvbnMoJy93aXRoLWhvb2snLCAoKSA9PiAnaGknLCB7XG4gICAqICAgICAgICAgcmVzcG9uc2U6IHQuU3RyaW5nKClcbiAgICogICAgIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgb3B0aW9ucyhwYXRoLCBoYW5kbGVyLCBob29rKSB7XG4gICAgdGhpcy5hZGQoXCJPUFRJT05TXCIsIHBhdGgsIGhhbmRsZXIsIGhvb2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgYWxsXG4gICAqIFJlZ2lzdGVyIGhhbmRsZXIgZm9yIHBhdGggd2l0aCBtZXRob2QgW0FMTF1cbiAgICpcbiAgICogLS0tXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogaW1wb3J0IHsgRWx5c2lhLCB0IH0gZnJvbSAnZWx5c2lhJ1xuICAgKlxuICAgKiBuZXcgRWx5c2lhKClcbiAgICogICAgIC5hbGwoJy8nLCAoKSA9PiAnaGknKVxuICAgKiAgICAgLmFsbCgnL3dpdGgtaG9vaycsICgpID0+ICdoaScsIHtcbiAgICogICAgICAgICByZXNwb25zZTogdC5TdHJpbmcoKVxuICAgKiAgICAgfSlcbiAgICogYGBgXG4gICAqL1xuICBhbGwocGF0aCwgaGFuZGxlciwgaG9vaykge1xuICAgIHRoaXMuYWRkKFwiQUxMXCIsIHBhdGgsIGhhbmRsZXIsIGhvb2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgaGVhZFxuICAgKiBSZWdpc3RlciBoYW5kbGVyIGZvciBwYXRoIHdpdGggbWV0aG9kIFtIRUFEXVxuICAgKlxuICAgKiAtLS1cbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBpbXBvcnQgeyBFbHlzaWEsIHQgfSBmcm9tICdlbHlzaWEnXG4gICAqXG4gICAqIG5ldyBFbHlzaWEoKVxuICAgKiAgICAgLmhlYWQoJy8nLCAoKSA9PiAnaGknKVxuICAgKiAgICAgLmhlYWQoJy93aXRoLWhvb2snLCAoKSA9PiAnaGknLCB7XG4gICAqICAgICAgICAgcmVzcG9uc2U6IHQuU3RyaW5nKClcbiAgICogICAgIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgaGVhZChwYXRoLCBoYW5kbGVyLCBob29rKSB7XG4gICAgdGhpcy5hZGQoXCJIRUFEXCIsIHBhdGgsIGhhbmRsZXIsIGhvb2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgY29ubmVjdFxuICAgKiBSZWdpc3RlciBoYW5kbGVyIGZvciBwYXRoIHdpdGggbWV0aG9kIFtDT05ORUNUXVxuICAgKlxuICAgKiAtLS1cbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBpbXBvcnQgeyBFbHlzaWEsIHQgfSBmcm9tICdlbHlzaWEnXG4gICAqXG4gICAqIG5ldyBFbHlzaWEoKVxuICAgKiAgICAgLmNvbm5lY3QoJy8nLCAoKSA9PiAnaGknKVxuICAgKiAgICAgLmNvbm5lY3QoJy93aXRoLWhvb2snLCAoKSA9PiAnaGknLCB7XG4gICAqICAgICAgICAgcmVzcG9uc2U6IHQuU3RyaW5nKClcbiAgICogICAgIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgY29ubmVjdChwYXRoLCBoYW5kbGVyLCBob29rKSB7XG4gICAgdGhpcy5hZGQoXCJDT05ORUNUXCIsIHBhdGgsIGhhbmRsZXIsIGhvb2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgcm91dGVcbiAgICogUmVnaXN0ZXIgaGFuZGxlciBmb3IgcGF0aCB3aXRoIG1ldGhvZCBbUk9VVEVdXG4gICAqXG4gICAqIC0tLVxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGltcG9ydCB7IEVseXNpYSwgdCB9IGZyb20gJ2VseXNpYSdcbiAgICpcbiAgICogbmV3IEVseXNpYSgpXG4gICAqICAgICAucm91dGUoJy8nLCAoKSA9PiAnaGknKVxuICAgKiAgICAgLnJvdXRlKCcvd2l0aC1ob29rJywgKCkgPT4gJ2hpJywge1xuICAgKiAgICAgICAgIHJlc3BvbnNlOiB0LlN0cmluZygpXG4gICAqICAgICB9KVxuICAgKiBgYGBcbiAgICovXG4gIHJvdXRlKG1ldGhvZCwgcGF0aCwgaGFuZGxlciwgaG9vaykge1xuICAgIHRoaXMuYWRkKG1ldGhvZC50b1VwcGVyQ2FzZSgpLCBwYXRoLCBoYW5kbGVyLCBob29rLCBob29rPy5jb25maWcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgd3NcbiAgICogUmVnaXN0ZXIgaGFuZGxlciBmb3IgcGF0aCB3aXRoIG1ldGhvZCBbd3NdXG4gICAqXG4gICAqIC0tLVxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGltcG9ydCB7IEVseXNpYSwgdCB9IGZyb20gJ2VseXNpYSdcbiAgICpcbiAgICogbmV3IEVseXNpYSgpXG4gICAqICAgICAud3MoJy8nLCB7XG4gICAqICAgICAgICAgbWVzc2FnZSh3cywgbWVzc2FnZSkge1xuICAgKiAgICAgICAgICAgICB3cy5zZW5kKG1lc3NhZ2UpXG4gICAqICAgICAgICAgfVxuICAgKiAgICAgfSlcbiAgICogYGBgXG4gICAqL1xuICB3cyhwYXRoLCBvcHRpb25zKSB7XG4gICAgaWYgKHRoaXNbXCJ+YWRhcHRlclwiXS53cykgdGhpc1tcIn5hZGFwdGVyXCJdLndzKHRoaXMsIHBhdGgsIG9wdGlvbnMpO1xuICAgIGVsc2UgY29uc29sZS53YXJuKGBDdXJyZW50IGFkYXB0ZXIgZG9lc24ndCBzdXBwb3J0IFdlYlNvY2tldGApO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiAjIyMgc3RhdGVcbiAgICogQXNzaWduIGdsb2JhbCBtdXRhdGFibGUgc3RhdGUgYWNjZXNzaWJsZSBmb3IgYWxsIGhhbmRsZXJcbiAgICpcbiAgICogLS0tXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogbmV3IEVseXNpYSgpXG4gICAqICAgICAuc3RhdGUoJ2NvdW50ZXInLCAwKVxuICAgKiAgICAgLmdldCgnLycsICgoeyBjb3VudGVyIH0pID0+ICsrY291bnRlcilcbiAgICogYGBgXG4gICAqL1xuICBzdGF0ZShvcHRpb25zLCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChuYW1lID09PSB2b2lkIDApIHtcbiAgICAgIHZhbHVlID0gb3B0aW9ucztcbiAgICAgIG9wdGlvbnMgPSB7IGFzOiBcImFwcGVuZFwiIH07XG4gICAgICBuYW1lID0gXCJcIjtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YWx1ZSA9IG5hbWU7XG4gICAgICAgIG5hbWUgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0geyBhczogXCJhcHBlbmRcIiB9O1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICB2YWx1ZSA9IG5hbWU7XG4gICAgICAgIG5hbWUgPSBcIlwiO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB7IGFzIH0gPSBvcHRpb25zO1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikgcmV0dXJuIHRoaXM7XG4gICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICBpZiAobmFtZSBpbiB0aGlzLnNpbmdsZXRvbi5zdG9yZSlcbiAgICAgICAgICAgIHRoaXMuc2luZ2xldG9uLnN0b3JlW25hbWVdID0gbWVyZ2VEZWVwKFxuICAgICAgICAgICAgICB0aGlzLnNpbmdsZXRvbi5zdG9yZVtuYW1lXSxcbiAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvdmVycmlkZTogYXMgPT09IFwib3ZlcnJpZGVcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIGVsc2UgdGhpcy5zaW5nbGV0b24uc3RvcmVbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiB0aGlzO1xuICAgICAgICB0aGlzLnNpbmdsZXRvbi5zdG9yZSA9IG1lcmdlRGVlcCh0aGlzLnNpbmdsZXRvbi5zdG9yZSwgdmFsdWUsIHtcbiAgICAgICAgICBvdmVycmlkZTogYXMgPT09IFwib3ZlcnJpZGVcIlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICBpZiAoYXMgPT09IFwib3ZlcnJpZGVcIiB8fCAhKG5hbWUgaW4gdGhpcy5zaW5nbGV0b24uc3RvcmUpKVxuICAgICAgICAgICAgdGhpcy5zaW5nbGV0b24uc3RvcmVbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHRoaXMuc2luZ2xldG9uLnN0b3JlID0gdmFsdWUodGhpcy5zaW5nbGV0b24uc3RvcmUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChhcyA9PT0gXCJvdmVycmlkZVwiIHx8ICEobmFtZSBpbiB0aGlzLnNpbmdsZXRvbi5zdG9yZSkpXG4gICAgICAgICAgdGhpcy5zaW5nbGV0b24uc3RvcmVbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiAjIyMgZGVjb3JhdGVcbiAgICogRGVmaW5lIGN1c3RvbSBtZXRob2QgdG8gYENvbnRleHRgIGFjY2Vzc2libGUgZm9yIGFsbCBoYW5kbGVyXG4gICAqXG4gICAqIC0tLVxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIG5ldyBFbHlzaWEoKVxuICAgKiAgICAgLmRlY29yYXRlKCdnZXREYXRlJywgKCkgPT4gRGF0ZS5ub3coKSlcbiAgICogICAgIC5nZXQoJy8nLCAoKHsgZ2V0RGF0ZSB9KSA9PiBnZXREYXRlKCkpXG4gICAqIGBgYFxuICAgKi9cbiAgZGVjb3JhdGUob3B0aW9ucywgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgICB2YWx1ZSA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0geyBhczogXCJhcHBlbmRcIiB9O1xuICAgICAgbmFtZSA9IFwiXCI7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFsdWUgPSBuYW1lO1xuICAgICAgICBuYW1lID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHsgYXM6IFwiYXBwZW5kXCIgfTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdmFsdWUgPSBuYW1lO1xuICAgICAgICBuYW1lID0gXCJcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgeyBhcyB9ID0gb3B0aW9ucztcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHJldHVybiB0aGlzO1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgaWYgKG5hbWUgaW4gdGhpcy5zaW5nbGV0b24uZGVjb3JhdG9yKVxuICAgICAgICAgICAgdGhpcy5zaW5nbGV0b24uZGVjb3JhdG9yW25hbWVdID0gbWVyZ2VEZWVwKFxuICAgICAgICAgICAgICB0aGlzLnNpbmdsZXRvbi5kZWNvcmF0b3JbbmFtZV0sXG4gICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb3ZlcnJpZGU6IGFzID09PSBcIm92ZXJyaWRlXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICBlbHNlIHRoaXMuc2luZ2xldG9uLmRlY29yYXRvcltuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIHRoaXM7XG4gICAgICAgIHRoaXMuc2luZ2xldG9uLmRlY29yYXRvciA9IG1lcmdlRGVlcChcbiAgICAgICAgICB0aGlzLnNpbmdsZXRvbi5kZWNvcmF0b3IsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAge1xuICAgICAgICAgICAgb3ZlcnJpZGU6IGFzID09PSBcIm92ZXJyaWRlXCJcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgaWYgKGFzID09PSBcIm92ZXJyaWRlXCIgfHwgIShuYW1lIGluIHRoaXMuc2luZ2xldG9uLmRlY29yYXRvcikpXG4gICAgICAgICAgICB0aGlzLnNpbmdsZXRvbi5kZWNvcmF0b3JbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgdGhpcy5zaW5nbGV0b24uZGVjb3JhdG9yID0gdmFsdWUodGhpcy5zaW5nbGV0b24uZGVjb3JhdG9yKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoYXMgPT09IFwib3ZlcnJpZGVcIiB8fCAhKG5hbWUgaW4gdGhpcy5zaW5nbGV0b24uZGVjb3JhdG9yKSlcbiAgICAgICAgICB0aGlzLnNpbmdsZXRvbi5kZWNvcmF0b3JbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG4gIGRlcml2ZShvcHRpb25zT3JUcmFuc2Zvcm0sIHRyYW5zZm9ybSkge1xuICAgIGlmICghdHJhbnNmb3JtKSB7XG4gICAgICB0cmFuc2Zvcm0gPSBvcHRpb25zT3JUcmFuc2Zvcm07XG4gICAgICBvcHRpb25zT3JUcmFuc2Zvcm0gPSB7IGFzOiBcImxvY2FsXCIgfTtcbiAgICB9XG4gICAgY29uc3QgaG9vayA9IHtcbiAgICAgIHN1YlR5cGU6IFwiZGVyaXZlXCIsXG4gICAgICBmbjogdHJhbnNmb3JtXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5vblRyYW5zZm9ybShvcHRpb25zT3JUcmFuc2Zvcm0sIGhvb2spO1xuICB9XG4gIG1vZGVsKG5hbWUsIG1vZGVsKSB7XG4gICAgY29uc3QgY29lcmNlID0gKHNjaGVtYSkgPT4gcmVwbGFjZVNjaGVtYVR5cGUoc2NoZW1hLCBbXG4gICAgICB7XG4gICAgICAgIGZyb206IHQuTnVtYmVyKCksXG4gICAgICAgIHRvOiAob3B0aW9ucykgPT4gdC5OdW1lcmljKG9wdGlvbnMpLFxuICAgICAgICB1bnRpbE9iamVjdEZvdW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBmcm9tOiB0LkJvb2xlYW4oKSxcbiAgICAgICAgdG86IChvcHRpb25zKSA9PiB0LkJvb2xlYW5TdHJpbmcob3B0aW9ucyksXG4gICAgICAgIHVudGlsT2JqZWN0Rm91bmQ6IHRydWVcbiAgICAgIH1cbiAgICBdKTtcbiAgICBzd2l0Y2ggKHR5cGVvZiBuYW1lKSB7XG4gICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgIGNvbnN0IHBhcnNlZFNjaGVtYXMgPSB7fTtcbiAgICAgICAgY29uc3Qga3ZzID0gT2JqZWN0LmVudHJpZXMobmFtZSk7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGt2cykge1xuICAgICAgICAgIGlmIChrZXkgaW4gdGhpcy5kZWZpbml0aW9ucy50eXBlKSBjb250aW51ZTtcbiAgICAgICAgICBwYXJzZWRTY2hlbWFzW2tleV0gPSB0aGlzLmRlZmluaXRpb25zLnR5cGVba2V5XSA9IGNvZXJjZShcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBwYXJzZWRTY2hlbWFzW2tleV0uJGlkID8/PSBgIy9jb21wb25lbnRzL3NjaGVtYXMvJHtrZXl9YDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlZmluaXRpb25zLnR5cGVib3ggPSB0Lk1vZHVsZSh7XG4gICAgICAgICAgLi4udGhpcy5kZWZpbml0aW9ucy50eXBlYm94W1wiJGRlZnNcIl0sXG4gICAgICAgICAgLi4ucGFyc2VkU2NoZW1hc1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY29lcmNlKG5hbWUodGhpcy5kZWZpbml0aW9ucy50eXBlKSk7XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbnMudHlwZSA9IHJlc3VsdDtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9ucy50eXBlYm94ID0gdC5Nb2R1bGUocmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIGlmICghbW9kZWwpIGJyZWFrO1xuICAgICAgICBjb25zdCBuZXdNb2RlbCA9IHtcbiAgICAgICAgICAuLi5tb2RlbCxcbiAgICAgICAgICBpZDogbW9kZWwuJGlkID8/IGAjL2NvbXBvbmVudHMvc2NoZW1hcy8ke25hbWV9YFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRlZmluaXRpb25zLnR5cGVbbmFtZV0gPSBtb2RlbDtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9ucy50eXBlYm94ID0gdC5Nb2R1bGUoe1xuICAgICAgICAgIC4uLnRoaXMuZGVmaW5pdGlvbnMudHlwZWJveFtcIiRkZWZzXCJdLFxuICAgICAgICAgIC4uLm5ld01vZGVsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgO1xuICAgIHRoaXMuZGVmaW5pdGlvbnMudHlwZVtuYW1lXSA9IG1vZGVsO1xuICAgIHRoaXMuZGVmaW5pdGlvbnMudHlwZWJveCA9IHQuTW9kdWxlKHtcbiAgICAgIC4uLnRoaXMuZGVmaW5pdGlvbnMudHlwZWJveFtcIiRkZWZzXCJdLFxuICAgICAgW25hbWVdOiBtb2RlbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG1hcERlcml2ZShvcHRpb25zT3JEZXJpdmUsIG1hcHBlcikge1xuICAgIGlmICghbWFwcGVyKSB7XG4gICAgICBtYXBwZXIgPSBvcHRpb25zT3JEZXJpdmU7XG4gICAgICBvcHRpb25zT3JEZXJpdmUgPSB7IGFzOiBcImxvY2FsXCIgfTtcbiAgICB9XG4gICAgY29uc3QgaG9vayA9IHtcbiAgICAgIHN1YlR5cGU6IFwibWFwRGVyaXZlXCIsXG4gICAgICBmbjogbWFwcGVyXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5vblRyYW5zZm9ybShvcHRpb25zT3JEZXJpdmUsIGhvb2spO1xuICB9XG4gIGFmZml4KGJhc2UsIHR5cGUsIHdvcmQpIHtcbiAgICBpZiAod29yZCA9PT0gXCJcIikgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgZGVsaW1pZXRlciA9IFtcIl9cIiwgXCItXCIsIFwiIFwiXTtcbiAgICBjb25zdCBjYXBpdGFsaXplID0gKHdvcmQyKSA9PiB3b3JkMlswXS50b1VwcGVyQ2FzZSgpICsgd29yZDIuc2xpY2UoMSk7XG4gICAgY29uc3Qgam9pbktleSA9IGJhc2UgPT09IFwicHJlZml4XCIgPyAocHJlZml4LCB3b3JkMikgPT4gZGVsaW1pZXRlci5pbmNsdWRlcyhwcmVmaXguYXQoLTEpID8/IFwiXCIpID8gcHJlZml4ICsgd29yZDIgOiBwcmVmaXggKyBjYXBpdGFsaXplKHdvcmQyKSA6IGRlbGltaWV0ZXIuaW5jbHVkZXMod29yZC5hdCgtMSkgPz8gXCJcIikgPyAoc3VmZml4LCB3b3JkMikgPT4gd29yZDIgKyBzdWZmaXggOiAoc3VmZml4LCB3b3JkMikgPT4gd29yZDIgKyBjYXBpdGFsaXplKHN1ZmZpeCk7XG4gICAgY29uc3QgcmVtYXAgPSAodHlwZTIpID0+IHtcbiAgICAgIGNvbnN0IHN0b3JlID0ge307XG4gICAgICBzd2l0Y2ggKHR5cGUyKSB7XG4gICAgICAgIGNhc2UgXCJkZWNvcmF0b3JcIjpcbiAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnNpbmdsZXRvbi5kZWNvcmF0b3IpIHtcbiAgICAgICAgICAgIHN0b3JlW2pvaW5LZXkod29yZCwga2V5KV0gPSB0aGlzLnNpbmdsZXRvbi5kZWNvcmF0b3Jba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zaW5nbGV0b24uZGVjb3JhdG9yID0gc3RvcmU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzdGF0ZVwiOlxuICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuc2luZ2xldG9uLnN0b3JlKVxuICAgICAgICAgICAgc3RvcmVbam9pbktleSh3b3JkLCBrZXkpXSA9IHRoaXMuc2luZ2xldG9uLnN0b3JlW2tleV07XG4gICAgICAgICAgdGhpcy5zaW5nbGV0b24uc3RvcmUgPSBzdG9yZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm1vZGVsXCI6XG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5kZWZpbml0aW9ucy50eXBlKVxuICAgICAgICAgICAgc3RvcmVbam9pbktleSh3b3JkLCBrZXkpXSA9IHRoaXMuZGVmaW5pdGlvbnMudHlwZVtrZXldO1xuICAgICAgICAgIHRoaXMuZGVmaW5pdGlvbnMudHlwZSA9IHN0b3JlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmRlZmluaXRpb25zLmVycm9yKVxuICAgICAgICAgICAgc3RvcmVbam9pbktleSh3b3JkLCBrZXkpXSA9IHRoaXMuZGVmaW5pdGlvbnMuZXJyb3Jba2V5XTtcbiAgICAgICAgICB0aGlzLmRlZmluaXRpb25zLmVycm9yID0gc3RvcmU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB0eXBlcyA9IEFycmF5LmlzQXJyYXkodHlwZSkgPyB0eXBlIDogW3R5cGVdO1xuICAgIGZvciAoY29uc3QgdHlwZTIgb2YgdHlwZXMuc29tZSgoeCkgPT4geCA9PT0gXCJhbGxcIikgPyBbXCJkZWNvcmF0b3JcIiwgXCJzdGF0ZVwiLCBcIm1vZGVsXCIsIFwiZXJyb3JcIl0gOiB0eXBlcylcbiAgICAgIHJlbWFwKHR5cGUyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBwcmVmaXgodHlwZSwgd29yZCkge1xuICAgIHJldHVybiB0aGlzLmFmZml4KFwicHJlZml4XCIsIHR5cGUsIHdvcmQpO1xuICB9XG4gIHN1ZmZpeCh0eXBlLCB3b3JkKSB7XG4gICAgcmV0dXJuIHRoaXMuYWZmaXgoXCJzdWZmaXhcIiwgdHlwZSwgd29yZCk7XG4gIH1cbiAgY29tcGlsZSgpIHtcbiAgICBpZiAodGhpc1tcIn5hZGFwdGVyXCJdLmlzV2ViU3RhbmRhcmQpIHtcbiAgICAgIHRoaXMuZmV0Y2ggPSB0aGlzLmNvbmZpZy5hb3QgPyBjb21wb3NlR2VuZXJhbEhhbmRsZXIodGhpcykgOiBjcmVhdGVEeW5hbWljSGFuZGxlcih0aGlzKTtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5zZXJ2ZXI/LnJlbG9hZCA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICB0aGlzLnNlcnZlci5yZWxvYWQoe1xuICAgICAgICAgIC4uLnRoaXMuc2VydmVyIHx8IHt9LFxuICAgICAgICAgIGZldGNoOiB0aGlzLmZldGNoXG4gICAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5zZXJ2ZXI/LnJlbG9hZCA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgdGhpcy5zZXJ2ZXIucmVsb2FkKHRoaXMuc2VydmVyIHx8IHt9KTtcbiAgICB0aGlzLl9oYW5kbGUgPSBjb21wb3NlR2VuZXJhbEhhbmRsZXIodGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFdhaXQgdW50aWwgYWxsIGxhenkgbG9hZGVkIG1vZHVsZXMgYWxsIGxvYWQgaXMgZnVsbHlcbiAgICovXG4gIGdldCBtb2R1bGVzKCkge1xuICAgIHJldHVybiB0aGlzLnByb21pc2VkTW9kdWxlcztcbiAgfVxufVxuaW1wb3J0eyB0IGFzIHQyIH1mcm9tXCIuL3R5cGUtc3lzdGVtLm1qc1wiO1xuaW1wb3J0eyBzZXJpYWxpemVDb29raWUsIENvb2tpZSB9ZnJvbVwiLi9jb29raWVzLm1qc1wiO1xuaW1wb3J0e1xuICBFTFlTSUFfVFJBQ0Vcbn1mcm9tXCIuL3RyYWNlLm1qc1wiO1xuaW1wb3J0e1xuICBnZXRTY2hlbWFWYWxpZGF0b3IgYXMgZ2V0U2NoZW1hVmFsaWRhdG9yMixcbiAgbWVyZ2VIb29rIGFzIG1lcmdlSG9vazIsXG4gIG1lcmdlT2JqZWN0QXJyYXksXG4gIGdldFJlc3BvbnNlU2NoZW1hVmFsaWRhdG9yIGFzIGdldFJlc3BvbnNlU2NoZW1hVmFsaWRhdG9yMixcbiAgcmVkaXJlY3QsXG4gIFN0YXR1c01hcCxcbiAgSW52ZXJ0ZWRTdGF0dXNNYXAsXG4gIGZvcm0sXG4gIHJlcGxhY2VTY2hlbWFUeXBlIGFzIHJlcGxhY2VTY2hlbWFUeXBlMixcbiAgcmVwbGFjZVVybFBhdGggYXMgcmVwbGFjZVVybFBhdGgyLFxuICBjaGVja3N1bSBhcyBjaGVja3N1bTIsXG4gIGNsb25lSW5mZXJlbmNlIGFzIGNsb25lSW5mZXJlbmNlMixcbiAgZGVkdXBsaWNhdGVDaGVja3N1bSBhcyBkZWR1cGxpY2F0ZUNoZWNrc3VtMixcbiAgRUxZU0lBX0ZPUk1fREFUQSxcbiAgRUxZU0lBX1JFUVVFU1RfSURcbn1mcm9tXCIuL3V0aWxzLm1qc1wiO1xuaW1wb3J0e1xuICBlcnJvcixcbiAgbWFwVmFsdWVFcnJvcixcbiAgUGFyc2VFcnJvcixcbiAgTm90Rm91bmRFcnJvcixcbiAgVmFsaWRhdGlvbkVycm9yIGFzIFZhbGlkYXRpb25FcnJvcjIsXG4gIEludGVybmFsU2VydmVyRXJyb3IsXG4gIEludmFsaWRDb29raWVTaWduYXR1cmUsXG4gIEVSUk9SX0NPREUgYXMgRVJST1JfQ09ERTJcbn1mcm9tXCIuL2Vycm9yLm1qc1wiO1xuaW1wb3J0eyBlbnYgYXMgZW52MiB9ZnJvbVwiLi91bml2ZXJzYWwvZW52Lm1qc1wiO1xuaW1wb3J0eyBmaWxlLCBFbHlzaWFGaWxlIH1mcm9tXCIuL3VuaXZlcnNhbC9maWxlLm1qc1wiO1xuaW1wb3J0IHsgVHlwZVN5c3RlbVBvbGljeSB9IGZyb20gXCJAc2luY2xhaXIvdHlwZWJveC9zeXN0ZW1cIjtcbmV4cG9ydCB7XG4gIENvb2tpZSxcbiAgRUxZU0lBX0ZPUk1fREFUQSxcbiAgRUxZU0lBX1JFUVVFU1RfSUQsXG4gIEVMWVNJQV9UUkFDRSxcbiAgRVJST1JfQ09ERTIgYXMgRVJST1JfQ09ERSxcbiAgRWx5c2lhLFxuICBFbHlzaWFGaWxlLFxuICBJbnRlcm5hbFNlcnZlckVycm9yLFxuICBJbnZhbGlkQ29va2llU2lnbmF0dXJlLFxuICBJbnZlcnRlZFN0YXR1c01hcCxcbiAgTm90Rm91bmRFcnJvcixcbiAgUGFyc2VFcnJvcixcbiAgU3RhdHVzTWFwLFxuICBUeXBlU3lzdGVtUG9saWN5LFxuICBWYWxpZGF0aW9uRXJyb3IyIGFzIFZhbGlkYXRpb25FcnJvcixcbiAgY2hlY2tzdW0yIGFzIGNoZWNrc3VtLFxuICBjbG9uZUluZmVyZW5jZTIgYXMgY2xvbmVJbmZlcmVuY2UsXG4gIGRlZHVwbGljYXRlQ2hlY2tzdW0yIGFzIGRlZHVwbGljYXRlQ2hlY2tzdW0sXG4gIEVseXNpYSBhcyBkZWZhdWx0LFxuICBlbnYyIGFzIGVudixcbiAgZXJyb3IsXG4gIGZpbGUsXG4gIGZvcm0sXG4gIGdldFJlc3BvbnNlU2NoZW1hVmFsaWRhdG9yMiBhcyBnZXRSZXNwb25zZVNjaGVtYVZhbGlkYXRvcixcbiAgZ2V0U2NoZW1hVmFsaWRhdG9yMiBhcyBnZXRTY2hlbWFWYWxpZGF0b3IsXG4gIG1hcFZhbHVlRXJyb3IsXG4gIG1lcmdlSG9vazIgYXMgbWVyZ2VIb29rLFxuICBtZXJnZU9iamVjdEFycmF5LFxuICByZWRpcmVjdCxcbiAgcmVwbGFjZVNjaGVtYVR5cGUyIGFzIHJlcGxhY2VTY2hlbWFUeXBlLFxuICByZXBsYWNlVXJsUGF0aDIgYXMgcmVwbGFjZVVybFBhdGgsXG4gIHNlcmlhbGl6ZUNvb2tpZSxcbiAgdDIgYXMgdFxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/sucrose.mjs":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/sucrose.mjs ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bracketPairRange: () => (/* binding */ bracketPairRange),\n/* harmony export */   bracketPairRangeReverse: () => (/* binding */ bracketPairRangeReverse),\n/* harmony export */   extractMainParameter: () => (/* binding */ extractMainParameter),\n/* harmony export */   findAlias: () => (/* binding */ findAlias),\n/* harmony export */   findParameterReference: () => (/* binding */ findParameterReference),\n/* harmony export */   hasReturn: () => (/* binding */ hasReturn),\n/* harmony export */   inferBodyReference: () => (/* binding */ inferBodyReference),\n/* harmony export */   isContextPassToFunction: () => (/* binding */ isContextPassToFunction),\n/* harmony export */   removeColonAlias: () => (/* binding */ removeColonAlias),\n/* harmony export */   removeDefaultParameter: () => (/* binding */ removeDefaultParameter),\n/* harmony export */   retrieveRootParamters: () => (/* binding */ retrieveRootParamters),\n/* harmony export */   separateFunction: () => (/* binding */ separateFunction),\n/* harmony export */   sucrose: () => (/* binding */ sucrose)\n/* harmony export */ });\nconst hasReturn = (fn) => {\n  const fnLiteral = typeof fn === \"object\" ? fn.fn.toString() : typeof fn === \"string\" ? fn.toString() : fn;\n  const parenthesisEnd = fnLiteral.indexOf(\")\");\n  if (fnLiteral.charCodeAt(parenthesisEnd + 2) === 61 && fnLiteral.charCodeAt(parenthesisEnd + 5) !== 123) {\n    return true;\n  }\n  return fnLiteral.includes(\"return\");\n};\nconst separateFunction = (code) => {\n  if (code.startsWith(\"async\")) code = code.slice(5);\n  code = code.trimStart();\n  let index = -1;\n  if (code.charCodeAt(0) === 40) {\n    index = code.indexOf(\"=>\", code.indexOf(\")\"));\n    if (index !== -1) {\n      let bracketEndIndex = index;\n      while (bracketEndIndex > 0)\n        if (code.charCodeAt(--bracketEndIndex) === 41) break;\n      let body = code.slice(index + 2);\n      if (body.charCodeAt(0) === 32) body = body.trimStart();\n      return [\n        code.slice(1, bracketEndIndex),\n        body,\n        {\n          isArrowReturn: body.charCodeAt(0) !== 123\n        }\n      ];\n    }\n  }\n  if (/^(\\w+)=>/g.test(code)) {\n    index = code.indexOf(\"=>\");\n    if (index !== -1) {\n      let body = code.slice(index + 2);\n      if (body.charCodeAt(0) === 32) body = body.trimStart();\n      return [\n        code.slice(0, index),\n        body,\n        {\n          isArrowReturn: body.charCodeAt(0) !== 123\n        }\n      ];\n    }\n  }\n  if (code.startsWith(\"function\")) {\n    index = code.indexOf(\"(\");\n    const end = code.indexOf(\")\");\n    return [\n      code.slice(index + 1, end),\n      code.slice(end + 2),\n      {\n        isArrowReturn: false\n      }\n    ];\n  }\n  const start = code.indexOf(\"(\");\n  if (start !== -1) {\n    const sep = code.indexOf(\"\\n\", 2);\n    const parameter = code.slice(0, sep);\n    const end = parameter.lastIndexOf(\")\") + 1;\n    const body = code.slice(sep + 1);\n    return [\n      parameter.slice(start, end),\n      \"{\" + body,\n      {\n        isArrowReturn: false\n      }\n    ];\n  }\n  const x = code.split(\"\\n\", 2);\n  return [x[0], x[1], { isArrowReturn: false }];\n};\nconst bracketPairRange = (parameter) => {\n  const start = parameter.indexOf(\"{\");\n  if (start === -1) return [-1, 0];\n  let end = start + 1;\n  let deep = 1;\n  for (; end < parameter.length; end++) {\n    const char = parameter.charCodeAt(end);\n    if (char === 123) deep++;\n    else if (char === 125) deep--;\n    if (deep === 0) break;\n  }\n  if (deep !== 0) return [0, parameter.length];\n  return [start, end + 1];\n};\nconst bracketPairRangeReverse = (parameter) => {\n  const end = parameter.lastIndexOf(\"}\");\n  if (end === -1) return [-1, 0];\n  let start = end - 1;\n  let deep = 1;\n  for (; start >= 0; start--) {\n    const char = parameter.charCodeAt(start);\n    if (char === 125) deep++;\n    else if (char === 123) deep--;\n    if (deep === 0) break;\n  }\n  if (deep !== 0) return [-1, 0];\n  return [start, end + 1];\n};\nconst removeColonAlias = (parameter) => {\n  while (true) {\n    const start = parameter.indexOf(\":\");\n    if (start === -1) break;\n    let end = parameter.indexOf(\",\", start);\n    if (end === -1) end = parameter.indexOf(\"}\", start) - 1;\n    if (end === -2) end = parameter.length;\n    parameter = parameter.slice(0, start) + parameter.slice(end);\n  }\n  return parameter;\n};\nconst retrieveRootParamters = (parameter) => {\n  let hasParenthesis = false;\n  if (parameter.charCodeAt(0) === 40) parameter = parameter.slice(1, -1);\n  if (parameter.charCodeAt(0) === 123) {\n    hasParenthesis = true;\n    parameter = parameter.slice(1, -1);\n  }\n  parameter = parameter.replace(/( |\\t|\\n)/g, \"\").trim();\n  let parameters = [];\n  while (true) {\n    let [start, end] = bracketPairRange(parameter);\n    if (start === -1) break;\n    parameters.push(parameter.slice(0, start - 1));\n    if (parameter.charCodeAt(end) === 44) end++;\n    parameter = parameter.slice(end);\n  }\n  parameter = removeColonAlias(parameter);\n  if (parameter) parameters = parameters.concat(parameter.split(\",\"));\n  const newParameters = [];\n  for (const p of parameters) {\n    if (p.indexOf(\",\") === -1) {\n      newParameters.push(p);\n      continue;\n    }\n    for (const q of p.split(\",\")) newParameters.push(q.trim());\n  }\n  parameters = newParameters;\n  return {\n    hasParenthesis,\n    parameters\n  };\n};\nconst findParameterReference = (parameter, inference) => {\n  const { parameters, hasParenthesis } = retrieveRootParamters(parameter);\n  if (!inference.query && parameters.includes(\"query\")) inference.query = true;\n  if (!inference.headers && parameters.includes(\"headers\"))\n    inference.headers = true;\n  if (!inference.body && parameters.includes(\"body\")) inference.body = true;\n  if (!inference.cookie && parameters.includes(\"cookie\"))\n    inference.cookie = true;\n  if (!inference.set && parameters.includes(\"set\")) inference.set = true;\n  if (!inference.server && parameters.includes(\"server\"))\n    inference.server = true;\n  if (!inference.request && parameters.includes(\"request\"))\n    inference.request = true;\n  if (!inference.route && parameters.includes(\"route\")) inference.route = true;\n  if (hasParenthesis) return `{ ${parameters.join(\", \")} }`;\n  return parameters.join(\", \");\n};\nconst findEndIndex = (type, content, index) => {\n  const newLineIndex = content.indexOf(type + \"\\n\", index);\n  const newTabIndex = content.indexOf(type + \"\t\", index);\n  const commaIndex = content.indexOf(type + \",\", index);\n  const semicolonIndex = content.indexOf(type + \";\", index);\n  const emptyIndex = content.indexOf(type + \" \", index);\n  return [newLineIndex, newTabIndex, commaIndex, semicolonIndex, emptyIndex].filter((i) => i > 0).sort((a, b) => a - b)[0] || -1;\n};\nconst findEndQueryBracketIndex = (type, content, index) => {\n  const bracketEndIndex = content.indexOf(type + \"]\", index);\n  const singleQuoteIndex = content.indexOf(type + \"'\", index);\n  const doubleQuoteIndex = content.indexOf(type + '\"', index);\n  return [bracketEndIndex, singleQuoteIndex, doubleQuoteIndex].filter((i) => i > 0).sort((a, b) => a - b)[0] || -1;\n};\nconst findAlias = (type, body, depth = 0) => {\n  if (depth > 5) return [];\n  const aliases = [];\n  let content = body;\n  while (true) {\n    let index = findEndIndex(\" = \" + type, content);\n    if (index === -1) index = findEndIndex(\"=\" + type, content);\n    if (index === -1) {\n      let lastIndex = content.indexOf(\" = \" + type);\n      if (lastIndex === -1) lastIndex = content.indexOf(\"=\" + type);\n      if (lastIndex + 3 + type.length !== content.length) break;\n      index = lastIndex;\n    }\n    const part = content.slice(0, index);\n    const lastPart = part.lastIndexOf(\" \");\n    let variable = part.slice(lastPart !== -1 ? lastPart + 1 : -1);\n    if (variable === \"}\") {\n      const [start, end] = bracketPairRangeReverse(part);\n      aliases.push(removeColonAlias(content.slice(start, end)));\n      content = content.slice(index + 3 + type.length);\n      continue;\n    }\n    while (variable.charCodeAt(0) === 44) variable = variable.slice(1);\n    while (variable.charCodeAt(0) === 9) variable = variable.slice(1);\n    if (!variable.includes(\"(\")) aliases.push(variable);\n    content = content.slice(index + 3 + type.length);\n  }\n  for (const alias of aliases) {\n    if (alias.charCodeAt(0) === 123) continue;\n    const deepAlias = findAlias(alias, body);\n    if (deepAlias.length > 0) aliases.push(...deepAlias);\n  }\n  return aliases;\n};\nconst extractMainParameter = (parameter) => {\n  if (!parameter) return;\n  if (parameter.charCodeAt(0) !== 123) return parameter;\n  parameter = parameter.slice(2, -2);\n  const hasComma = parameter.includes(\",\");\n  if (!hasComma) {\n    if (parameter.includes(\"...\"))\n      return parameter.slice(parameter.indexOf(\"...\") + 3);\n    return;\n  }\n  const spreadIndex = parameter.indexOf(\"...\");\n  if (spreadIndex === -1) return;\n  return parameter.slice(spreadIndex + 3).trimEnd();\n};\nconst inferBodyReference = (code, aliases, inference) => {\n  const access = (type, alias) => code.includes(alias + \".\" + type) || code.includes(alias + '[\"' + type + '\"]') || code.includes(alias + \"['\" + type + \"']\");\n  for (const alias of aliases) {\n    if (!alias) continue;\n    if (alias.charCodeAt(0) === 123) {\n      const parameters = retrieveRootParamters(alias).parameters;\n      if (!inference.query && parameters.includes(\"query\"))\n        inference.query = true;\n      if (!inference.headers && parameters.includes(\"headers\"))\n        inference.headers = true;\n      if (!inference.body && parameters.includes(\"body\"))\n        inference.body = true;\n      if (!inference.cookie && parameters.includes(\"cookie\"))\n        inference.cookie = true;\n      if (!inference.set && parameters.includes(\"set\"))\n        inference.set = true;\n      if (!inference.query && parameters.includes(\"server\"))\n        inference.server = true;\n      if (!inference.request && parameters.includes(\"request\"))\n        inference.request = true;\n      if (!inference.route && parameters.includes(\"route\"))\n        inference.route = true;\n      continue;\n    }\n    if (!inference.query && access(\"query\", alias)) inference.query = true;\n    if (code.includes(\"return \" + alias) || code.includes(\"return \" + alias + \".query\"))\n      inference.query = true;\n    if (!inference.headers && access(\"headers\", alias))\n      inference.headers = true;\n    if (!inference.body && access(\"body\", alias)) inference.body = true;\n    if (!inference.cookie && access(\"cookie\", alias))\n      inference.cookie = true;\n    if (!inference.set && access(\"set\", alias)) inference.set = true;\n    if (!inference.server && access(\"server\", alias))\n      inference.server = true;\n    if (inference.query && inference.headers && inference.body && inference.cookie && inference.set && inference.server && inference.server && inference.route)\n      break;\n  }\n  return aliases;\n};\nconst removeDefaultParameter = (parameter) => {\n  while (true) {\n    const index = parameter.indexOf(\"=\");\n    if (index === -1) break;\n    const commaIndex = parameter.indexOf(\",\", index);\n    const bracketIndex = parameter.indexOf(\"}\", index);\n    const end = [commaIndex, bracketIndex].filter((i) => i > 0).sort((a, b) => a - b)[0] || -1;\n    if (end === -1) {\n      parameter = parameter.slice(0, index);\n      break;\n    }\n    parameter = parameter.slice(0, index) + parameter.slice(end);\n  }\n  return parameter.split(\",\").map((i) => i.trim()).join(\", \");\n};\nconst isContextPassToFunction = (context, body, inference) => {\n  try {\n    const captureFunction = new RegExp(`(?:\\\\w)\\\\((?:.*)?${context}`, \"gs\");\n    captureFunction.test(body);\n    const nextChar = body.charCodeAt(captureFunction.lastIndex);\n    if (nextChar === 41 || nextChar === 44) {\n      inference.query = true;\n      inference.headers = true;\n      inference.body = true;\n      inference.cookie = true;\n      inference.set = true;\n      inference.server = true;\n      inference.route = true;\n      inference.request = true;\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.log(\n      \"[Sucrose] warning: unexpected isContextPassToFunction error, you may continue development as usual but please report the following to maintainers:\"\n    );\n    console.log(\"--- body ---\");\n    console.log(body);\n    console.log(\"--- context ---\");\n    console.log(context);\n    return true;\n  }\n};\nconst sucrose = (lifeCycle, inference = {\n  query: false,\n  headers: false,\n  body: false,\n  cookie: false,\n  set: false,\n  server: false,\n  request: false,\n  route: false\n}) => {\n  const events = [];\n  if (lifeCycle.handler && typeof lifeCycle.handler === \"function\")\n    events.push(lifeCycle.handler);\n  if (lifeCycle.request?.length) events.push(...lifeCycle.request);\n  if (lifeCycle.beforeHandle?.length) events.push(...lifeCycle.beforeHandle);\n  if (lifeCycle.parse?.length) events.push(...lifeCycle.parse);\n  if (lifeCycle.error?.length) events.push(...lifeCycle.error);\n  if (lifeCycle.transform?.length) events.push(...lifeCycle.transform);\n  if (lifeCycle.afterHandle?.length) events.push(...lifeCycle.afterHandle);\n  if (lifeCycle.mapResponse?.length) events.push(...lifeCycle.mapResponse);\n  if (lifeCycle.afterResponse?.length) events.push(...lifeCycle.afterResponse);\n  for (const e of events) {\n    if (!e) continue;\n    const event = \"fn\" in e ? e.fn : e;\n    if (typeof event !== \"function\") continue;\n    const [parameter, body, { isArrowReturn }] = separateFunction(\n      event.toString()\n    );\n    const rootParameters = findParameterReference(parameter, inference);\n    const mainParameter = extractMainParameter(rootParameters);\n    if (mainParameter) {\n      const aliases = findAlias(mainParameter, body.slice(1, -1));\n      aliases.splice(0, -1, mainParameter);\n      let code = body;\n      if (code.charCodeAt(0) === 123 && code.charCodeAt(body.length - 1) === 125)\n        code = code.slice(1, -1);\n      if (!isContextPassToFunction(mainParameter, code, inference))\n        inferBodyReference(code, aliases, inference);\n      if (!inference.query && code.includes(\"return \" + mainParameter + \".query\"))\n        inference.query = true;\n    }\n    if (inference.query && inference.headers && inference.body && inference.cookie && inference.set && inference.server && inference.request && inference.route)\n      break;\n  }\n  return inference;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/sucrose.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/trace.mjs":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/trace.mjs ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ELYSIA_TRACE: () => (/* binding */ ELYSIA_TRACE),\n/* harmony export */   createTracer: () => (/* binding */ createTracer)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/utils.mjs\");\n\nconst ELYSIA_TRACE = Symbol(\"ElysiaTrace\");\nconst createProcess = () => {\n  const { promise, resolve } = Promise.withResolvers();\n  const { promise: end, resolve: resolveEnd } = Promise.withResolvers();\n  const { promise: error, resolve: resolveError } = Promise.withResolvers();\n  const callbacks = [];\n  const callbacksEnd = [];\n  return [\n    (callback) => {\n      if (callback) callbacks.push(callback);\n      return promise;\n    },\n    (process) => {\n      const processes = [];\n      const resolvers = [];\n      let groupError = null;\n      for (let i = 0; i < (process.total ?? 0); i++) {\n        const { promise: promise2, resolve: resolve2 } = Promise.withResolvers();\n        const { promise: end2, resolve: resolveEnd2 } = Promise.withResolvers();\n        const { promise: error2, resolve: resolveError2 } = Promise.withResolvers();\n        const callbacks2 = [];\n        const callbacksEnd2 = [];\n        processes.push((callback) => {\n          if (callback) callbacks2.push(callback);\n          return promise2;\n        });\n        resolvers.push((process2) => {\n          const result2 = {\n            ...process2,\n            end: end2,\n            error: error2,\n            index: i,\n            onStop(callback) {\n              if (callback) callbacksEnd2.push(callback);\n              return end2;\n            }\n          };\n          resolve2(result2);\n          for (let i2 = 0; i2 < callbacks2.length; i2++)\n            callbacks2[i2](result2);\n          return (error3 = null) => {\n            const end3 = performance.now();\n            if (error3) groupError = error3;\n            const detail = {\n              end: end3,\n              error: error3,\n              get elapsed() {\n                return end3 - process2.begin;\n              }\n            };\n            for (let i2 = 0; i2 < callbacksEnd2.length; i2++)\n              callbacksEnd2[i2](detail);\n            resolveEnd2(end3);\n            resolveError2(error3);\n          };\n        });\n      }\n      const result = {\n        ...process,\n        end,\n        error,\n        onEvent(callback) {\n          for (let i = 0; i < processes.length; i++)\n            processes[i](callback);\n        },\n        onStop(callback) {\n          if (callback) callbacksEnd.push(callback);\n          return end;\n        }\n      };\n      resolve(result);\n      for (let i = 0; i < callbacks.length; i++) callbacks[i](result);\n      return {\n        resolveChild: resolvers,\n        resolve(error2 = null) {\n          const end2 = performance.now();\n          if (!error2 && groupError) error2 = groupError;\n          const detail = {\n            end: end2,\n            error: error2,\n            get elapsed() {\n              return end2 - process.begin;\n            }\n          };\n          for (let i = 0; i < callbacksEnd.length; i++)\n            callbacksEnd[i](detail);\n          resolveEnd(end2);\n          resolveError(error2);\n        }\n      };\n    }\n  ];\n};\nconst createTracer = (traceListener) => {\n  return (context) => {\n    const [onRequest, resolveRequest] = createProcess();\n    const [onParse, resolveParse] = createProcess();\n    const [onTransform, resolveTransform] = createProcess();\n    const [onBeforeHandle, resolveBeforeHandle] = createProcess();\n    const [onHandle, resolveHandle] = createProcess();\n    const [onAfterHandle, resolveAfterHandle] = createProcess();\n    const [onError, resolveError] = createProcess();\n    const [onMapResponse, resolveMapResponse] = createProcess();\n    const [onAfterResponse, resolveAfterResponse] = createProcess();\n    traceListener({\n      // @ts-ignore\n      id: context[_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.ELYSIA_REQUEST_ID],\n      context,\n      set: context.set,\n      // @ts-ignore\n      onRequest,\n      // @ts-ignore\n      onParse,\n      // @ts-ignore\n      onTransform,\n      // @ts-ignore\n      onBeforeHandle,\n      // @ts-ignore\n      onHandle,\n      // @ts-ignore\n      onAfterHandle,\n      // @ts-ignore\n      onMapResponse,\n      // @ts-ignore\n      onAfterResponse,\n      // @ts-ignore\n      onError\n    });\n    return {\n      request: resolveRequest,\n      parse: resolveParse,\n      transform: resolveTransform,\n      beforeHandle: resolveBeforeHandle,\n      handle: resolveHandle,\n      afterHandle: resolveAfterHandle,\n      error: resolveError,\n      mapResponse: resolveMapResponse,\n      afterResponse: resolveAfterResponse\n    };\n  };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vZWx5c2lhQDEuMi4yNV9Ac2luY2xhaXIrdHlwZWJveEAwLjM0LjMzX3R5cGVzY3JpcHRANS44LjMvbm9kZV9tb2R1bGVzL2VseXNpYS9kaXN0L3RyYWNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFDN0M7QUFDQTtBQUNBLFVBQVUsbUJBQW1CO0FBQzdCLFVBQVUsb0NBQW9DO0FBQzlDLFVBQVUsd0NBQXdDO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwwQkFBMEI7QUFDaEQsZ0JBQWdCLHVDQUF1QztBQUN2RCxnQkFBZ0Isc0NBQXNDO0FBQ3RELGdCQUFnQiwwQ0FBMEM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsd0JBQXdCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsMkJBQTJCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixzQkFBc0I7QUFDaEQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNCQUFzQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIseUJBQXlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix5REFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGxvbGhhXFxEZXNrdG9wXFxERVZcXGNvZGluZy5nbG9iYWwtd2ViXFxub2RlX21vZHVsZXNcXC5wbnBtXFxlbHlzaWFAMS4yLjI1X0BzaW5jbGFpcit0eXBlYm94QDAuMzQuMzNfdHlwZXNjcmlwdEA1LjguM1xcbm9kZV9tb2R1bGVzXFxlbHlzaWFcXGRpc3RcXHRyYWNlLm1qc3xyc2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0eyBFTFlTSUFfUkVRVUVTVF9JRCB9ZnJvbVwiLi91dGlscy5tanNcIjtcbmNvbnN0IEVMWVNJQV9UUkFDRSA9IFN5bWJvbChcIkVseXNpYVRyYWNlXCIpO1xuY29uc3QgY3JlYXRlUHJvY2VzcyA9ICgpID0+IHtcbiAgY29uc3QgeyBwcm9taXNlLCByZXNvbHZlIH0gPSBQcm9taXNlLndpdGhSZXNvbHZlcnMoKTtcbiAgY29uc3QgeyBwcm9taXNlOiBlbmQsIHJlc29sdmU6IHJlc29sdmVFbmQgfSA9IFByb21pc2Uud2l0aFJlc29sdmVycygpO1xuICBjb25zdCB7IHByb21pc2U6IGVycm9yLCByZXNvbHZlOiByZXNvbHZlRXJyb3IgfSA9IFByb21pc2Uud2l0aFJlc29sdmVycygpO1xuICBjb25zdCBjYWxsYmFja3MgPSBbXTtcbiAgY29uc3QgY2FsbGJhY2tzRW5kID0gW107XG4gIHJldHVybiBbXG4gICAgKGNhbGxiYWNrKSA9PiB7XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH0sXG4gICAgKHByb2Nlc3MpID0+IHtcbiAgICAgIGNvbnN0IHByb2Nlc3NlcyA9IFtdO1xuICAgICAgY29uc3QgcmVzb2x2ZXJzID0gW107XG4gICAgICBsZXQgZ3JvdXBFcnJvciA9IG51bGw7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IChwcm9jZXNzLnRvdGFsID8/IDApOyBpKyspIHtcbiAgICAgICAgY29uc3QgeyBwcm9taXNlOiBwcm9taXNlMiwgcmVzb2x2ZTogcmVzb2x2ZTIgfSA9IFByb21pc2Uud2l0aFJlc29sdmVycygpO1xuICAgICAgICBjb25zdCB7IHByb21pc2U6IGVuZDIsIHJlc29sdmU6IHJlc29sdmVFbmQyIH0gPSBQcm9taXNlLndpdGhSZXNvbHZlcnMoKTtcbiAgICAgICAgY29uc3QgeyBwcm9taXNlOiBlcnJvcjIsIHJlc29sdmU6IHJlc29sdmVFcnJvcjIgfSA9IFByb21pc2Uud2l0aFJlc29sdmVycygpO1xuICAgICAgICBjb25zdCBjYWxsYmFja3MyID0gW107XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrc0VuZDIgPSBbXTtcbiAgICAgICAgcHJvY2Vzc2VzLnB1c2goKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFja3MyLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgIHJldHVybiBwcm9taXNlMjtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc29sdmVycy5wdXNoKChwcm9jZXNzMikgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdDIgPSB7XG4gICAgICAgICAgICAuLi5wcm9jZXNzMixcbiAgICAgICAgICAgIGVuZDogZW5kMixcbiAgICAgICAgICAgIGVycm9yOiBlcnJvcjIsXG4gICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgIG9uU3RvcChjYWxsYmFjaykge1xuICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrc0VuZDIucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgICAgIHJldHVybiBlbmQyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmVzb2x2ZTIocmVzdWx0Mik7XG4gICAgICAgICAgZm9yIChsZXQgaTIgPSAwOyBpMiA8IGNhbGxiYWNrczIubGVuZ3RoOyBpMisrKVxuICAgICAgICAgICAgY2FsbGJhY2tzMltpMl0ocmVzdWx0Mik7XG4gICAgICAgICAgcmV0dXJuIChlcnJvcjMgPSBudWxsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbmQzID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICBpZiAoZXJyb3IzKSBncm91cEVycm9yID0gZXJyb3IzO1xuICAgICAgICAgICAgY29uc3QgZGV0YWlsID0ge1xuICAgICAgICAgICAgICBlbmQ6IGVuZDMsXG4gICAgICAgICAgICAgIGVycm9yOiBlcnJvcjMsXG4gICAgICAgICAgICAgIGdldCBlbGFwc2VkKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbmQzIC0gcHJvY2VzczIuYmVnaW47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgY2FsbGJhY2tzRW5kMi5sZW5ndGg7IGkyKyspXG4gICAgICAgICAgICAgIGNhbGxiYWNrc0VuZDJbaTJdKGRldGFpbCk7XG4gICAgICAgICAgICByZXNvbHZlRW5kMihlbmQzKTtcbiAgICAgICAgICAgIHJlc29sdmVFcnJvcjIoZXJyb3IzKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgLi4ucHJvY2VzcyxcbiAgICAgICAgZW5kLFxuICAgICAgICBlcnJvcixcbiAgICAgICAgb25FdmVudChjYWxsYmFjaykge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvY2Vzc2VzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgcHJvY2Vzc2VzW2ldKGNhbGxiYWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25TdG9wKGNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFja3NFbmQucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgcmV0dXJuIGVuZDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSBjYWxsYmFja3NbaV0ocmVzdWx0KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc29sdmVDaGlsZDogcmVzb2x2ZXJzLFxuICAgICAgICByZXNvbHZlKGVycm9yMiA9IG51bGwpIHtcbiAgICAgICAgICBjb25zdCBlbmQyID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgaWYgKCFlcnJvcjIgJiYgZ3JvdXBFcnJvcikgZXJyb3IyID0gZ3JvdXBFcnJvcjtcbiAgICAgICAgICBjb25zdCBkZXRhaWwgPSB7XG4gICAgICAgICAgICBlbmQ6IGVuZDIsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IyLFxuICAgICAgICAgICAgZ2V0IGVsYXBzZWQoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBlbmQyIC0gcHJvY2Vzcy5iZWdpbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2FsbGJhY2tzRW5kLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgY2FsbGJhY2tzRW5kW2ldKGRldGFpbCk7XG4gICAgICAgICAgcmVzb2x2ZUVuZChlbmQyKTtcbiAgICAgICAgICByZXNvbHZlRXJyb3IoZXJyb3IyKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIF07XG59O1xuY29uc3QgY3JlYXRlVHJhY2VyID0gKHRyYWNlTGlzdGVuZXIpID0+IHtcbiAgcmV0dXJuIChjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgW29uUmVxdWVzdCwgcmVzb2x2ZVJlcXVlc3RdID0gY3JlYXRlUHJvY2VzcygpO1xuICAgIGNvbnN0IFtvblBhcnNlLCByZXNvbHZlUGFyc2VdID0gY3JlYXRlUHJvY2VzcygpO1xuICAgIGNvbnN0IFtvblRyYW5zZm9ybSwgcmVzb2x2ZVRyYW5zZm9ybV0gPSBjcmVhdGVQcm9jZXNzKCk7XG4gICAgY29uc3QgW29uQmVmb3JlSGFuZGxlLCByZXNvbHZlQmVmb3JlSGFuZGxlXSA9IGNyZWF0ZVByb2Nlc3MoKTtcbiAgICBjb25zdCBbb25IYW5kbGUsIHJlc29sdmVIYW5kbGVdID0gY3JlYXRlUHJvY2VzcygpO1xuICAgIGNvbnN0IFtvbkFmdGVySGFuZGxlLCByZXNvbHZlQWZ0ZXJIYW5kbGVdID0gY3JlYXRlUHJvY2VzcygpO1xuICAgIGNvbnN0IFtvbkVycm9yLCByZXNvbHZlRXJyb3JdID0gY3JlYXRlUHJvY2VzcygpO1xuICAgIGNvbnN0IFtvbk1hcFJlc3BvbnNlLCByZXNvbHZlTWFwUmVzcG9uc2VdID0gY3JlYXRlUHJvY2VzcygpO1xuICAgIGNvbnN0IFtvbkFmdGVyUmVzcG9uc2UsIHJlc29sdmVBZnRlclJlc3BvbnNlXSA9IGNyZWF0ZVByb2Nlc3MoKTtcbiAgICB0cmFjZUxpc3RlbmVyKHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGlkOiBjb250ZXh0W0VMWVNJQV9SRVFVRVNUX0lEXSxcbiAgICAgIGNvbnRleHQsXG4gICAgICBzZXQ6IGNvbnRleHQuc2V0LFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgb25SZXF1ZXN0LFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgb25QYXJzZSxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIG9uVHJhbnNmb3JtLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgb25CZWZvcmVIYW5kbGUsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBvbkhhbmRsZSxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIG9uQWZ0ZXJIYW5kbGUsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBvbk1hcFJlc3BvbnNlLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgb25BZnRlclJlc3BvbnNlLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgb25FcnJvclxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXF1ZXN0OiByZXNvbHZlUmVxdWVzdCxcbiAgICAgIHBhcnNlOiByZXNvbHZlUGFyc2UsXG4gICAgICB0cmFuc2Zvcm06IHJlc29sdmVUcmFuc2Zvcm0sXG4gICAgICBiZWZvcmVIYW5kbGU6IHJlc29sdmVCZWZvcmVIYW5kbGUsXG4gICAgICBoYW5kbGU6IHJlc29sdmVIYW5kbGUsXG4gICAgICBhZnRlckhhbmRsZTogcmVzb2x2ZUFmdGVySGFuZGxlLFxuICAgICAgZXJyb3I6IHJlc29sdmVFcnJvcixcbiAgICAgIG1hcFJlc3BvbnNlOiByZXNvbHZlTWFwUmVzcG9uc2UsXG4gICAgICBhZnRlclJlc3BvbnNlOiByZXNvbHZlQWZ0ZXJSZXNwb25zZVxuICAgIH07XG4gIH07XG59O1xuZXhwb3J0IHtcbiAgRUxZU0lBX1RSQUNFLFxuICBjcmVhdGVUcmFjZXJcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/trace.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/type-system.mjs":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/type-system.mjs ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ElysiaType: () => (/* binding */ ElysiaType),\n/* harmony export */   FormatRegistry: () => (/* reexport module object */ _sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   TypeCheck: () => (/* reexport safe */ _sinclair_typebox_compiler__WEBPACK_IMPORTED_MODULE_7__.TypeCheck),\n/* harmony export */   TypeCompiler: () => (/* reexport safe */ _sinclair_typebox_compiler__WEBPACK_IMPORTED_MODULE_7__.TypeCompiler),\n/* harmony export */   TypeRegistry: () => (/* reexport module object */ _sinclair_typebox__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   TypeSystem: () => (/* reexport safe */ _sinclair_typebox_system__WEBPACK_IMPORTED_MODULE_11__.TypeSystem),\n/* harmony export */   TypeSystemDuplicateFormat: () => (/* reexport safe */ _sinclair_typebox_system__WEBPACK_IMPORTED_MODULE_11__.TypeSystemDuplicateFormat),\n/* harmony export */   TypeSystemDuplicateTypeKind: () => (/* reexport safe */ _sinclair_typebox_system__WEBPACK_IMPORTED_MODULE_11__.TypeSystemDuplicateTypeKind),\n/* harmony export */   TypeSystemPolicy: () => (/* reexport safe */ _sinclair_typebox_system__WEBPACK_IMPORTED_MODULE_12__.TypeSystemPolicy),\n/* harmony export */   t: () => (/* binding */ t)\n/* harmony export */ });\n/* harmony import */ var _sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sinclair/typebox */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/type/registry/format.mjs\");\n/* harmony import */ var _sinclair_typebox__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sinclair/typebox */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/type/type/index.mjs\");\n/* harmony import */ var _sinclair_typebox__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sinclair/typebox */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/type/registry/type.mjs\");\n/* harmony import */ var _sinclair_typebox__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sinclair/typebox */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/type/symbols/symbols.mjs\");\n/* harmony import */ var _sinclair_typebox__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sinclair/typebox */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/type/unsafe/unsafe.mjs\");\n/* harmony import */ var _sinclair_typebox_compiler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sinclair/typebox/compiler */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/compiler/compiler.mjs\");\n/* harmony import */ var _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sinclair/typebox/value */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/value/check/check.mjs\");\n/* harmony import */ var _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sinclair/typebox/value */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/value/create/create.mjs\");\n/* harmony import */ var _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sinclair/typebox/value */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/value/decode/decode.mjs\");\n/* harmony import */ var _formats_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formats.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/formats.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/error.mjs\");\n/* harmony import */ var _sinclair_typebox_system__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @sinclair/typebox/system */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/system/system.mjs\");\n/* harmony import */ var _sinclair_typebox_system__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @sinclair/typebox/system */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/system/policy.mjs\");\n\n\n\n\n\n\nconst isISO8601 = /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/;\nconst isFormalDate = /(?:Sun|Mon|Tue|Wed|Thu|Fri|Sat)\\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s\\d{2}\\s\\d{4}\\s\\d{2}:\\d{2}:\\d{2}\\sGMT(?:\\+|-)\\d{4}\\s\\([^)]+\\)/;\nconst isShortenDate = /^(?:(?:(?:(?:0?[1-9]|[12][0-9]|3[01])[/\\s-](?:0?[1-9]|1[0-2])[/\\s-](?:19|20)\\d{2})|(?:(?:19|20)\\d{2}[/\\s-](?:0?[1-9]|1[0-2])[/\\s-](?:0?[1-9]|[12][0-9]|3[01]))))(?:\\s(?:1[012]|0?[1-9]):[0-5][0-9](?::[0-5][0-9])?(?:\\s[AP]M)?)?$/;\nconst _validateDate = _formats_mjs__WEBPACK_IMPORTED_MODULE_0__.fullFormats.date;\nconst _validateDateTime = _formats_mjs__WEBPACK_IMPORTED_MODULE_0__.fullFormats[\"date-time\"];\nif (!_sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Has(\"date\"))\n  _sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Set(\"date\", (value) => {\n    const temp = value.replace(/\"/g, \"\");\n    if (isISO8601.test(temp) || isFormalDate.test(temp) || isShortenDate.test(temp) || _validateDate(temp)) {\n      const date = new Date(temp);\n      if (!Number.isNaN(date.getTime())) return true;\n    }\n    return false;\n  });\nif (!_sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Has(\"date-time\"))\n  _sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Set(\"date-time\", (value) => {\n    const temp = value.replace(/\"/g, \"\");\n    if (isISO8601.test(temp) || isFormalDate.test(temp) || isShortenDate.test(temp) || _validateDateTime(temp)) {\n      const date = new Date(temp);\n      if (!Number.isNaN(date.getTime())) return true;\n    }\n    return false;\n  });\nObject.entries(_formats_mjs__WEBPACK_IMPORTED_MODULE_0__.fullFormats).forEach((formatEntry) => {\n  const [formatName, formatValue] = formatEntry;\n  if (!_sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Has(formatName)) {\n    if (formatValue instanceof RegExp)\n      _sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Set(formatName, (value) => formatValue.test(value));\n    else if (typeof formatValue === \"function\")\n      _sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Set(formatName, formatValue);\n  }\n});\nconst t = Object.assign({}, _sinclair_typebox__WEBPACK_IMPORTED_MODULE_3__.Type);\nconst parseFileUnit = (size) => {\n  if (typeof size === \"string\")\n    switch (size.slice(-1)) {\n      case \"k\":\n        return +size.slice(0, size.length - 1) * 1024;\n      case \"m\":\n        return +size.slice(0, size.length - 1) * 1048576;\n      default:\n        return +size;\n    }\n  return size;\n};\nconst checkFileExtension = (type, extension) => {\n  if (type.startsWith(extension)) return true;\n  return extension.charCodeAt(extension.length - 1) === 42 && extension.charCodeAt(extension.length - 2) === 47 && type.startsWith(extension.slice(0, -1));\n};\nconst validateFile = (options, value) => {\n  if (!(value instanceof Blob)) return false;\n  if (options.minSize && value.size < parseFileUnit(options.minSize))\n    return false;\n  if (options.maxSize && value.size > parseFileUnit(options.maxSize))\n    return false;\n  if (options.extension) {\n    if (typeof options.extension === \"string\")\n      return checkFileExtension(value.type, options.extension);\n    for (let i = 0; i < options.extension.length; i++)\n      if (checkFileExtension(value.type, options.extension[i]))\n        return true;\n    return false;\n  }\n  return true;\n};\nconst File = getOrSetType(\n  \"File\",\n  validateFile\n);\nconst Files = getOrSetType(\n  \"Files\",\n  (options, value) => {\n    if (!Array.isArray(value)) return validateFile(options, value);\n    if (options.minItems && value.length < options.minItems) return false;\n    if (options.maxItems && value.length > options.maxItems) return false;\n    for (let i = 0; i < value.length; i++)\n      if (!validateFile(options, value[i])) return false;\n    return true;\n  }\n);\nif (!_sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Has(\"numeric\"))\n  _sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Set(\"numeric\", (value) => !!value && !isNaN(+value));\nif (!_sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Has(\"integer\"))\n  _sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Set(\n    \"integer\",\n    (value) => !!value && Number.isInteger(+value)\n  );\nif (!_sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Has(\"boolean\"))\n  _sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Set(\n    \"boolean\",\n    (value) => value === \"true\" || value === \"false\"\n  );\nif (!_sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Has(\"ObjectString\"))\n  _sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Set(\"ObjectString\", (value) => {\n    let start = value.charCodeAt(0);\n    if (start === 9 || start === 10 || start === 32)\n      start = value.trimStart().charCodeAt(0);\n    if (start !== 123 && start !== 91) return false;\n    try {\n      JSON.parse(value);\n      return true;\n    } catch {\n      return false;\n    }\n  });\nif (!_sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Has(\"ArrayString\"))\n  _sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Set(\"ArrayString\", (value) => {\n    let start = value.charCodeAt(0);\n    if (start === 9 || start === 10 || start === 32)\n      start = value.trimStart().charCodeAt(0);\n    if (start !== 123 && start !== 91) return false;\n    try {\n      JSON.parse(value);\n      return true;\n    } catch {\n      return false;\n    }\n  });\nif (!_sinclair_typebox__WEBPACK_IMPORTED_MODULE_4__.Has(\"UnionEnum\"))\n  _sinclair_typebox__WEBPACK_IMPORTED_MODULE_4__.Set(\"UnionEnum\", (schema, value) => {\n    return (typeof value === \"number\" || typeof value === \"string\" || value === null) && schema.enum.includes(value);\n  });\nconst ElysiaType = {\n  Numeric: (property) => {\n    const schema = _sinclair_typebox__WEBPACK_IMPORTED_MODULE_3__.Type.Number(property);\n    return t.Transform(\n      t.Union(\n        [\n          t.String({\n            format: \"numeric\",\n            default: 0\n          }),\n          t.Number(property)\n        ],\n        property\n      )\n    ).Decode((value) => {\n      const number = +value;\n      if (isNaN(number)) return value;\n      if (property && !_sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_5__.Check(schema, number))\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, number);\n      return number;\n    }).Encode((value) => value);\n  },\n  Integer: (property) => {\n    const schema = _sinclair_typebox__WEBPACK_IMPORTED_MODULE_3__.Type.Integer(property);\n    return t.Transform(\n      t.Union(\n        [\n          t.String({\n            format: \"integer\",\n            default: 0\n          }),\n          _sinclair_typebox__WEBPACK_IMPORTED_MODULE_3__.Type.Integer(property)\n        ],\n        property\n      )\n    ).Decode((value) => {\n      const number = +value;\n      if (!_sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_5__.Check(schema, number))\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, number);\n      return number;\n    }).Encode((value) => value);\n  },\n  Date: (property) => {\n    const schema = _sinclair_typebox__WEBPACK_IMPORTED_MODULE_3__.Type.Date(property);\n    const _default = property?.default ? new Date(property.default) : void 0;\n    return t.Transform(\n      t.Union(\n        [\n          _sinclair_typebox__WEBPACK_IMPORTED_MODULE_3__.Type.Date(property),\n          t.String({\n            format: \"date\",\n            default: _default?.toISOString()\n          }),\n          t.String({\n            format: \"date-time\",\n            default: _default?.toISOString()\n          }),\n          t.Number({ default: _default?.getTime() })\n        ],\n        property\n      )\n    ).Decode((value) => {\n      if (typeof value === \"number\") {\n        const date2 = new Date(value);\n        if (!_sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_5__.Check(schema, date2))\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, date2);\n        return date2;\n      }\n      if (value instanceof Date) return value;\n      const date = new Date(value);\n      if (!date || isNaN(date.getTime()))\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, date);\n      if (!_sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_5__.Check(schema, date))\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, date);\n      return date;\n    }).Encode((value) => value.toISOString());\n  },\n  BooleanString: (property) => {\n    const schema = _sinclair_typebox__WEBPACK_IMPORTED_MODULE_3__.Type.Boolean(property);\n    return t.Transform(\n      t.Union(\n        [\n          t.Boolean(property),\n          t.String({\n            format: \"boolean\",\n            default: false\n          })\n        ],\n        property\n      )\n    ).Decode((value) => {\n      if (typeof value === \"string\") return value === \"true\";\n      if (value !== void 0 && !_sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_5__.Check(schema, value))\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, value);\n      return value;\n    }).Encode((value) => value);\n  },\n  ObjectString: (properties, options) => {\n    const schema = t.Object(properties, options);\n    const defaultValue = JSON.stringify(_sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_6__.Create(schema));\n    let compiler;\n    try {\n      compiler = _sinclair_typebox_compiler__WEBPACK_IMPORTED_MODULE_7__.TypeCompiler.Compile(schema);\n    } catch {\n    }\n    return t.Transform(\n      t.Union([\n        t.String({\n          format: \"ObjectString\",\n          default: defaultValue\n        }),\n        schema\n      ])\n    ).Decode((value) => {\n      if (typeof value === \"string\") {\n        if (value.charCodeAt(0) !== 123)\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, value);\n        try {\n          value = JSON.parse(value);\n        } catch {\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, value);\n        }\n        if (compiler) {\n          if (!compiler.Check(value))\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, value);\n          return compiler.Decode(value);\n        }\n        if (!_sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_5__.Check(schema, value))\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, value);\n        return _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_8__.Decode(schema, value);\n      }\n      return value;\n    }).Encode((value) => {\n      if (typeof value === \"string\")\n        try {\n          value = JSON.parse(value);\n        } catch {\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, value);\n        }\n      if (!_sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_5__.Check(schema, value))\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, value);\n      return JSON.stringify(value);\n    });\n  },\n  ArrayString: (children = t.String(), options) => {\n    const schema = t.Array(children, options);\n    let compiler;\n    try {\n      compiler = _sinclair_typebox_compiler__WEBPACK_IMPORTED_MODULE_7__.TypeCompiler.Compile(schema);\n    } catch {\n    }\n    const decode = (value, isProperty = false) => {\n      if (value.charCodeAt(0) === 91) {\n        try {\n          value = JSON.parse(value);\n        } catch {\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, value);\n        }\n        if (compiler) {\n          if (!compiler.Check(value))\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, value);\n          return compiler.Decode(value);\n        }\n        if (!_sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_5__.Check(schema, value))\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, value);\n        return _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_8__.Decode(schema, value);\n      }\n      if (value.indexOf(\",\") !== -1) {\n        const newValue = value.split(\",\").map((v) => v.trim());\n        if (compiler) {\n          if (!compiler.Check(newValue))\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, value);\n          return compiler.Decode(newValue);\n        }\n        if (!_sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_5__.Check(schema, newValue))\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, newValue);\n        return _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_8__.Decode(schema, newValue);\n      }\n      if (isProperty) return value;\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, value);\n    };\n    return t.Transform(\n      t.Union([\n        t.String({\n          format: \"ArrayString\",\n          default: options?.default\n        }),\n        schema\n      ])\n    ).Decode((value) => {\n      if (Array.isArray(value)) {\n        let values = [];\n        for (let i = 0; i < value.length; i++) {\n          const v = value[i];\n          if (typeof v === \"string\") {\n            const t2 = decode(v, true);\n            if (Array.isArray(t2)) values = values.concat(t2);\n            else values.push(t2);\n            continue;\n          }\n          values.push(v);\n        }\n        return values;\n      }\n      if (typeof value === \"string\") return decode(value);\n      return value;\n    }).Encode((value) => {\n      if (typeof value === \"string\")\n        try {\n          value = JSON.parse(value);\n        } catch {\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, value);\n        }\n      if (!_sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_5__.Check(schema, value))\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"property\", schema, value);\n      return JSON.stringify(value);\n    });\n  },\n  File,\n  Files: (options = {}) => t.Transform(Files(options)).Decode((value) => {\n    if (Array.isArray(value)) return value;\n    return [value];\n  }).Encode((value) => value),\n  Nullable: (schema, options) => t.Union([schema, t.Null()], options),\n  /**\n   * Allow Optional, Nullable and Undefined\n   */\n  MaybeEmpty: (schema, options) => t.Union([schema, t.Null(), t.Undefined()], options),\n  Cookie: (properties, {\n    domain,\n    expires,\n    httpOnly,\n    maxAge,\n    path,\n    priority,\n    sameSite,\n    secure,\n    secrets,\n    sign,\n    ...options\n  } = {}) => {\n    const v = t.Object(properties, options);\n    v.config = {\n      domain,\n      expires,\n      httpOnly,\n      maxAge,\n      path,\n      priority,\n      sameSite,\n      secure,\n      secrets,\n      sign\n    };\n    return v;\n  },\n  // based on https://github.com/elysiajs/elysia/issues/512#issuecomment-1980134955\n  UnionEnum: (values, options = {}) => {\n    const type = values.every((value) => typeof value === \"string\") ? { type: \"string\" } : values.every((value) => typeof value === \"number\") ? { type: \"number\" } : values.every((value) => value === null) ? { type: \"null\" } : {};\n    if (values.some((x) => typeof x === \"object\" && x !== null))\n      throw new Error(\"This type does not support objects or arrays\");\n    return {\n      // why it need default??\n      default: values[0],\n      ...options,\n      [_sinclair_typebox__WEBPACK_IMPORTED_MODULE_9__.Kind]: \"UnionEnum\",\n      ...type,\n      enum: values\n    };\n  }\n};\nt.BooleanString = ElysiaType.BooleanString;\nt.ObjectString = ElysiaType.ObjectString;\nt.ArrayString = ElysiaType.ArrayString;\nt.Numeric = ElysiaType.Numeric;\nt.Integer = ElysiaType.Integer;\nt.File = (arg = {}) => ElysiaType.File({\n  default: \"File\",\n  ...arg,\n  extension: arg?.type,\n  type: \"string\",\n  format: \"binary\"\n});\nt.Files = (arg = {}) => ElysiaType.Files({\n  ...arg,\n  elysiaMeta: \"Files\",\n  default: \"Files\",\n  extension: arg?.type,\n  type: \"array\",\n  items: {\n    ...arg,\n    default: \"Files\",\n    type: \"string\",\n    format: \"binary\"\n  }\n});\nt.Nullable = (schema) => ElysiaType.Nullable(schema);\nt.MaybeEmpty = ElysiaType.MaybeEmpty;\nt.Cookie = ElysiaType.Cookie;\nt.Date = ElysiaType.Date;\nt.UnionEnum = ElysiaType.UnionEnum;\nfunction getOrSetType(kind, func) {\n  if (!_sinclair_typebox__WEBPACK_IMPORTED_MODULE_4__.Has(kind)) {\n    _sinclair_typebox__WEBPACK_IMPORTED_MODULE_4__.Set(kind, func);\n  }\n  return (options = {}) => (0,_sinclair_typebox__WEBPACK_IMPORTED_MODULE_10__.Unsafe)({ ...options, [_sinclair_typebox__WEBPACK_IMPORTED_MODULE_9__.Kind]: kind });\n}\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/type-system.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/universal/env.mjs":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/universal/env.mjs ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   env: () => (/* binding */ env)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/universal/utils.mjs\");\n\nconst env = _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isBun ? Bun.env : typeof process !== \"undefined\" && process?.env ? process.env : {};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vZWx5c2lhQDEuMi4yNV9Ac2luY2xhaXIrdHlwZWJveEAwLjM0LjMzX3R5cGVzY3JpcHRANS44LjMvbm9kZV9tb2R1bGVzL2VseXNpYS9kaXN0L3VuaXZlcnNhbC9lbnYubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlDO0FBQ2pDLFlBQVksNkNBQUs7QUFHZiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxsb2xoYVxcRGVza3RvcFxcREVWXFxjb2RpbmcuZ2xvYmFsLXdlYlxcbm9kZV9tb2R1bGVzXFwucG5wbVxcZWx5c2lhQDEuMi4yNV9Ac2luY2xhaXIrdHlwZWJveEAwLjM0LjMzX3R5cGVzY3JpcHRANS44LjNcXG5vZGVfbW9kdWxlc1xcZWx5c2lhXFxkaXN0XFx1bml2ZXJzYWxcXGVudi5tanN8cnNjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydHsgaXNCdW4gfWZyb21cIi4vdXRpbHMubWpzXCI7XG5jb25zdCBlbnYgPSBpc0J1biA/IEJ1bi5lbnYgOiB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzPy5lbnYgPyBwcm9jZXNzLmVudiA6IHt9O1xuZXhwb3J0IHtcbiAgZW52XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/universal/env.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/universal/file.mjs":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/universal/file.mjs ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ElysiaFile: () => (/* binding */ ElysiaFile),\n/* harmony export */   file: () => (/* binding */ file),\n/* harmony export */   getFileExtension: () => (/* binding */ getFileExtension),\n/* harmony export */   mime: () => (/* binding */ mime)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/universal/utils.mjs\");\n\nconst mime = {\n  aac: \"audio/aac\",\n  abw: \"application/x-abiword\",\n  ai: \"application/postscript\",\n  arc: \"application/octet-stream\",\n  avi: \"video/x-msvideo\",\n  azw: \"application/vnd.amazon.ebook\",\n  bin: \"application/octet-stream\",\n  bz: \"application/x-bzip\",\n  bz2: \"application/x-bzip2\",\n  csh: \"application/x-csh\",\n  css: \"text/css\",\n  csv: \"text/csv\",\n  doc: \"application/msword\",\n  dll: \"application/octet-stream\",\n  eot: \"application/vnd.ms-fontobject\",\n  epub: \"application/epub+zip\",\n  gif: \"image/gif\",\n  htm: \"text/html\",\n  html: \"text/html\",\n  ico: \"image/x-icon\",\n  ics: \"text/calendar\",\n  jar: \"application/java-archive\",\n  jpeg: \"image/jpeg\",\n  jpg: \"image/jpeg\",\n  js: \"application/javascript\",\n  json: \"application/json\",\n  mid: \"audio/midi\",\n  midi: \"audio/midi\",\n  mp2: \"audio/mpeg\",\n  mp3: \"audio/mpeg\",\n  mp4: \"video/mp4\",\n  mpa: \"video/mpeg\",\n  mpe: \"video/mpeg\",\n  mpeg: \"video/mpeg\",\n  mpkg: \"application/vnd.apple.installer+xml\",\n  odp: \"application/vnd.oasis.opendocument.presentation\",\n  ods: \"application/vnd.oasis.opendocument.spreadsheet\",\n  odt: \"application/vnd.oasis.opendocument.text\",\n  oga: \"audio/ogg\",\n  ogv: \"video/ogg\",\n  ogx: \"application/ogg\",\n  otf: \"font/otf\",\n  png: \"image/png\",\n  pdf: \"application/pdf\",\n  ppt: \"application/vnd.ms-powerpoint\",\n  rar: \"application/x-rar-compressed\",\n  rtf: \"application/rtf\",\n  sh: \"application/x-sh\",\n  svg: \"image/svg+xml\",\n  swf: \"application/x-shockwave-flash\",\n  tar: \"application/x-tar\",\n  tif: \"image/tiff\",\n  tiff: \"image/tiff\",\n  ts: \"application/typescript\",\n  ttf: \"font/ttf\",\n  txt: \"text/plain\",\n  vsd: \"application/vnd.visio\",\n  wav: \"audio/x-wav\",\n  weba: \"audio/webm\",\n  webm: \"video/webm\",\n  webp: \"image/webp\",\n  woff: \"font/woff\",\n  woff2: \"font/woff2\",\n  xhtml: \"application/xhtml+xml\",\n  xls: \"application/vnd.ms-excel\",\n  xlsx: \"application/vnd.ms-excel\",\n  xlsx_OLD: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n  xml: \"application/xml\",\n  xul: \"application/vnd.mozilla.xul+xml\",\n  zip: \"application/zip\",\n  \"3gp\": \"video/3gpp\",\n  \"3gp_DOES_NOT_CONTAIN_VIDEO\": \"audio/3gpp\",\n  \"3gp2\": \"video/3gpp2\",\n  \"3gp2_DOES_NOT_CONTAIN_VIDEO\": \"audio/3gpp2\",\n  \"7z\": \"application/x-7z-compressed\"\n};\nconst getFileExtension = (path) => {\n  const index = path.lastIndexOf(\".\");\n  if (index === -1) return \"\";\n  return path.slice(index + 1);\n};\nconst file = (path) => new ElysiaFile(path);\nlet createReadStream;\nlet stat;\nclass ElysiaFile {\n  constructor(path) {\n    this.path = path;\n    if (_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isBun) this.value = Bun.file(path);\n    else {\n      if (typeof window !== \"undefined\") {\n        console.warn(\"Browser environment does not support file\");\n      } else {\n        if (!createReadStream || !stat) {\n          try {\n            this.value = Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 19)).then((fs) => {\n              createReadStream = fs.createReadStream;\n              return fs.createReadStream(path);\n            });\n            this.stats = Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs/promises */ \"fs/promises\", 19)).then((fs) => {\n              stat = fs.stat;\n              return fs.stat(path);\n            });\n          } catch {\n          }\n        } else {\n          this.value = createReadStream(path);\n          this.stats = stat(path);\n        }\n      }\n    }\n  }\n  get type() {\n    return (\n      // @ts-ignore\n      mime[getFileExtension(this.path)] || \"application/octet-stream\"\n    );\n  }\n  get length() {\n    if (_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isBun) return this.value.size;\n    return this.stats?.then((x) => x.size) ?? 0;\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vZWx5c2lhQDEuMi4yNV9Ac2luY2xhaXIrdHlwZWJveEAwLjM0LjMzX3R5cGVzY3JpcHRANS44LjMvbm9kZV9tb2R1bGVzL2VseXNpYS9kaXN0L3VuaXZlcnNhbC9maWxlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsNkNBQUs7QUFDYjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLHlCQUF5QiwwR0FBWTtBQUNyQztBQUNBO0FBQ0EsYUFBYTtBQUNiLHlCQUF5Qiw0SEFBcUI7QUFDOUM7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1o7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDZDQUFLO0FBQ2I7QUFDQTtBQUNBO0FBTUUiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbG9saGFcXERlc2t0b3BcXERFVlxcY29kaW5nLmdsb2JhbC13ZWJcXG5vZGVfbW9kdWxlc1xcLnBucG1cXGVseXNpYUAxLjIuMjVfQHNpbmNsYWlyK3R5cGVib3hAMC4zNC4zM190eXBlc2NyaXB0QDUuOC4zXFxub2RlX21vZHVsZXNcXGVseXNpYVxcZGlzdFxcdW5pdmVyc2FsXFxmaWxlLm1qc3xyc2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0eyBpc0J1biB9ZnJvbVwiLi91dGlscy5tanNcIjtcbmNvbnN0IG1pbWUgPSB7XG4gIGFhYzogXCJhdWRpby9hYWNcIixcbiAgYWJ3OiBcImFwcGxpY2F0aW9uL3gtYWJpd29yZFwiLFxuICBhaTogXCJhcHBsaWNhdGlvbi9wb3N0c2NyaXB0XCIsXG4gIGFyYzogXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIixcbiAgYXZpOiBcInZpZGVvL3gtbXN2aWRlb1wiLFxuICBhenc6IFwiYXBwbGljYXRpb24vdm5kLmFtYXpvbi5lYm9va1wiLFxuICBiaW46IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIsXG4gIGJ6OiBcImFwcGxpY2F0aW9uL3gtYnppcFwiLFxuICBiejI6IFwiYXBwbGljYXRpb24veC1iemlwMlwiLFxuICBjc2g6IFwiYXBwbGljYXRpb24veC1jc2hcIixcbiAgY3NzOiBcInRleHQvY3NzXCIsXG4gIGNzdjogXCJ0ZXh0L2NzdlwiLFxuICBkb2M6IFwiYXBwbGljYXRpb24vbXN3b3JkXCIsXG4gIGRsbDogXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIixcbiAgZW90OiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1mb250b2JqZWN0XCIsXG4gIGVwdWI6IFwiYXBwbGljYXRpb24vZXB1Yit6aXBcIixcbiAgZ2lmOiBcImltYWdlL2dpZlwiLFxuICBodG06IFwidGV4dC9odG1sXCIsXG4gIGh0bWw6IFwidGV4dC9odG1sXCIsXG4gIGljbzogXCJpbWFnZS94LWljb25cIixcbiAgaWNzOiBcInRleHQvY2FsZW5kYXJcIixcbiAgamFyOiBcImFwcGxpY2F0aW9uL2phdmEtYXJjaGl2ZVwiLFxuICBqcGVnOiBcImltYWdlL2pwZWdcIixcbiAganBnOiBcImltYWdlL2pwZWdcIixcbiAganM6IFwiYXBwbGljYXRpb24vamF2YXNjcmlwdFwiLFxuICBqc29uOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgbWlkOiBcImF1ZGlvL21pZGlcIixcbiAgbWlkaTogXCJhdWRpby9taWRpXCIsXG4gIG1wMjogXCJhdWRpby9tcGVnXCIsXG4gIG1wMzogXCJhdWRpby9tcGVnXCIsXG4gIG1wNDogXCJ2aWRlby9tcDRcIixcbiAgbXBhOiBcInZpZGVvL21wZWdcIixcbiAgbXBlOiBcInZpZGVvL21wZWdcIixcbiAgbXBlZzogXCJ2aWRlby9tcGVnXCIsXG4gIG1wa2c6IFwiYXBwbGljYXRpb24vdm5kLmFwcGxlLmluc3RhbGxlcit4bWxcIixcbiAgb2RwOiBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uXCIsXG4gIG9kczogXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnNwcmVhZHNoZWV0XCIsXG4gIG9kdDogXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHRcIixcbiAgb2dhOiBcImF1ZGlvL29nZ1wiLFxuICBvZ3Y6IFwidmlkZW8vb2dnXCIsXG4gIG9neDogXCJhcHBsaWNhdGlvbi9vZ2dcIixcbiAgb3RmOiBcImZvbnQvb3RmXCIsXG4gIHBuZzogXCJpbWFnZS9wbmdcIixcbiAgcGRmOiBcImFwcGxpY2F0aW9uL3BkZlwiLFxuICBwcHQ6IFwiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnRcIixcbiAgcmFyOiBcImFwcGxpY2F0aW9uL3gtcmFyLWNvbXByZXNzZWRcIixcbiAgcnRmOiBcImFwcGxpY2F0aW9uL3J0ZlwiLFxuICBzaDogXCJhcHBsaWNhdGlvbi94LXNoXCIsXG4gIHN2ZzogXCJpbWFnZS9zdmcreG1sXCIsXG4gIHN3ZjogXCJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaFwiLFxuICB0YXI6IFwiYXBwbGljYXRpb24veC10YXJcIixcbiAgdGlmOiBcImltYWdlL3RpZmZcIixcbiAgdGlmZjogXCJpbWFnZS90aWZmXCIsXG4gIHRzOiBcImFwcGxpY2F0aW9uL3R5cGVzY3JpcHRcIixcbiAgdHRmOiBcImZvbnQvdHRmXCIsXG4gIHR4dDogXCJ0ZXh0L3BsYWluXCIsXG4gIHZzZDogXCJhcHBsaWNhdGlvbi92bmQudmlzaW9cIixcbiAgd2F2OiBcImF1ZGlvL3gtd2F2XCIsXG4gIHdlYmE6IFwiYXVkaW8vd2VibVwiLFxuICB3ZWJtOiBcInZpZGVvL3dlYm1cIixcbiAgd2VicDogXCJpbWFnZS93ZWJwXCIsXG4gIHdvZmY6IFwiZm9udC93b2ZmXCIsXG4gIHdvZmYyOiBcImZvbnQvd29mZjJcIixcbiAgeGh0bWw6IFwiYXBwbGljYXRpb24veGh0bWwreG1sXCIsXG4gIHhsczogXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWxcIixcbiAgeGxzeDogXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWxcIixcbiAgeGxzeF9PTEQ6IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXRcIixcbiAgeG1sOiBcImFwcGxpY2F0aW9uL3htbFwiLFxuICB4dWw6IFwiYXBwbGljYXRpb24vdm5kLm1vemlsbGEueHVsK3htbFwiLFxuICB6aXA6IFwiYXBwbGljYXRpb24vemlwXCIsXG4gIFwiM2dwXCI6IFwidmlkZW8vM2dwcFwiLFxuICBcIjNncF9ET0VTX05PVF9DT05UQUlOX1ZJREVPXCI6IFwiYXVkaW8vM2dwcFwiLFxuICBcIjNncDJcIjogXCJ2aWRlby8zZ3BwMlwiLFxuICBcIjNncDJfRE9FU19OT1RfQ09OVEFJTl9WSURFT1wiOiBcImF1ZGlvLzNncHAyXCIsXG4gIFwiN3pcIjogXCJhcHBsaWNhdGlvbi94LTd6LWNvbXByZXNzZWRcIlxufTtcbmNvbnN0IGdldEZpbGVFeHRlbnNpb24gPSAocGF0aCkgPT4ge1xuICBjb25zdCBpbmRleCA9IHBhdGgubGFzdEluZGV4T2YoXCIuXCIpO1xuICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gXCJcIjtcbiAgcmV0dXJuIHBhdGguc2xpY2UoaW5kZXggKyAxKTtcbn07XG5jb25zdCBmaWxlID0gKHBhdGgpID0+IG5ldyBFbHlzaWFGaWxlKHBhdGgpO1xubGV0IGNyZWF0ZVJlYWRTdHJlYW07XG5sZXQgc3RhdDtcbmNsYXNzIEVseXNpYUZpbGUge1xuICBjb25zdHJ1Y3RvcihwYXRoKSB7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICBpZiAoaXNCdW4pIHRoaXMudmFsdWUgPSBCdW4uZmlsZShwYXRoKTtcbiAgICBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkJyb3dzZXIgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBmaWxlXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFjcmVhdGVSZWFkU3RyZWFtIHx8ICFzdGF0KSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBpbXBvcnQoXCJmc1wiKS50aGVuKChmcykgPT4ge1xuICAgICAgICAgICAgICBjcmVhdGVSZWFkU3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbTtcbiAgICAgICAgICAgICAgcmV0dXJuIGZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuc3RhdHMgPSBpbXBvcnQoXCJmcy9wcm9taXNlc1wiKS50aGVuKChmcykgPT4ge1xuICAgICAgICAgICAgICBzdGF0ID0gZnMuc3RhdDtcbiAgICAgICAgICAgICAgcmV0dXJuIGZzLnN0YXQocGF0aCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy52YWx1ZSA9IGNyZWF0ZVJlYWRTdHJlYW0ocGF0aCk7XG4gICAgICAgICAgdGhpcy5zdGF0cyA9IHN0YXQocGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIG1pbWVbZ2V0RmlsZUV4dGVuc2lvbih0aGlzLnBhdGgpXSB8fCBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiXG4gICAgKTtcbiAgfVxuICBnZXQgbGVuZ3RoKCkge1xuICAgIGlmIChpc0J1bikgcmV0dXJuIHRoaXMudmFsdWUuc2l6ZTtcbiAgICByZXR1cm4gdGhpcy5zdGF0cz8udGhlbigoeCkgPT4geC5zaXplKSA/PyAwO1xuICB9XG59XG5leHBvcnQge1xuICBFbHlzaWFGaWxlLFxuICBmaWxlLFxuICBnZXRGaWxlRXh0ZW5zaW9uLFxuICBtaW1lXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/universal/file.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/universal/utils.mjs":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/universal/utils.mjs ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBun: () => (/* binding */ isBun),\n/* harmony export */   isDeno: () => (/* binding */ isDeno)\n/* harmony export */ });\nconst isBun = typeof Bun !== \"undefined\";\nconst isDeno = typeof Deno !== \"undefined\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vZWx5c2lhQDEuMi4yNV9Ac2luY2xhaXIrdHlwZWJveEAwLjM0LjMzX3R5cGVzY3JpcHRANS44LjMvbm9kZV9tb2R1bGVzL2VseXNpYS9kaXN0L3VuaXZlcnNhbC91dGlscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBSUUiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbG9saGFcXERlc2t0b3BcXERFVlxcY29kaW5nLmdsb2JhbC13ZWJcXG5vZGVfbW9kdWxlc1xcLnBucG1cXGVseXNpYUAxLjIuMjVfQHNpbmNsYWlyK3R5cGVib3hAMC4zNC4zM190eXBlc2NyaXB0QDUuOC4zXFxub2RlX21vZHVsZXNcXGVseXNpYVxcZGlzdFxcdW5pdmVyc2FsXFx1dGlscy5tanN8cnNjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGlzQnVuID0gdHlwZW9mIEJ1biAhPT0gXCJ1bmRlZmluZWRcIjtcbmNvbnN0IGlzRGVubyA9IHR5cGVvZiBEZW5vICE9PSBcInVuZGVmaW5lZFwiO1xuZXhwb3J0IHtcbiAgaXNCdW4sXG4gIGlzRGVub1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/universal/utils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/utils.mjs":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/utils.mjs ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ELYSIA_FORM_DATA: () => (/* binding */ ELYSIA_FORM_DATA),\n/* harmony export */   ELYSIA_REQUEST_ID: () => (/* binding */ ELYSIA_REQUEST_ID),\n/* harmony export */   InvertedStatusMap: () => (/* binding */ InvertedStatusMap),\n/* harmony export */   PromiseGroup: () => (/* binding */ PromiseGroup),\n/* harmony export */   StatusMap: () => (/* binding */ StatusMap),\n/* harmony export */   asHookType: () => (/* binding */ asHookType),\n/* harmony export */   checksum: () => (/* binding */ checksum),\n/* harmony export */   cloneInference: () => (/* binding */ cloneInference),\n/* harmony export */   coercePrimitiveRoot: () => (/* binding */ coercePrimitiveRoot),\n/* harmony export */   compressHistoryHook: () => (/* binding */ compressHistoryHook),\n/* harmony export */   createMacroManager: () => (/* binding */ createMacroManager),\n/* harmony export */   decompressHistoryHook: () => (/* binding */ decompressHistoryHook),\n/* harmony export */   deduplicateChecksum: () => (/* binding */ deduplicateChecksum),\n/* harmony export */   encodePath: () => (/* binding */ encodePath),\n/* harmony export */   filterGlobalHook: () => (/* binding */ filterGlobalHook),\n/* harmony export */   fnToContainer: () => (/* binding */ fnToContainer),\n/* harmony export */   form: () => (/* binding */ form),\n/* harmony export */   getCookieValidator: () => (/* binding */ getCookieValidator),\n/* harmony export */   getLoosePath: () => (/* binding */ getLoosePath),\n/* harmony export */   getResponseSchemaValidator: () => (/* binding */ getResponseSchemaValidator),\n/* harmony export */   getSchemaValidator: () => (/* binding */ getSchemaValidator),\n/* harmony export */   hasHeaderShorthand: () => (/* binding */ hasHeaderShorthand),\n/* harmony export */   injectChecksum: () => (/* binding */ injectChecksum),\n/* harmony export */   isClass: () => (/* binding */ isClass),\n/* harmony export */   isNotEmpty: () => (/* binding */ isNotEmpty),\n/* harmony export */   isNumericString: () => (/* binding */ isNumericString),\n/* harmony export */   lifeCycleToFn: () => (/* binding */ lifeCycleToFn),\n/* harmony export */   localHookToLifeCycleStore: () => (/* binding */ localHookToLifeCycleStore),\n/* harmony export */   mergeCookie: () => (/* binding */ mergeCookie),\n/* harmony export */   mergeDeep: () => (/* binding */ mergeDeep),\n/* harmony export */   mergeHook: () => (/* binding */ mergeHook),\n/* harmony export */   mergeLifeCycle: () => (/* binding */ mergeLifeCycle),\n/* harmony export */   mergeObjectArray: () => (/* binding */ mergeObjectArray),\n/* harmony export */   mergeResponse: () => (/* binding */ mergeResponse),\n/* harmony export */   mergeSchemaValidator: () => (/* binding */ mergeSchemaValidator),\n/* harmony export */   primitiveHooks: () => (/* binding */ primitiveHooks),\n/* harmony export */   promoteEvent: () => (/* binding */ promoteEvent),\n/* harmony export */   randomId: () => (/* binding */ randomId),\n/* harmony export */   redirect: () => (/* binding */ redirect),\n/* harmony export */   replaceSchemaType: () => (/* binding */ replaceSchemaType),\n/* harmony export */   replaceUrlPath: () => (/* binding */ replaceUrlPath),\n/* harmony export */   signCookie: () => (/* binding */ signCookie),\n/* harmony export */   stringToStructureCoercions: () => (/* binding */ stringToStructureCoercions),\n/* harmony export */   traceBackMacro: () => (/* binding */ traceBackMacro),\n/* harmony export */   unsignCookie: () => (/* binding */ unsignCookie)\n/* harmony export */ });\n/* harmony import */ var _sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sinclair/typebox */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/type/symbols/symbols.mjs\");\n/* harmony import */ var _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sinclair/typebox/value */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/value/create/create.mjs\");\n/* harmony import */ var _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sinclair/typebox/value */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/value/clean/clean.mjs\");\n/* harmony import */ var _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sinclair/typebox/value */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/value/check/check.mjs\");\n/* harmony import */ var _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sinclair/typebox/value */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/errors/errors.mjs\");\n/* harmony import */ var _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sinclair/typebox/value */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/value/decode/decode.mjs\");\n/* harmony import */ var _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sinclair/typebox/value */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/value/encode/encode.mjs\");\n/* harmony import */ var _sinclair_typebox_compiler__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sinclair/typebox/compiler */ \"(rsc)/./node_modules/.pnpm/@sinclair+typebox@0.34.33/node_modules/@sinclair/typebox/build/esm/compiler/compiler.mjs\");\n/* harmony import */ var _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./type-system.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/type-system.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/error.mjs\");\n\n\n\n\n\nconst hasHeaderShorthand = \"toJSON\" in new Headers();\nconst replaceUrlPath = (url, pathname) => {\n  const urlObject = new URL(url);\n  urlObject.pathname = pathname;\n  return urlObject.toString();\n};\nconst isClass = (v) => typeof v === \"function\" && /^\\s*class\\s+/.test(v.toString()) || // Handle Object.create(null)\nv.toString && // Handle import * as Sentry from '@sentry/bun'\n// This also handle [object Date], [object Array]\n// and FFI value like [object Prisma]\nv.toString().startsWith(\"[object \") && v.toString() !== \"[object Object]\" || // If object prototype is not pure, then probably a class-like object\nisNotEmpty(Object.getPrototypeOf(v));\nconst isObject = (item) => item && typeof item === \"object\" && !Array.isArray(item);\nconst mergeDeep = (target, source, {\n  skipKeys,\n  override = true\n} = {}) => {\n  if (!isObject(target) || !isObject(source)) return target;\n  for (const [key, value] of Object.entries(source)) {\n    if (skipKeys?.includes(key)) continue;\n    if (!isObject(value) || !(key in target) || isClass(value)) {\n      if (override || !(key in target))\n        target[key] = value;\n      continue;\n    }\n    target[key] = mergeDeep(\n      target[key],\n      value,\n      { skipKeys, override }\n    );\n  }\n  return target;\n};\nconst mergeCookie = (a, b) => {\n  const v = mergeDeep(Object.assign({}, a), b, {\n    skipKeys: [\"properties\"]\n  });\n  if (\"properties\" in v) delete v.properties;\n  return v;\n};\nconst mergeObjectArray = (a = [], b = []) => {\n  if (!a) return void 0;\n  if (!b) return a;\n  const array = [];\n  const checksums = [];\n  if (!Array.isArray(a)) a = [a];\n  if (!Array.isArray(b)) b = [b];\n  for (const item of a) {\n    array.push(item);\n    if (item.checksum) checksums.push(item.checksum);\n  }\n  for (const item of b)\n    if (!checksums.includes(item.checksum)) array.push(item);\n  return array;\n};\nconst primitiveHooks = [\n  \"start\",\n  \"request\",\n  \"parse\",\n  \"transform\",\n  \"resolve\",\n  \"beforeHandle\",\n  \"afterHandle\",\n  \"mapResponse\",\n  \"afterResponse\",\n  \"trace\",\n  \"error\",\n  \"stop\",\n  \"body\",\n  \"headers\",\n  \"params\",\n  \"query\",\n  \"response\",\n  \"type\",\n  \"detail\"\n];\nconst primitiveHookMap = primitiveHooks.reduce(\n  (acc, x) => (acc[x] = true, acc),\n  {}\n);\nconst mergeResponse = (a, b) => {\n  const isRecordNumber = (x) => typeof x === \"object\" && Object.keys(x).every(isNumericString);\n  if (isRecordNumber(a) && isRecordNumber(b)) return Object.assign(a, b);\n  else if (a && !isRecordNumber(a) && isRecordNumber(b))\n    return Object.assign({ 200: a }, b);\n  return b ?? a;\n};\nconst mergeSchemaValidator = (a, b) => {\n  return {\n    body: b?.body ?? a?.body,\n    headers: b?.headers ?? a?.headers,\n    params: b?.params ?? a?.params,\n    query: b?.query ?? a?.query,\n    cookie: b?.cookie ?? a?.cookie,\n    // @ts-ignore ? This order is correct - SaltyAom\n    response: mergeResponse(\n      // @ts-ignore\n      a?.response,\n      // @ts-ignore\n      b?.response\n    )\n  };\n};\nconst mergeHook = (a, b) => {\n  const { resolve: resolveA, ...restA } = a ?? {};\n  const { resolve: resolveB, ...restB } = b ?? {};\n  return {\n    ...restA,\n    ...restB,\n    // Merge local hook first\n    // @ts-ignore\n    body: b?.body ?? a?.body,\n    // @ts-ignore\n    headers: b?.headers ?? a?.headers,\n    // @ts-ignore\n    params: b?.params ?? a?.params,\n    // @ts-ignore\n    query: b?.query ?? a?.query,\n    // @ts-ignore\n    cookie: b?.cookie ?? a?.cookie,\n    // ? This order is correct - SaltyAom\n    response: mergeResponse(\n      // @ts-ignore\n      a?.response,\n      // @ts-ignore\n      b?.response\n    ),\n    type: a?.type || b?.type,\n    detail: mergeDeep(\n      // @ts-ignore\n      b?.detail ?? {},\n      // @ts-ignore\n      a?.detail ?? {}\n    ),\n    parse: mergeObjectArray(a?.parse, b?.parse),\n    transform: mergeObjectArray(a?.transform, b?.transform),\n    beforeHandle: mergeObjectArray(\n      mergeObjectArray(\n        fnToContainer(resolveA, \"resolve\"),\n        a?.beforeHandle\n      ),\n      mergeObjectArray(\n        fnToContainer(resolveB, \"resolve\"),\n        b?.beforeHandle\n      )\n    ),\n    afterHandle: mergeObjectArray(a?.afterHandle, b?.afterHandle),\n    mapResponse: mergeObjectArray(a?.mapResponse, b?.mapResponse),\n    afterResponse: mergeObjectArray(\n      a?.afterResponse,\n      b?.afterResponse\n    ),\n    trace: mergeObjectArray(a?.trace, b?.trace),\n    error: mergeObjectArray(a?.error, b?.error)\n  };\n};\nconst replaceSchemaType = (schema, options, root = true) => {\n  if (!Array.isArray(options)) {\n    options.original = schema;\n    return _replaceSchemaType(schema, options, root);\n  }\n  for (const option of options) {\n    option.original = schema;\n    schema = _replaceSchemaType(schema, option, root);\n  }\n  return schema;\n};\nconst _replaceSchemaType = (schema, options, root = true) => {\n  if (!schema) return schema;\n  if (options.untilObjectFound && !root && schema.type === \"object\")\n    return schema;\n  const fromSymbol = options.from[_sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Kind];\n  if (schema.oneOf) {\n    for (let i = 0; i < schema.oneOf.length; i++)\n      schema.oneOf[i] = _replaceSchemaType(schema.oneOf[i], options, root);\n    return schema;\n  }\n  if (schema.anyOf) {\n    for (let i = 0; i < schema.anyOf.length; i++)\n      schema.anyOf[i] = _replaceSchemaType(schema.anyOf[i], options, root);\n    return schema;\n  }\n  if (schema.allOf) {\n    for (let i = 0; i < schema.allOf.length; i++)\n      schema.allOf[i] = _replaceSchemaType(schema.allOf[i], options, root);\n    return schema;\n  }\n  if (schema.not) return _replaceSchemaType(schema.not, options, root);\n  const isRoot = root && !!options.excludeRoot;\n  if (schema[_sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Kind] === fromSymbol) {\n    const { anyOf, oneOf, allOf, not, properties: properties2, items, ...rest } = schema;\n    const to = options.to(rest);\n    if (!to) return schema;\n    let transform;\n    const composeProperties = (v) => {\n      if (properties2 && v.type === \"object\") {\n        const newProperties = {};\n        for (const [key, value2] of Object.entries(properties2))\n          newProperties[key] = _replaceSchemaType(\n            value2,\n            options,\n            false\n          );\n        return {\n          ...rest,\n          ...v,\n          properties: newProperties\n        };\n      }\n      if (items && v.type === \"array\")\n        return {\n          ...rest,\n          ...v,\n          items: _replaceSchemaType(items, options, false)\n        };\n      const value = {\n        ...rest,\n        ...v\n      };\n      delete value[\"required\"];\n      if (properties2 && v.type === \"string\" && v.format === \"ObjectString\" && v.default === \"{}\") {\n        transform = _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.ObjectString(properties2, rest);\n        value.default = JSON.stringify(\n          _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_3__.Create(_type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Object(properties2))\n        );\n        value.properties = properties2;\n      }\n      if (items && v.type === \"string\" && v.format === \"ArrayString\" && v.default === \"[]\") {\n        transform = _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.ArrayString(items, rest);\n        value.default = JSON.stringify(_sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_3__.Create(_type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Array(items)));\n        value.items = items;\n      }\n      return value;\n    };\n    if (isRoot) {\n      if (properties2) {\n        const newProperties = {};\n        for (const [key, value] of Object.entries(properties2))\n          newProperties[key] = _replaceSchemaType(\n            value,\n            options,\n            false\n          );\n        return {\n          ...rest,\n          properties: newProperties\n        };\n      } else if (items?.map)\n        return {\n          ...rest,\n          items: items.map(\n            (v) => _replaceSchemaType(v, options, false)\n          )\n        };\n      return rest;\n    }\n    if (to.anyOf)\n      for (let i = 0; i < to.anyOf.length; i++)\n        to.anyOf[i] = composeProperties(to.anyOf[i]);\n    else if (to.oneOf)\n      for (let i = 0; i < to.oneOf.length; i++)\n        to.oneOf[i] = composeProperties(to.oneOf[i]);\n    else if (to.allOf)\n      for (let i = 0; i < to.allOf.length; i++)\n        to.allOf[i] = composeProperties(to.allOf[i]);\n    else if (to.not) to.not = composeProperties(to.not);\n    if (transform) to[_sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.TransformKind] = transform[_sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.TransformKind];\n    if (to.anyOf || to.oneOf || to.allOf || to.not) return to;\n    if (properties2) {\n      const newProperties = {};\n      for (const [key, value] of Object.entries(properties2))\n        newProperties[key] = _replaceSchemaType(\n          value,\n          options,\n          false\n        );\n      return {\n        ...rest,\n        ...to,\n        properties: newProperties\n      };\n    } else if (items?.map)\n      return {\n        ...rest,\n        ...to,\n        items: items.map(\n          (v) => _replaceSchemaType(v, options, false)\n        )\n      };\n    return {\n      ...rest,\n      ...to\n    };\n  }\n  const properties = schema?.properties;\n  if (properties && root && options.rootOnly !== true)\n    for (const [key, value] of Object.entries(properties)) {\n      switch (value[_sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Kind]) {\n        case fromSymbol:\n          const { anyOf, oneOf, allOf, not, type, ...rest } = value;\n          const to = options.to(rest);\n          if (!to) return schema;\n          if (to.anyOf)\n            for (let i = 0; i < to.anyOf.length; i++)\n              to.anyOf[i] = { ...rest, ...to.anyOf[i] };\n          else if (to.oneOf)\n            for (let i = 0; i < to.oneOf.length; i++)\n              to.oneOf[i] = { ...rest, ...to.oneOf[i] };\n          else if (to.allOf)\n            for (let i = 0; i < to.allOf.length; i++)\n              to.allOf[i] = { ...rest, ...to.allOf[i] };\n          else if (to.not) to.not = { ...rest, ...to.not };\n          properties[key] = {\n            ...rest,\n            ..._replaceSchemaType(rest, options, false)\n          };\n          break;\n        case \"Object\":\n        case \"Union\":\n          properties[key] = _replaceSchemaType(value, options, false);\n          break;\n        default:\n          if (Array.isArray(value.items)) {\n            for (let i = 0; i < value.items.length; i++) {\n              value.items[i] = _replaceSchemaType(\n                value.items[i],\n                options,\n                false\n              );\n            }\n          } else if (value.anyOf || value.oneOf || value.allOf || value.not)\n            properties[key] = _replaceSchemaType(\n              value,\n              options,\n              false\n            );\n          else if (value.type === \"array\") {\n            value.items = _replaceSchemaType(\n              value.items,\n              options,\n              false\n            );\n          }\n          break;\n      }\n    }\n  return schema;\n};\nconst createCleaner = (schema) => (value) => {\n  if (typeof value === \"object\")\n    try {\n      return _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_4__.Clean(schema, structuredClone(value));\n    } catch {\n      try {\n        return _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_4__.Clean(schema, value);\n      } catch {\n        return value;\n      }\n    }\n  return value;\n};\nconst getSchemaValidator = (s, {\n  models = {},\n  dynamic = false,\n  modules,\n  normalize = false,\n  additionalProperties = false,\n  coerce = false,\n  additionalCoerce = []\n} = {\n  modules: _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Module({})\n}) => {\n  if (!s) return void 0;\n  let schema;\n  if (typeof s !== \"string\") schema = s;\n  else {\n    const isArray = s.endsWith(\"[]\");\n    const key = isArray ? s.substring(0, s.length - 2) : s;\n    schema = modules.Import(key) ?? models[key];\n    if (isArray) schema = _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Array(schema);\n  }\n  if (!schema) return void 0;\n  if (coerce || additionalCoerce) {\n    if (coerce)\n      schema = replaceSchemaType(schema, [\n        {\n          from: _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Ref(\"\"),\n          // @ts-expect-error\n          to: (options) => modules.Import(options[\"$ref\"])\n        },\n        {\n          from: _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Number(),\n          to: (options) => _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Numeric(options),\n          untilObjectFound: true\n        },\n        {\n          from: _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Boolean(),\n          to: (options) => _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.BooleanString(options),\n          untilObjectFound: true\n        },\n        ...Array.isArray(additionalCoerce) ? additionalCoerce : [additionalCoerce]\n      ]);\n    else {\n      schema = replaceSchemaType(schema, [\n        {\n          from: _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Ref(\"\"),\n          // @ts-expect-error\n          to: (options) => modules.Import(options[\"$ref\"])\n        },\n        ...Array.isArray(additionalCoerce) ? additionalCoerce : [additionalCoerce]\n      ]);\n    }\n  }\n  if (schema.type === \"object\" && \"additionalProperties\" in schema === false)\n    schema.additionalProperties = additionalProperties;\n  if (dynamic) {\n    const validator = {\n      schema,\n      references: \"\",\n      checkFunc: () => {\n      },\n      code: \"\",\n      Check: (value) => _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_5__.Check(schema, value),\n      Errors: (value) => _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_6__.Errors(schema, value),\n      Code: () => \"\",\n      Clean: createCleaner(schema),\n      Decode: (value) => _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_7__.Decode(schema, value),\n      Encode: (value) => _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_8__.Encode(schema, value)\n    };\n    if (normalize && schema.additionalProperties === false)\n      validator.Clean = createCleaner(schema);\n    if (schema.config) {\n      validator.config = schema.config;\n      if (validator?.schema?.config)\n        delete validator.schema.config;\n    }\n    validator.parse = (v) => {\n      try {\n        return validator.Decode(v);\n      } catch (error) {\n        throw [...validator.Errors(v)].map(_error_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValueError);\n      }\n    };\n    validator.safeParse = (v) => {\n      try {\n        return { success: true, data: validator.Decode(v), error: null };\n      } catch (error) {\n        const errors = [...compiled.Errors(v)].map(_error_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValueError);\n        return {\n          success: false,\n          data: null,\n          error: errors[0]?.summary,\n          errors\n        };\n      }\n    };\n    return validator;\n  }\n  const compiled = _sinclair_typebox_compiler__WEBPACK_IMPORTED_MODULE_9__.TypeCompiler.Compile(schema, Object.values(models));\n  compiled.Clean = createCleaner(schema);\n  if (schema.config) {\n    compiled.config = schema.config;\n    if (compiled?.schema?.config)\n      delete compiled.schema.config;\n  }\n  compiled.parse = (v) => {\n    try {\n      return compiled.Decode(v);\n    } catch (error) {\n      throw [...compiled.Errors(v)].map(_error_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValueError);\n    }\n  };\n  compiled.safeParse = (v) => {\n    try {\n      return { success: true, data: compiled.Decode(v), error: null };\n    } catch (error) {\n      const errors = [...compiled.Errors(v)].map(_error_mjs__WEBPACK_IMPORTED_MODULE_1__.mapValueError);\n      return {\n        success: false,\n        data: null,\n        error: errors[0]?.summary,\n        errors\n      };\n    }\n  };\n  return compiled;\n};\nconst getResponseSchemaValidator = (s, {\n  models = {},\n  modules,\n  dynamic = false,\n  normalize = false,\n  additionalProperties = false\n}) => {\n  if (!s) return;\n  let maybeSchemaOrRecord;\n  if (typeof s !== \"string\") maybeSchemaOrRecord = s;\n  else {\n    const isArray = s.endsWith(\"[]\");\n    const key = isArray ? s.substring(0, s.length - 2) : s;\n    maybeSchemaOrRecord = modules.Import(key) ?? models[key];\n    if (isArray)\n      maybeSchemaOrRecord = _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Array(maybeSchemaOrRecord);\n  }\n  if (!maybeSchemaOrRecord) return;\n  const compile = (schema, references) => {\n    if (dynamic)\n      return {\n        schema,\n        references: \"\",\n        checkFunc: () => {\n        },\n        code: \"\",\n        Check: (value) => _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_5__.Check(schema, value),\n        Errors: (value) => _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_6__.Errors(schema, value),\n        Code: () => \"\",\n        Clean: createCleaner(schema),\n        Decode: (value) => _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_7__.Decode(schema, value),\n        Encode: (value) => _sinclair_typebox_value__WEBPACK_IMPORTED_MODULE_8__.Encode(schema, value)\n      };\n    const compiledValidator = _sinclair_typebox_compiler__WEBPACK_IMPORTED_MODULE_9__.TypeCompiler.Compile(schema, references);\n    if (normalize && schema.additionalProperties === false)\n      compiledValidator.Clean = createCleaner(schema);\n    return compiledValidator;\n  };\n  const modelValues = Object.values(models);\n  if (_sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Kind in maybeSchemaOrRecord) {\n    if (\"additionalProperties\" in maybeSchemaOrRecord === false)\n      maybeSchemaOrRecord.additionalProperties = additionalProperties;\n    return {\n      200: compile(maybeSchemaOrRecord, modelValues)\n    };\n  }\n  const record = {};\n  Object.keys(maybeSchemaOrRecord).forEach((status) => {\n    const maybeNameOrSchema = maybeSchemaOrRecord[+status];\n    if (typeof maybeNameOrSchema === \"string\") {\n      if (maybeNameOrSchema in models) {\n        const schema = models[maybeNameOrSchema];\n        schema.type === \"object\" && \"additionalProperties\" in schema === false;\n        record[+status] = _sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Kind in schema ? compile(schema, modelValues) : schema;\n      }\n      return void 0;\n    }\n    if (maybeNameOrSchema.type === \"object\" && \"additionalProperties\" in maybeNameOrSchema === false)\n      maybeNameOrSchema.additionalProperties = additionalProperties;\n    record[+status] = _sinclair_typebox__WEBPACK_IMPORTED_MODULE_2__.Kind in maybeNameOrSchema ? compile(maybeNameOrSchema, modelValues) : maybeNameOrSchema;\n  });\n  return record;\n};\nconst isBun = typeof Bun !== \"undefined\";\nconst hasHash = isBun && typeof Bun.hash === \"function\";\nconst checksum = (s) => {\n  if (hasHash) return Bun.hash(s);\n  let h = 9;\n  for (let i = 0; i < s.length; ) h = Math.imul(h ^ s.charCodeAt(i++), 9 ** 9);\n  return h = h ^ h >>> 9;\n};\nlet _stringToStructureCoercions;\nconst stringToStructureCoercions = () => {\n  if (!_stringToStructureCoercions) {\n    _stringToStructureCoercions = [\n      {\n        from: _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Object({}),\n        to: () => _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.ObjectString({}),\n        excludeRoot: true\n      },\n      {\n        from: _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Array(_type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Any()),\n        to: () => _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.ArrayString(_type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Any())\n      }\n    ];\n  }\n  return _stringToStructureCoercions;\n};\nlet _coercePrimitiveRoot;\nconst coercePrimitiveRoot = () => {\n  if (!_coercePrimitiveRoot)\n    _coercePrimitiveRoot = [\n      {\n        from: _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Number(),\n        to: (options) => _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Numeric(options),\n        rootOnly: true\n      },\n      {\n        from: _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Boolean(),\n        to: (options) => _type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.BooleanString(options),\n        rootOnly: true\n      }\n    ];\n  return _coercePrimitiveRoot;\n};\nconst getCookieValidator = ({\n  validator,\n  modules,\n  defaultConfig = {},\n  config,\n  dynamic,\n  models\n}) => {\n  let cookieValidator = getSchemaValidator(validator, {\n    modules,\n    dynamic,\n    models,\n    additionalProperties: true,\n    coerce: true,\n    additionalCoerce: stringToStructureCoercions()\n  });\n  if (isNotEmpty(defaultConfig)) {\n    if (cookieValidator) {\n      cookieValidator.config = mergeCookie(\n        // @ts-expect-error private\n        cookieValidator.config,\n        config\n      );\n    } else {\n      cookieValidator = getSchemaValidator(_type_system_mjs__WEBPACK_IMPORTED_MODULE_0__.t.Cookie({}), {\n        modules,\n        dynamic,\n        models,\n        additionalProperties: true\n      });\n      cookieValidator.config = defaultConfig;\n    }\n  }\n  return cookieValidator;\n};\nconst injectChecksum = (checksum2, x) => {\n  if (!x) return;\n  if (!Array.isArray(x)) {\n    const fn = x;\n    if (checksum2 && !fn.checksum) fn.checksum = checksum2;\n    if (fn.scope === \"scoped\") fn.scope = \"local\";\n    return fn;\n  }\n  const fns = [...x];\n  for (const fn of fns) {\n    if (checksum2 && !fn.checksum) fn.checksum = checksum2;\n    if (fn.scope === \"scoped\") fn.scope = \"local\";\n  }\n  return fns;\n};\nconst mergeLifeCycle = (a, b, checksum2) => {\n  return {\n    start: mergeObjectArray(\n      a.start,\n      injectChecksum(checksum2, b?.start)\n    ),\n    request: mergeObjectArray(\n      a.request,\n      injectChecksum(checksum2, b?.request)\n    ),\n    parse: mergeObjectArray(\n      a.parse,\n      injectChecksum(checksum2, b?.parse)\n    ),\n    transform: mergeObjectArray(\n      a.transform,\n      injectChecksum(checksum2, b?.transform)\n    ),\n    beforeHandle: mergeObjectArray(\n      mergeObjectArray(\n        // @ts-ignore\n        fnToContainer(a.resolve, \"resolve\"),\n        a.beforeHandle\n      ),\n      injectChecksum(\n        checksum2,\n        mergeObjectArray(\n          fnToContainer(b?.resolve, \"resolve\"),\n          b?.beforeHandle\n        )\n      )\n    ),\n    afterHandle: mergeObjectArray(\n      a.afterHandle,\n      injectChecksum(checksum2, b?.afterHandle)\n    ),\n    mapResponse: mergeObjectArray(\n      a.mapResponse,\n      injectChecksum(checksum2, b?.mapResponse)\n    ),\n    afterResponse: mergeObjectArray(\n      a.afterResponse,\n      injectChecksum(checksum2, b?.afterResponse)\n    ),\n    // Already merged on Elysia._use, also logic is more complicated, can't directly merge\n    trace: mergeObjectArray(\n      a.trace,\n      injectChecksum(checksum2, b?.trace)\n    ),\n    error: mergeObjectArray(\n      a.error,\n      injectChecksum(checksum2, b?.error)\n    ),\n    stop: mergeObjectArray(\n      a.stop,\n      injectChecksum(checksum2, b?.stop)\n    )\n  };\n};\nconst asHookType = (fn, inject, { skipIfHasType = false } = {}) => {\n  if (!fn) return fn;\n  if (!Array.isArray(fn)) {\n    if (skipIfHasType) fn.scope ??= inject;\n    else fn.scope = inject;\n    return fn;\n  }\n  for (const x of fn)\n    if (skipIfHasType) x.scope ??= inject;\n    else x.scope = inject;\n  return fn;\n};\nconst filterGlobal = (fn) => {\n  if (!fn) return fn;\n  if (!Array.isArray(fn))\n    switch (fn.scope) {\n      case \"global\":\n      case \"scoped\":\n        return { ...fn };\n      default:\n        return { fn };\n    }\n  const array = [];\n  for (const x of fn)\n    switch (x.scope) {\n      case \"global\":\n      case \"scoped\":\n        array.push({\n          ...x\n        });\n        break;\n    }\n  return array;\n};\nconst filterGlobalHook = (hook) => {\n  return {\n    // rest is validator\n    ...hook,\n    type: hook?.type,\n    detail: hook?.detail,\n    parse: filterGlobal(hook?.parse),\n    transform: filterGlobal(hook?.transform),\n    beforeHandle: filterGlobal(hook?.beforeHandle),\n    afterHandle: filterGlobal(hook?.afterHandle),\n    mapResponse: filterGlobal(hook?.mapResponse),\n    afterResponse: filterGlobal(hook?.afterResponse),\n    error: filterGlobal(hook?.error),\n    trace: filterGlobal(hook?.trace)\n  };\n};\nconst StatusMap = {\n  Continue: 100,\n  \"Switching Protocols\": 101,\n  Processing: 102,\n  \"Early Hints\": 103,\n  OK: 200,\n  Created: 201,\n  Accepted: 202,\n  \"Non-Authoritative Information\": 203,\n  \"No Content\": 204,\n  \"Reset Content\": 205,\n  \"Partial Content\": 206,\n  \"Multi-Status\": 207,\n  \"Already Reported\": 208,\n  \"Multiple Choices\": 300,\n  \"Moved Permanently\": 301,\n  Found: 302,\n  \"See Other\": 303,\n  \"Not Modified\": 304,\n  \"Temporary Redirect\": 307,\n  \"Permanent Redirect\": 308,\n  \"Bad Request\": 400,\n  Unauthorized: 401,\n  \"Payment Required\": 402,\n  Forbidden: 403,\n  \"Not Found\": 404,\n  \"Method Not Allowed\": 405,\n  \"Not Acceptable\": 406,\n  \"Proxy Authentication Required\": 407,\n  \"Request Timeout\": 408,\n  Conflict: 409,\n  Gone: 410,\n  \"Length Required\": 411,\n  \"Precondition Failed\": 412,\n  \"Payload Too Large\": 413,\n  \"URI Too Long\": 414,\n  \"Unsupported Media Type\": 415,\n  \"Range Not Satisfiable\": 416,\n  \"Expectation Failed\": 417,\n  \"I'm a teapot\": 418,\n  \"Misdirected Request\": 421,\n  \"Unprocessable Content\": 422,\n  Locked: 423,\n  \"Failed Dependency\": 424,\n  \"Too Early\": 425,\n  \"Upgrade Required\": 426,\n  \"Precondition Required\": 428,\n  \"Too Many Requests\": 429,\n  \"Request Header Fields Too Large\": 431,\n  \"Unavailable For Legal Reasons\": 451,\n  \"Internal Server Error\": 500,\n  \"Not Implemented\": 501,\n  \"Bad Gateway\": 502,\n  \"Service Unavailable\": 503,\n  \"Gateway Timeout\": 504,\n  \"HTTP Version Not Supported\": 505,\n  \"Variant Also Negotiates\": 506,\n  \"Insufficient Storage\": 507,\n  \"Loop Detected\": 508,\n  \"Not Extended\": 510,\n  \"Network Authentication Required\": 511\n};\nconst InvertedStatusMap = Object.fromEntries(\n  Object.entries(StatusMap).map(([k, v]) => [v, k])\n);\nfunction removeTrailingEquals(digest) {\n  let trimmedDigest = digest;\n  while (trimmedDigest.endsWith(\"=\")) {\n    trimmedDigest = trimmedDigest.slice(0, -1);\n  }\n  return trimmedDigest;\n}\nconst encoder = new TextEncoder();\nconst signCookie = async (val, secret) => {\n  if (typeof val !== \"string\")\n    throw new TypeError(\"Cookie value must be provided as a string.\");\n  if (secret === null) throw new TypeError(\"Secret key must be provided.\");\n  const secretKey = await crypto.subtle.importKey(\n    \"raw\",\n    encoder.encode(secret),\n    { name: \"HMAC\", hash: \"SHA-256\" },\n    false,\n    [\"sign\"]\n  );\n  const hmacBuffer = await crypto.subtle.sign(\n    \"HMAC\",\n    secretKey,\n    encoder.encode(val)\n  );\n  return val + \".\" + removeTrailingEquals(Buffer.from(hmacBuffer).toString(\"base64\"));\n};\nconst unsignCookie = async (input, secret) => {\n  if (typeof input !== \"string\")\n    throw new TypeError(\"Signed cookie string must be provided.\");\n  if (null === secret) throw new TypeError(\"Secret key must be provided.\");\n  const tentativeValue = input.slice(0, input.lastIndexOf(\".\"));\n  const expectedInput = await signCookie(tentativeValue, secret);\n  return expectedInput === input ? tentativeValue : false;\n};\nconst traceBackMacro = (extension, property, manage) => {\n  if (!extension || typeof extension !== \"object\" || !property) return;\n  for (const [key, value] of Object.entries(property)) {\n    if (key in primitiveHookMap || !(key in extension)) continue;\n    const v = extension[key];\n    if (typeof v === \"function\") {\n      const hook = v(value);\n      if (typeof hook === \"object\") {\n        for (const [k, v2] of Object.entries(hook)) {\n          manage(k)({\n            fn: v2\n          });\n        }\n      }\n    }\n    delete property[key];\n  }\n};\nconst createMacroManager = ({\n  globalHook,\n  localHook\n}) => (stackName) => (type, fn) => {\n  if (typeof type === \"function\")\n    type = {\n      fn: type\n    };\n  if (stackName === \"resolve\") {\n    type = {\n      ...type,\n      subType: \"resolve\"\n    };\n  }\n  if (\"fn\" in type || Array.isArray(type)) {\n    if (!localHook[stackName]) localHook[stackName] = [];\n    if (typeof localHook[stackName] === \"function\")\n      localHook[stackName] = [localHook[stackName]];\n    if (Array.isArray(type))\n      localHook[stackName] = localHook[stackName].concat(type);\n    else localHook[stackName].push(type);\n    return;\n  }\n  const { insert = \"after\", stack = \"local\" } = type;\n  if (typeof fn === \"function\") fn = { fn };\n  if (stack === \"global\") {\n    if (!Array.isArray(fn)) {\n      if (insert === \"before\") {\n        ;\n        globalHook[stackName].unshift(fn);\n      } else {\n        ;\n        globalHook[stackName].push(fn);\n      }\n    } else {\n      if (insert === \"before\") {\n        globalHook[stackName] = fn.concat(\n          globalHook[stackName]\n        );\n      } else {\n        globalHook[stackName] = globalHook[stackName].concat(fn);\n      }\n    }\n  } else {\n    if (!localHook[stackName]) localHook[stackName] = [];\n    if (typeof localHook[stackName] === \"function\")\n      localHook[stackName] = [localHook[stackName]];\n    if (!Array.isArray(fn)) {\n      if (insert === \"before\") {\n        ;\n        localHook[stackName].unshift(fn);\n      } else {\n        ;\n        localHook[stackName].push(fn);\n      }\n    } else {\n      if (insert === \"before\") {\n        localHook[stackName] = fn.concat(localHook[stackName]);\n      } else {\n        localHook[stackName] = localHook[stackName].concat(fn);\n      }\n    }\n  }\n};\nconst parseNumericString = (message) => {\n  if (typeof message === \"number\") return message;\n  if (message.length < 16) {\n    if (message.trim().length === 0) return null;\n    const length = Number(message);\n    if (Number.isNaN(length)) return null;\n    return length;\n  }\n  if (message.length === 16) {\n    if (message.trim().length === 0) return null;\n    const number = Number(message);\n    if (Number.isNaN(number) || number.toString() !== message) return null;\n    return number;\n  }\n  return null;\n};\nconst isNumericString = (message) => parseNumericString(message) !== null;\nclass PromiseGroup {\n  constructor(onError = console.error) {\n    this.onError = onError;\n    this.root = null;\n    this.promises = [];\n  }\n  /**\n   * The number of promises still being awaited.\n   */\n  get size() {\n    return this.promises.length;\n  }\n  /**\n   * Add a promise to the group.\n   * @returns The promise that was added.\n   */\n  add(promise) {\n    this.promises.push(promise);\n    this.root ||= this.drain();\n    return promise;\n  }\n  async drain() {\n    while (this.promises.length > 0) {\n      try {\n        await this.promises[0];\n      } catch (error) {\n        this.onError(error);\n      }\n      this.promises.shift();\n    }\n    this.root = null;\n  }\n  // Allow the group to be awaited.\n  then(onfulfilled, onrejected) {\n    return (this.root ?? Promise.resolve()).then(onfulfilled, onrejected);\n  }\n}\nconst fnToContainer = (fn, subType) => {\n  if (!fn) return fn;\n  if (!Array.isArray(fn)) {\n    if (typeof fn === \"function\" || typeof fn === \"string\")\n      return subType ? { fn, subType } : { fn };\n    else if (\"fn\" in fn) return fn;\n  }\n  const fns = [];\n  for (const x of fn) {\n    if (typeof x === \"function\" || typeof x === \"string\")\n      fns.push(subType ? { fn: x, subType } : { fn: x });\n    else if (\"fn\" in x) fns.push(x);\n  }\n  return fns;\n};\nconst localHookToLifeCycleStore = (a) => {\n  return {\n    ...a,\n    start: fnToContainer(a?.start),\n    request: fnToContainer(a?.request),\n    parse: fnToContainer(a?.parse),\n    transform: fnToContainer(a?.transform),\n    beforeHandle: fnToContainer(a?.beforeHandle),\n    afterHandle: fnToContainer(a?.afterHandle),\n    mapResponse: fnToContainer(a?.mapResponse),\n    afterResponse: fnToContainer(a?.afterResponse),\n    trace: fnToContainer(a?.trace),\n    error: fnToContainer(a?.error),\n    stop: fnToContainer(a?.stop)\n  };\n};\nconst lifeCycleToFn = (a) => {\n  const hook = {};\n  if (a.start?.map) hook.start = a.start.map((x) => x.fn);\n  if (a.request?.map) hook.request = a.request.map((x) => x.fn);\n  if (a.parse?.map) hook.parse = a.parse.map((x) => x.fn);\n  if (a.transform?.map) hook.transform = a.transform.map((x) => x.fn);\n  if (a.beforeHandle?.map) hook.beforeHandle = a.beforeHandle.map((x) => x.fn);\n  if (a.afterHandle?.map) hook.afterHandle = a.afterHandle.map((x) => x.fn);\n  if (a.mapResponse?.map) hook.mapResponse = a.mapResponse.map((x) => x.fn);\n  if (a.afterResponse?.map)\n    hook.afterResponse = a.afterResponse.map((x) => x.fn);\n  if (a.trace?.map) hook.trace = a.trace.map((x) => x.fn);\n  if (a.error?.map) hook.error = a.error.map((x) => x.fn);\n  if (a.stop?.map) hook.stop = a.stop.map((x) => x.fn);\n  return hook;\n};\nconst cloneInference = (inference) => ({\n  body: inference.body,\n  cookie: inference.cookie,\n  headers: inference.headers,\n  query: inference.query,\n  set: inference.set,\n  server: inference.server,\n  request: inference.request,\n  route: inference.route\n});\nconst redirect = (url, status = 302) => Response.redirect(url, status);\nconst ELYSIA_FORM_DATA = Symbol(\"ElysiaFormData\");\nconst ELYSIA_REQUEST_ID = Symbol(\"ElysiaRequestId\");\nconst form = (items) => {\n  const formData = new FormData();\n  for (const [key, value] of Object.entries(items)) {\n    if (Array.isArray(value)) {\n      for (const v of value) {\n        if (value instanceof File)\n          formData.append(key, value, value.name);\n        formData.append(key, v);\n      }\n      continue;\n    }\n    if (value instanceof File) formData.append(key, value, value.name);\n    formData.append(key, value);\n  }\n  return formData;\n};\nconst randomId = () => {\n  const uuid = crypto.randomUUID();\n  return uuid.slice(0, 8) + uuid.slice(24, 32);\n};\nconst deduplicateChecksum = (array) => {\n  const hashes = [];\n  for (let i = 0; i < array.length; i++) {\n    const item = array[i];\n    if (item.checksum) {\n      if (hashes.includes(item.checksum)) {\n        array.splice(i, 1);\n        i--;\n      }\n      hashes.push(item.checksum);\n    }\n  }\n  return array;\n};\nconst promoteEvent = (events, as = \"scoped\") => {\n  if (!events) return;\n  if (as === \"scoped\") {\n    for (const event of events)\n      if (\"scope\" in event && event.scope === \"local\")\n        event.scope = \"scoped\";\n    return;\n  }\n  for (const event of events) if (\"scope\" in event) event.scope = \"global\";\n};\nconst getLoosePath = (path) => {\n  if (path.charCodeAt(path.length - 1) === 47)\n    return path.slice(0, path.length - 1);\n  return path + \"/\";\n};\nconst isNotEmpty = (obj) => {\n  if (!obj) return false;\n  for (const x in obj) return true;\n  return false;\n};\nconst isEmptyHookProperty = (prop) => {\n  if (Array.isArray(prop)) return prop.length === 0;\n  return !prop;\n};\nconst compressHistoryHook = (hook) => {\n  const history = { ...hook };\n  if (isEmptyHookProperty(hook.afterHandle)) delete history.afterHandle;\n  if (isEmptyHookProperty(hook.afterResponse)) delete history.afterResponse;\n  if (isEmptyHookProperty(hook.beforeHandle)) delete history.beforeHandle;\n  if (isEmptyHookProperty(hook.error)) delete history.error;\n  if (isEmptyHookProperty(hook.mapResponse)) delete history.mapResponse;\n  if (isEmptyHookProperty(hook.parse)) delete history.parse;\n  if (isEmptyHookProperty(hook.request)) delete history.request;\n  if (isEmptyHookProperty(hook.start)) delete history.start;\n  if (isEmptyHookProperty(hook.stop)) delete history.stop;\n  if (isEmptyHookProperty(hook.trace)) delete history.trace;\n  if (isEmptyHookProperty(hook.transform)) delete history.transform;\n  if (!history.type) delete history.type;\n  if (history.detail && !Object.keys(history.detail).length)\n    delete history.detail;\n  if (!history.body) delete history.body;\n  if (!history.cookie) delete history.cookie;\n  if (!history.headers) delete history.headers;\n  if (!history.query) delete history.query;\n  if (!history.params) delete history.params;\n  if (!history.response) delete history.response;\n  return history;\n};\nconst decompressHistoryHook = (hook) => {\n  const history = { ...hook };\n  if (!history.afterHandle) history.afterHandle = [];\n  if (!history.afterResponse) history.afterResponse = [];\n  if (!history.beforeHandle) history.beforeHandle = [];\n  if (!history.error) history.error = [];\n  if (!history.mapResponse) history.mapResponse = [];\n  if (!history.parse) history.parse = [];\n  if (!history.request) history.request = [];\n  if (!history.start) history.start = [];\n  if (!history.stop) history.stop = [];\n  if (!history.trace) history.trace = [];\n  if (!history.transform) history.transform = [];\n  if (!history.body) history.body = void 0;\n  if (!history.cookie) history.cookie = void 0;\n  if (!history.headers) history.headers = void 0;\n  if (!history.query) history.query = void 0;\n  if (!history.params) history.params = void 0;\n  if (!history.response) history.response = void 0;\n  return history;\n};\nconst encodePath = (path, { dynamic = false } = {}) => {\n  let encoded = encodeURIComponent(path).replace(/%2F/g, \"/\");\n  if (dynamic) encoded = encoded.replace(/%3A/g, \":\").replace(/%3F/g, \"?\");\n  return encoded;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/utils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/ws/index.mjs":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/ws/index.mjs ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ElysiaWS: () => (/* binding */ ElysiaWS),\n/* harmony export */   createHandleWSResponse: () => (/* binding */ createHandleWSResponse),\n/* harmony export */   createWSMessageParser: () => (/* binding */ createWSMessageParser),\n/* harmony export */   websocket: () => (/* binding */ websocket)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/utils.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/error.mjs\");\n\n\nconst websocket = {\n  open(ws) {\n    ws.data.open?.(ws);\n  },\n  message(ws, message) {\n    ws.data.message?.(ws, message);\n  },\n  drain(ws) {\n    ws.data.drain?.(ws);\n  },\n  close(ws, code, reason) {\n    ws.data.close?.(ws, code, reason);\n  }\n};\nclass ElysiaWS {\n  constructor(raw, data, body = void 0) {\n    this.raw = raw;\n    this.data = data;\n    this.body = body;\n    this.validator = raw.data?.validator;\n    this.sendText = raw.sendText.bind(raw);\n    this.sendBinary = raw.sendBinary.bind(raw);\n    this.close = raw.close.bind(raw);\n    this.terminate = raw.terminate.bind(raw);\n    this.publishText = raw.publishText.bind(raw);\n    this.publishBinary = raw.publishBinary.bind(raw);\n    this.subscribe = raw.subscribe.bind(raw);\n    this.unsubscribe = raw.unsubscribe.bind(raw);\n    this.isSubscribed = raw.isSubscribed.bind(raw);\n    this.cork = raw.cork.bind(raw);\n    this.remoteAddress = raw.remoteAddress;\n    this.binaryType = raw.binaryType;\n    this.data = raw.data;\n    this.send = this.send.bind(this);\n    this.ping = this.ping.bind(this);\n    this.pong = this.pong.bind(this);\n    this.publish = this.publish.bind(this);\n  }\n  get id() {\n    return this.data.id;\n  }\n  /**\n   * Sends a message to the client.\n   *\n   * @param data The data to send.\n   * @param compress Should the data be compressed? If the client does not support compression, this is ignored.\n   * @example\n   * ws.send(\"Hello!\");\n   * ws.send(\"Compress this.\", true);\n   * ws.send(new Uint8Array([1, 2, 3, 4]));\n   */\n  send(data, compress) {\n    if (Buffer.isBuffer(data))\n      return this.raw.send(data, compress);\n    if (this.validator?.Check(data) === false)\n      return this.raw.send(\n        new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"message\", this.validator, data).message\n      );\n    if (typeof data === \"object\") data = JSON.stringify(data);\n    return this.raw.send(data, compress);\n  }\n  /**\n   * Sends a ping.\n   *\n   * @param data The data to send\n   */\n  ping(data) {\n    if (Buffer.isBuffer(data))\n      return this.raw.ping(data);\n    if (this.validator?.Check(data) === false)\n      return this.raw.send(\n        new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"message\", this.validator, data).message\n      );\n    if (typeof data === \"object\") data = JSON.stringify(data);\n    return this.raw.ping(data);\n  }\n  /**\n   * Sends a pong.\n   *\n   * @param data The data to send\n   */\n  pong(data) {\n    if (Buffer.isBuffer(data))\n      return this.raw.pong(data);\n    if (this.validator?.Check(data) === false)\n      return this.raw.send(\n        new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"message\", this.validator, data).message\n      );\n    if (typeof data === \"object\") data = JSON.stringify(data);\n    return this.raw.pong(data);\n  }\n  /**\n   * Sends a message to subscribers of the topic.\n   *\n   * @param topic The topic name.\n   * @param data The data to send.\n   * @param compress Should the data be compressed? If the client does not support compression, this is ignored.\n   * @example\n   * ws.publish(\"chat\", \"Hello!\");\n   * ws.publish(\"chat\", \"Compress this.\", true);\n   * ws.publish(\"chat\", new Uint8Array([1, 2, 3, 4]));\n   */\n  publish(topic, data, compress) {\n    if (Buffer.isBuffer(data))\n      return this.raw.publish(\n        topic,\n        data,\n        compress\n      );\n    if (this.validator?.Check(data) === false)\n      return this.raw.send(\n        new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"message\", this.validator, data).message\n      );\n    if (typeof data === \"object\") data = JSON.stringify(data);\n    return this.raw.publish(topic, data, compress);\n  }\n  get readyState() {\n    return this.raw.readyState;\n  }\n}\nconst createWSMessageParser = (parse) => {\n  const parsers = typeof parse === \"function\" ? [parse] : parse;\n  return async function parseMessage(ws, message) {\n    if (typeof message === \"string\") {\n      const start = message?.charCodeAt(0);\n      if (start === 34 || start === 47 || start === 91 || start === 123)\n        try {\n          message = JSON.parse(message);\n        } catch {\n        }\n      else if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isNumericString)(message)) message = +message;\n      else if (message === \"true\") message = true;\n      else if (message === \"false\") message = false;\n      else if (message === \"null\") message = null;\n    }\n    if (parsers)\n      for (let i = 0; i < parsers.length; i++) {\n        let temp = parsers[i](ws, message);\n        if (temp instanceof Promise) temp = await temp;\n        if (temp !== void 0) return temp;\n      }\n    return message;\n  };\n};\nconst createHandleWSResponse = (validateResponse) => {\n  const handleWSResponse = (ws, data) => {\n    if (data instanceof Promise)\n      return data.then((data2) => handleWSResponse(ws, data2));\n    if (Buffer.isBuffer(data)) return ws.send(data.toString());\n    if (data === void 0) return;\n    const send = (datum) => {\n      if (validateResponse?.Check(datum) === false)\n        return ws.send(\n          new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"message\", validateResponse, datum).message\n        );\n      if (typeof datum === \"object\") return ws.send(JSON.stringify(datum));\n      ws.send(datum);\n    };\n    if (typeof data?.next !== \"function\")\n      return void send(data);\n    const init = data.next();\n    if (init instanceof Promise)\n      return (async () => {\n        const first = await init;\n        if (validateResponse?.Check(first) === false)\n          return ws.send(\n            new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ValidationError(\"message\", validateResponse, first).message\n          );\n        send(first.value);\n        if (!first.done)\n          for await (const datum of data) send(datum);\n      })();\n    send(init.value);\n    if (!init.done) for (const datum of data) send(datum);\n  };\n  return handleWSResponse;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/elysia@1.2.25_@sinclair+typebox@0.34.33_typescript@5.8.3/node_modules/elysia/dist/ws/index.mjs\n");

/***/ })

};
;